// Generated by Ignite ignite.com/cli

import { SigningStargateClient, DeliverTxResponse, StdFee } from "@cosmjs/stargate";
import { EncodeObject, GeneratedType, OfflineSigner, Registry } from "@cosmjs/proto-signing";
import { msgTypes } from './registry';
import { IgniteClient } from "../client"
import { MissingWalletError } from "../helpers"
import { Api } from "./rest";
import { MsgChannelOpenInit } from "./types/ibc/core/channel/v1/tx";
import { MsgChannelOpenTry } from "./types/ibc/core/channel/v1/tx";
import { MsgChannelOpenAck } from "./types/ibc/core/channel/v1/tx";
import { MsgChannelOpenConfirm } from "./types/ibc/core/channel/v1/tx";
import { MsgChannelCloseInit } from "./types/ibc/core/channel/v1/tx";
import { MsgChannelCloseConfirm } from "./types/ibc/core/channel/v1/tx";
import { MsgRecvPacket } from "./types/ibc/core/channel/v1/tx";
import { MsgTimeout } from "./types/ibc/core/channel/v1/tx";
import { MsgTimeoutOnClose } from "./types/ibc/core/channel/v1/tx";
import { MsgAcknowledgement } from "./types/ibc/core/channel/v1/tx";
import { MsgChannelUpgradeInit } from "./types/ibc/core/channel/v1/tx";
import { MsgChannelUpgradeTry } from "./types/ibc/core/channel/v1/tx";
import { MsgChannelUpgradeAck } from "./types/ibc/core/channel/v1/tx";
import { MsgChannelUpgradeConfirm } from "./types/ibc/core/channel/v1/tx";
import { MsgChannelUpgradeOpen } from "./types/ibc/core/channel/v1/tx";
import { MsgChannelUpgradeTimeout } from "./types/ibc/core/channel/v1/tx";
import { MsgChannelUpgradeCancel } from "./types/ibc/core/channel/v1/tx";
import { MsgUpdateParams } from "./types/ibc/core/channel/v1/tx";
import { MsgPruneAcknowledgements } from "./types/ibc/core/channel/v1/tx";

import { Channel as typeChannel} from "./types"
import { IdentifiedChannel as typeIdentifiedChannel} from "./types"
import { Counterparty as typeCounterparty} from "./types"
import { Packet as typePacket} from "./types"
import { PacketState as typePacketState} from "./types"
import { PacketId as typePacketId} from "./types"
import { Acknowledgement as typeAcknowledgement} from "./types"
import { Timeout as typeTimeout} from "./types"
import { Params as typeParams} from "./types"
import { PacketSequence as typePacketSequence} from "./types"
import { Upgrade as typeUpgrade} from "./types"
import { UpgradeFields as typeUpgradeFields} from "./types"
import { ErrorReceipt as typeErrorReceipt} from "./types"

export { MsgChannelOpenInit, MsgChannelOpenTry, MsgChannelOpenAck, MsgChannelOpenConfirm, MsgChannelCloseInit, MsgChannelCloseConfirm, MsgRecvPacket, MsgTimeout, MsgTimeoutOnClose, MsgAcknowledgement, MsgChannelUpgradeInit, MsgChannelUpgradeTry, MsgChannelUpgradeAck, MsgChannelUpgradeConfirm, MsgChannelUpgradeOpen, MsgChannelUpgradeTimeout, MsgChannelUpgradeCancel, MsgUpdateParams, MsgPruneAcknowledgements };

type sendMsgChannelOpenInitParams = {
  value: MsgChannelOpenInit,
  fee?: StdFee,
  memo?: string
};

type sendMsgChannelOpenTryParams = {
  value: MsgChannelOpenTry,
  fee?: StdFee,
  memo?: string
};

type sendMsgChannelOpenAckParams = {
  value: MsgChannelOpenAck,
  fee?: StdFee,
  memo?: string
};

type sendMsgChannelOpenConfirmParams = {
  value: MsgChannelOpenConfirm,
  fee?: StdFee,
  memo?: string
};

type sendMsgChannelCloseInitParams = {
  value: MsgChannelCloseInit,
  fee?: StdFee,
  memo?: string
};

type sendMsgChannelCloseConfirmParams = {
  value: MsgChannelCloseConfirm,
  fee?: StdFee,
  memo?: string
};

type sendMsgRecvPacketParams = {
  value: MsgRecvPacket,
  fee?: StdFee,
  memo?: string
};

type sendMsgTimeoutParams = {
  value: MsgTimeout,
  fee?: StdFee,
  memo?: string
};

type sendMsgTimeoutOnCloseParams = {
  value: MsgTimeoutOnClose,
  fee?: StdFee,
  memo?: string
};

type sendMsgAcknowledgementParams = {
  value: MsgAcknowledgement,
  fee?: StdFee,
  memo?: string
};

type sendMsgChannelUpgradeInitParams = {
  value: MsgChannelUpgradeInit,
  fee?: StdFee,
  memo?: string
};

type sendMsgChannelUpgradeTryParams = {
  value: MsgChannelUpgradeTry,
  fee?: StdFee,
  memo?: string
};

type sendMsgChannelUpgradeAckParams = {
  value: MsgChannelUpgradeAck,
  fee?: StdFee,
  memo?: string
};

type sendMsgChannelUpgradeConfirmParams = {
  value: MsgChannelUpgradeConfirm,
  fee?: StdFee,
  memo?: string
};

type sendMsgChannelUpgradeOpenParams = {
  value: MsgChannelUpgradeOpen,
  fee?: StdFee,
  memo?: string
};

type sendMsgChannelUpgradeTimeoutParams = {
  value: MsgChannelUpgradeTimeout,
  fee?: StdFee,
  memo?: string
};

type sendMsgChannelUpgradeCancelParams = {
  value: MsgChannelUpgradeCancel,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdateParamsParams = {
  value: MsgUpdateParams,
  fee?: StdFee,
  memo?: string
};

type sendMsgPruneAcknowledgementsParams = {
  value: MsgPruneAcknowledgements,
  fee?: StdFee,
  memo?: string
};


type msgChannelOpenInitParams = {
  value: MsgChannelOpenInit,
};

type msgChannelOpenTryParams = {
  value: MsgChannelOpenTry,
};

type msgChannelOpenAckParams = {
  value: MsgChannelOpenAck,
};

type msgChannelOpenConfirmParams = {
  value: MsgChannelOpenConfirm,
};

type msgChannelCloseInitParams = {
  value: MsgChannelCloseInit,
};

type msgChannelCloseConfirmParams = {
  value: MsgChannelCloseConfirm,
};

type msgRecvPacketParams = {
  value: MsgRecvPacket,
};

type msgTimeoutParams = {
  value: MsgTimeout,
};

type msgTimeoutOnCloseParams = {
  value: MsgTimeoutOnClose,
};

type msgAcknowledgementParams = {
  value: MsgAcknowledgement,
};

type msgChannelUpgradeInitParams = {
  value: MsgChannelUpgradeInit,
};

type msgChannelUpgradeTryParams = {
  value: MsgChannelUpgradeTry,
};

type msgChannelUpgradeAckParams = {
  value: MsgChannelUpgradeAck,
};

type msgChannelUpgradeConfirmParams = {
  value: MsgChannelUpgradeConfirm,
};

type msgChannelUpgradeOpenParams = {
  value: MsgChannelUpgradeOpen,
};

type msgChannelUpgradeTimeoutParams = {
  value: MsgChannelUpgradeTimeout,
};

type msgChannelUpgradeCancelParams = {
  value: MsgChannelUpgradeCancel,
};

type msgUpdateParamsParams = {
  value: MsgUpdateParams,
};

type msgPruneAcknowledgementsParams = {
  value: MsgPruneAcknowledgements,
};


export const registry = new Registry(msgTypes);

type Field = {
	name: string;
	type: unknown;
}
function getStructure(template) {
	const structure: {fields: Field[]} = { fields: [] }
	for (let [key, value] of Object.entries(template)) {
		let field = { name: key, type: typeof value }
		structure.fields.push(field)
	}
	return structure
}
const defaultFee = {
  amount: [],
  gas: "200000",
};

interface TxClientOptions {
  addr: string
	prefix: string
	signer?: OfflineSigner
}

export const txClient = ({ signer, prefix, addr }: TxClientOptions = { addr: "http://localhost:26657", prefix: "cosmos" }) => {

  return {
		
		async sendMsgChannelOpenInit({ value, fee, memo }: sendMsgChannelOpenInitParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgChannelOpenInit: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgChannelOpenInit({ value: MsgChannelOpenInit.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgChannelOpenInit: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgChannelOpenTry({ value, fee, memo }: sendMsgChannelOpenTryParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgChannelOpenTry: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgChannelOpenTry({ value: MsgChannelOpenTry.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgChannelOpenTry: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgChannelOpenAck({ value, fee, memo }: sendMsgChannelOpenAckParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgChannelOpenAck: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgChannelOpenAck({ value: MsgChannelOpenAck.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgChannelOpenAck: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgChannelOpenConfirm({ value, fee, memo }: sendMsgChannelOpenConfirmParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgChannelOpenConfirm: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgChannelOpenConfirm({ value: MsgChannelOpenConfirm.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgChannelOpenConfirm: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgChannelCloseInit({ value, fee, memo }: sendMsgChannelCloseInitParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgChannelCloseInit: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgChannelCloseInit({ value: MsgChannelCloseInit.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgChannelCloseInit: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgChannelCloseConfirm({ value, fee, memo }: sendMsgChannelCloseConfirmParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgChannelCloseConfirm: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgChannelCloseConfirm({ value: MsgChannelCloseConfirm.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgChannelCloseConfirm: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgRecvPacket({ value, fee, memo }: sendMsgRecvPacketParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgRecvPacket: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgRecvPacket({ value: MsgRecvPacket.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgRecvPacket: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgTimeout({ value, fee, memo }: sendMsgTimeoutParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgTimeout: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgTimeout({ value: MsgTimeout.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgTimeout: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgTimeoutOnClose({ value, fee, memo }: sendMsgTimeoutOnCloseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgTimeoutOnClose: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgTimeoutOnClose({ value: MsgTimeoutOnClose.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgTimeoutOnClose: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgAcknowledgement({ value, fee, memo }: sendMsgAcknowledgementParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgAcknowledgement: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgAcknowledgement({ value: MsgAcknowledgement.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgAcknowledgement: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgChannelUpgradeInit({ value, fee, memo }: sendMsgChannelUpgradeInitParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgChannelUpgradeInit: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgChannelUpgradeInit({ value: MsgChannelUpgradeInit.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgChannelUpgradeInit: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgChannelUpgradeTry({ value, fee, memo }: sendMsgChannelUpgradeTryParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgChannelUpgradeTry: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgChannelUpgradeTry({ value: MsgChannelUpgradeTry.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgChannelUpgradeTry: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgChannelUpgradeAck({ value, fee, memo }: sendMsgChannelUpgradeAckParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgChannelUpgradeAck: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgChannelUpgradeAck({ value: MsgChannelUpgradeAck.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgChannelUpgradeAck: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgChannelUpgradeConfirm({ value, fee, memo }: sendMsgChannelUpgradeConfirmParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgChannelUpgradeConfirm: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgChannelUpgradeConfirm({ value: MsgChannelUpgradeConfirm.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgChannelUpgradeConfirm: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgChannelUpgradeOpen({ value, fee, memo }: sendMsgChannelUpgradeOpenParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgChannelUpgradeOpen: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgChannelUpgradeOpen({ value: MsgChannelUpgradeOpen.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgChannelUpgradeOpen: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgChannelUpgradeTimeout({ value, fee, memo }: sendMsgChannelUpgradeTimeoutParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgChannelUpgradeTimeout: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgChannelUpgradeTimeout({ value: MsgChannelUpgradeTimeout.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgChannelUpgradeTimeout: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgChannelUpgradeCancel({ value, fee, memo }: sendMsgChannelUpgradeCancelParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgChannelUpgradeCancel: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgChannelUpgradeCancel({ value: MsgChannelUpgradeCancel.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgChannelUpgradeCancel: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdateParams({ value, fee, memo }: sendMsgUpdateParamsParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateParams: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgUpdateParams({ value: MsgUpdateParams.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateParams: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgPruneAcknowledgements({ value, fee, memo }: sendMsgPruneAcknowledgementsParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgPruneAcknowledgements: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgPruneAcknowledgements({ value: MsgPruneAcknowledgements.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgPruneAcknowledgements: Could not broadcast Tx: '+ e.message)
			}
		},
		
		
		msgChannelOpenInit({ value }: msgChannelOpenInitParams): EncodeObject {
			try {
				return { typeUrl: "/ibc.core.channel.v1.MsgChannelOpenInit", value: MsgChannelOpenInit.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgChannelOpenInit: Could not create message: ' + e.message)
			}
		},
		
		msgChannelOpenTry({ value }: msgChannelOpenTryParams): EncodeObject {
			try {
				return { typeUrl: "/ibc.core.channel.v1.MsgChannelOpenTry", value: MsgChannelOpenTry.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgChannelOpenTry: Could not create message: ' + e.message)
			}
		},
		
		msgChannelOpenAck({ value }: msgChannelOpenAckParams): EncodeObject {
			try {
				return { typeUrl: "/ibc.core.channel.v1.MsgChannelOpenAck", value: MsgChannelOpenAck.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgChannelOpenAck: Could not create message: ' + e.message)
			}
		},
		
		msgChannelOpenConfirm({ value }: msgChannelOpenConfirmParams): EncodeObject {
			try {
				return { typeUrl: "/ibc.core.channel.v1.MsgChannelOpenConfirm", value: MsgChannelOpenConfirm.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgChannelOpenConfirm: Could not create message: ' + e.message)
			}
		},
		
		msgChannelCloseInit({ value }: msgChannelCloseInitParams): EncodeObject {
			try {
				return { typeUrl: "/ibc.core.channel.v1.MsgChannelCloseInit", value: MsgChannelCloseInit.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgChannelCloseInit: Could not create message: ' + e.message)
			}
		},
		
		msgChannelCloseConfirm({ value }: msgChannelCloseConfirmParams): EncodeObject {
			try {
				return { typeUrl: "/ibc.core.channel.v1.MsgChannelCloseConfirm", value: MsgChannelCloseConfirm.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgChannelCloseConfirm: Could not create message: ' + e.message)
			}
		},
		
		msgRecvPacket({ value }: msgRecvPacketParams): EncodeObject {
			try {
				return { typeUrl: "/ibc.core.channel.v1.MsgRecvPacket", value: MsgRecvPacket.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgRecvPacket: Could not create message: ' + e.message)
			}
		},
		
		msgTimeout({ value }: msgTimeoutParams): EncodeObject {
			try {
				return { typeUrl: "/ibc.core.channel.v1.MsgTimeout", value: MsgTimeout.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgTimeout: Could not create message: ' + e.message)
			}
		},
		
		msgTimeoutOnClose({ value }: msgTimeoutOnCloseParams): EncodeObject {
			try {
				return { typeUrl: "/ibc.core.channel.v1.MsgTimeoutOnClose", value: MsgTimeoutOnClose.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgTimeoutOnClose: Could not create message: ' + e.message)
			}
		},
		
		msgAcknowledgement({ value }: msgAcknowledgementParams): EncodeObject {
			try {
				return { typeUrl: "/ibc.core.channel.v1.MsgAcknowledgement", value: MsgAcknowledgement.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgAcknowledgement: Could not create message: ' + e.message)
			}
		},
		
		msgChannelUpgradeInit({ value }: msgChannelUpgradeInitParams): EncodeObject {
			try {
				return { typeUrl: "/ibc.core.channel.v1.MsgChannelUpgradeInit", value: MsgChannelUpgradeInit.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgChannelUpgradeInit: Could not create message: ' + e.message)
			}
		},
		
		msgChannelUpgradeTry({ value }: msgChannelUpgradeTryParams): EncodeObject {
			try {
				return { typeUrl: "/ibc.core.channel.v1.MsgChannelUpgradeTry", value: MsgChannelUpgradeTry.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgChannelUpgradeTry: Could not create message: ' + e.message)
			}
		},
		
		msgChannelUpgradeAck({ value }: msgChannelUpgradeAckParams): EncodeObject {
			try {
				return { typeUrl: "/ibc.core.channel.v1.MsgChannelUpgradeAck", value: MsgChannelUpgradeAck.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgChannelUpgradeAck: Could not create message: ' + e.message)
			}
		},
		
		msgChannelUpgradeConfirm({ value }: msgChannelUpgradeConfirmParams): EncodeObject {
			try {
				return { typeUrl: "/ibc.core.channel.v1.MsgChannelUpgradeConfirm", value: MsgChannelUpgradeConfirm.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgChannelUpgradeConfirm: Could not create message: ' + e.message)
			}
		},
		
		msgChannelUpgradeOpen({ value }: msgChannelUpgradeOpenParams): EncodeObject {
			try {
				return { typeUrl: "/ibc.core.channel.v1.MsgChannelUpgradeOpen", value: MsgChannelUpgradeOpen.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgChannelUpgradeOpen: Could not create message: ' + e.message)
			}
		},
		
		msgChannelUpgradeTimeout({ value }: msgChannelUpgradeTimeoutParams): EncodeObject {
			try {
				return { typeUrl: "/ibc.core.channel.v1.MsgChannelUpgradeTimeout", value: MsgChannelUpgradeTimeout.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgChannelUpgradeTimeout: Could not create message: ' + e.message)
			}
		},
		
		msgChannelUpgradeCancel({ value }: msgChannelUpgradeCancelParams): EncodeObject {
			try {
				return { typeUrl: "/ibc.core.channel.v1.MsgChannelUpgradeCancel", value: MsgChannelUpgradeCancel.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgChannelUpgradeCancel: Could not create message: ' + e.message)
			}
		},
		
		msgUpdateParams({ value }: msgUpdateParamsParams): EncodeObject {
			try {
				return { typeUrl: "/ibc.core.channel.v1.MsgUpdateParams", value: MsgUpdateParams.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateParams: Could not create message: ' + e.message)
			}
		},
		
		msgPruneAcknowledgements({ value }: msgPruneAcknowledgementsParams): EncodeObject {
			try {
				return { typeUrl: "/ibc.core.channel.v1.MsgPruneAcknowledgements", value: MsgPruneAcknowledgements.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgPruneAcknowledgements: Could not create message: ' + e.message)
			}
		},
		
	}
};

interface QueryClientOptions {
  addr: string
}

export const queryClient = ({ addr: addr }: QueryClientOptions = { addr: "http://localhost:1317" }) => {
  return new Api({ baseURL: addr });
};

class SDKModule {
	public query: ReturnType<typeof queryClient>;
	public tx: ReturnType<typeof txClient>;
	public structure: Record<string,unknown>;
	public registry: Array<[string, GeneratedType]> = [];

	constructor(client: IgniteClient) {		
	
		this.query = queryClient({ addr: client.env.apiURL });		
		this.updateTX(client);
		this.structure =  {
						Channel: getStructure(typeChannel.fromPartial({})),
						IdentifiedChannel: getStructure(typeIdentifiedChannel.fromPartial({})),
						Counterparty: getStructure(typeCounterparty.fromPartial({})),
						Packet: getStructure(typePacket.fromPartial({})),
						PacketState: getStructure(typePacketState.fromPartial({})),
						PacketId: getStructure(typePacketId.fromPartial({})),
						Acknowledgement: getStructure(typeAcknowledgement.fromPartial({})),
						Timeout: getStructure(typeTimeout.fromPartial({})),
						Params: getStructure(typeParams.fromPartial({})),
						PacketSequence: getStructure(typePacketSequence.fromPartial({})),
						Upgrade: getStructure(typeUpgrade.fromPartial({})),
						UpgradeFields: getStructure(typeUpgradeFields.fromPartial({})),
						ErrorReceipt: getStructure(typeErrorReceipt.fromPartial({})),
						
		};
		client.on('signer-changed',(signer) => {			
		 this.updateTX(client);
		})
	}
	updateTX(client: IgniteClient) {
    const methods = txClient({
        signer: client.signer,
        addr: client.env.rpcURL,
        prefix: client.env.prefix ?? "cosmos",
    })
	
    this.tx = methods;
    for (let m in methods) {
        this.tx[m] = methods[m].bind(this.tx);
    }
	}
};

const IgntModule = (test: IgniteClient) => {
	return {
		module: {
			IbcCoreChannelV_1: new SDKModule(test)
		},
		registry: msgTypes
  }
}
export default IgntModule;