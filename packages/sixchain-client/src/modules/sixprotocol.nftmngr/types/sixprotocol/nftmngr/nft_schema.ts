// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: sixprotocol/nftmngr/nft_schema.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { OnChainData, OnChainDataResult } from "./on_chain_data";
import { OriginData } from "./origin_data";

export const protobufPackage = "sixprotocol.nftmngr";

export interface NFTSchema {
  code: string;
  name: string;
  owner: string;
  description: string;
  originData: OriginData | undefined;
  onchainData: OnChainData | undefined;
  isVerified: boolean;
  mintAuthorization: string;
}

export interface NFTSchemaINPUT {
  code: string;
  name: string;
  owner: string;
  description: string;
  systemActioners: string[];
  originData: OriginData | undefined;
  onchainData: OnChainData | undefined;
  isVerified: boolean;
  mintAuthorization: string;
}

export interface NFTSchemaQueryResult {
  code: string;
  name: string;
  owner: string;
  description: string;
  originData: OriginData | undefined;
  onchainData: OnChainDataResult | undefined;
  isVerified: boolean;
  mintAuthorization: string;
}

function createBaseNFTSchema(): NFTSchema {
  return {
    code: "",
    name: "",
    owner: "",
    description: "",
    originData: undefined,
    onchainData: undefined,
    isVerified: false,
    mintAuthorization: "",
  };
}

export const NFTSchema: MessageFns<NFTSchema> = {
  encode(message: NFTSchema, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== "") {
      writer.uint32(10).string(message.code);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.owner !== "") {
      writer.uint32(26).string(message.owner);
    }
    if (message.description !== "") {
      writer.uint32(34).string(message.description);
    }
    if (message.originData !== undefined) {
      OriginData.encode(message.originData, writer.uint32(42).fork()).join();
    }
    if (message.onchainData !== undefined) {
      OnChainData.encode(message.onchainData, writer.uint32(50).fork()).join();
    }
    if (message.isVerified !== false) {
      writer.uint32(56).bool(message.isVerified);
    }
    if (message.mintAuthorization !== "") {
      writer.uint32(66).string(message.mintAuthorization);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NFTSchema {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNFTSchema();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.code = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.owner = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.originData = OriginData.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.onchainData = OnChainData.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.isVerified = reader.bool();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.mintAuthorization = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NFTSchema {
    return {
      code: isSet(object.code) ? globalThis.String(object.code) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      owner: isSet(object.owner) ? globalThis.String(object.owner) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      originData: isSet(object.originData) ? OriginData.fromJSON(object.originData) : undefined,
      onchainData: isSet(object.onchainData) ? OnChainData.fromJSON(object.onchainData) : undefined,
      isVerified: isSet(object.isVerified) ? globalThis.Boolean(object.isVerified) : false,
      mintAuthorization: isSet(object.mintAuthorization) ? globalThis.String(object.mintAuthorization) : "",
    };
  },

  toJSON(message: NFTSchema): unknown {
    const obj: any = {};
    if (message.code !== "") {
      obj.code = message.code;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.owner !== "") {
      obj.owner = message.owner;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.originData !== undefined) {
      obj.originData = OriginData.toJSON(message.originData);
    }
    if (message.onchainData !== undefined) {
      obj.onchainData = OnChainData.toJSON(message.onchainData);
    }
    if (message.isVerified !== false) {
      obj.isVerified = message.isVerified;
    }
    if (message.mintAuthorization !== "") {
      obj.mintAuthorization = message.mintAuthorization;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<NFTSchema>, I>>(base?: I): NFTSchema {
    return NFTSchema.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<NFTSchema>, I>>(object: I): NFTSchema {
    const message = createBaseNFTSchema();
    message.code = object.code ?? "";
    message.name = object.name ?? "";
    message.owner = object.owner ?? "";
    message.description = object.description ?? "";
    message.originData = (object.originData !== undefined && object.originData !== null)
      ? OriginData.fromPartial(object.originData)
      : undefined;
    message.onchainData = (object.onchainData !== undefined && object.onchainData !== null)
      ? OnChainData.fromPartial(object.onchainData)
      : undefined;
    message.isVerified = object.isVerified ?? false;
    message.mintAuthorization = object.mintAuthorization ?? "";
    return message;
  },
};

function createBaseNFTSchemaINPUT(): NFTSchemaINPUT {
  return {
    code: "",
    name: "",
    owner: "",
    description: "",
    systemActioners: [],
    originData: undefined,
    onchainData: undefined,
    isVerified: false,
    mintAuthorization: "",
  };
}

export const NFTSchemaINPUT: MessageFns<NFTSchemaINPUT> = {
  encode(message: NFTSchemaINPUT, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== "") {
      writer.uint32(10).string(message.code);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.owner !== "") {
      writer.uint32(26).string(message.owner);
    }
    if (message.description !== "") {
      writer.uint32(34).string(message.description);
    }
    for (const v of message.systemActioners) {
      writer.uint32(42).string(v!);
    }
    if (message.originData !== undefined) {
      OriginData.encode(message.originData, writer.uint32(50).fork()).join();
    }
    if (message.onchainData !== undefined) {
      OnChainData.encode(message.onchainData, writer.uint32(58).fork()).join();
    }
    if (message.isVerified !== false) {
      writer.uint32(64).bool(message.isVerified);
    }
    if (message.mintAuthorization !== "") {
      writer.uint32(74).string(message.mintAuthorization);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NFTSchemaINPUT {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNFTSchemaINPUT();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.code = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.owner = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.systemActioners.push(reader.string());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.originData = OriginData.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.onchainData = OnChainData.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.isVerified = reader.bool();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.mintAuthorization = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NFTSchemaINPUT {
    return {
      code: isSet(object.code) ? globalThis.String(object.code) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      owner: isSet(object.owner) ? globalThis.String(object.owner) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      systemActioners: globalThis.Array.isArray(object?.systemActioners)
        ? object.systemActioners.map((e: any) => globalThis.String(e))
        : [],
      originData: isSet(object.originData) ? OriginData.fromJSON(object.originData) : undefined,
      onchainData: isSet(object.onchainData) ? OnChainData.fromJSON(object.onchainData) : undefined,
      isVerified: isSet(object.isVerified) ? globalThis.Boolean(object.isVerified) : false,
      mintAuthorization: isSet(object.mintAuthorization) ? globalThis.String(object.mintAuthorization) : "",
    };
  },

  toJSON(message: NFTSchemaINPUT): unknown {
    const obj: any = {};
    if (message.code !== "") {
      obj.code = message.code;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.owner !== "") {
      obj.owner = message.owner;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.systemActioners?.length) {
      obj.systemActioners = message.systemActioners;
    }
    if (message.originData !== undefined) {
      obj.originData = OriginData.toJSON(message.originData);
    }
    if (message.onchainData !== undefined) {
      obj.onchainData = OnChainData.toJSON(message.onchainData);
    }
    if (message.isVerified !== false) {
      obj.isVerified = message.isVerified;
    }
    if (message.mintAuthorization !== "") {
      obj.mintAuthorization = message.mintAuthorization;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<NFTSchemaINPUT>, I>>(base?: I): NFTSchemaINPUT {
    return NFTSchemaINPUT.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<NFTSchemaINPUT>, I>>(object: I): NFTSchemaINPUT {
    const message = createBaseNFTSchemaINPUT();
    message.code = object.code ?? "";
    message.name = object.name ?? "";
    message.owner = object.owner ?? "";
    message.description = object.description ?? "";
    message.systemActioners = object.systemActioners?.map((e) => e) || [];
    message.originData = (object.originData !== undefined && object.originData !== null)
      ? OriginData.fromPartial(object.originData)
      : undefined;
    message.onchainData = (object.onchainData !== undefined && object.onchainData !== null)
      ? OnChainData.fromPartial(object.onchainData)
      : undefined;
    message.isVerified = object.isVerified ?? false;
    message.mintAuthorization = object.mintAuthorization ?? "";
    return message;
  },
};

function createBaseNFTSchemaQueryResult(): NFTSchemaQueryResult {
  return {
    code: "",
    name: "",
    owner: "",
    description: "",
    originData: undefined,
    onchainData: undefined,
    isVerified: false,
    mintAuthorization: "",
  };
}

export const NFTSchemaQueryResult: MessageFns<NFTSchemaQueryResult> = {
  encode(message: NFTSchemaQueryResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== "") {
      writer.uint32(10).string(message.code);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.owner !== "") {
      writer.uint32(26).string(message.owner);
    }
    if (message.description !== "") {
      writer.uint32(34).string(message.description);
    }
    if (message.originData !== undefined) {
      OriginData.encode(message.originData, writer.uint32(42).fork()).join();
    }
    if (message.onchainData !== undefined) {
      OnChainDataResult.encode(message.onchainData, writer.uint32(50).fork()).join();
    }
    if (message.isVerified !== false) {
      writer.uint32(56).bool(message.isVerified);
    }
    if (message.mintAuthorization !== "") {
      writer.uint32(66).string(message.mintAuthorization);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NFTSchemaQueryResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNFTSchemaQueryResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.code = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.owner = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.originData = OriginData.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.onchainData = OnChainDataResult.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.isVerified = reader.bool();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.mintAuthorization = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NFTSchemaQueryResult {
    return {
      code: isSet(object.code) ? globalThis.String(object.code) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      owner: isSet(object.owner) ? globalThis.String(object.owner) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      originData: isSet(object.originData) ? OriginData.fromJSON(object.originData) : undefined,
      onchainData: isSet(object.onchainData) ? OnChainDataResult.fromJSON(object.onchainData) : undefined,
      isVerified: isSet(object.isVerified) ? globalThis.Boolean(object.isVerified) : false,
      mintAuthorization: isSet(object.mintAuthorization) ? globalThis.String(object.mintAuthorization) : "",
    };
  },

  toJSON(message: NFTSchemaQueryResult): unknown {
    const obj: any = {};
    if (message.code !== "") {
      obj.code = message.code;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.owner !== "") {
      obj.owner = message.owner;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.originData !== undefined) {
      obj.originData = OriginData.toJSON(message.originData);
    }
    if (message.onchainData !== undefined) {
      obj.onchainData = OnChainDataResult.toJSON(message.onchainData);
    }
    if (message.isVerified !== false) {
      obj.isVerified = message.isVerified;
    }
    if (message.mintAuthorization !== "") {
      obj.mintAuthorization = message.mintAuthorization;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<NFTSchemaQueryResult>, I>>(base?: I): NFTSchemaQueryResult {
    return NFTSchemaQueryResult.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<NFTSchemaQueryResult>, I>>(object: I): NFTSchemaQueryResult {
    const message = createBaseNFTSchemaQueryResult();
    message.code = object.code ?? "";
    message.name = object.name ?? "";
    message.owner = object.owner ?? "";
    message.description = object.description ?? "";
    message.originData = (object.originData !== undefined && object.originData !== null)
      ? OriginData.fromPartial(object.originData)
      : undefined;
    message.onchainData = (object.onchainData !== undefined && object.onchainData !== null)
      ? OnChainDataResult.fromPartial(object.onchainData)
      : undefined;
    message.isVerified = object.isVerified ?? false;
    message.mintAuthorization = object.mintAuthorization ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
