// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: sixprotocol/nftmngr/action_executor.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "sixprotocol.nftmngr";

export interface ActionExecutor {
  nftSchemaCode: string;
  executorAddress: string;
  creator: string;
}

export interface ActionExecutorBySchema {
  nftSchemaCode: string;
  executorAddress: string[];
}

function createBaseActionExecutor(): ActionExecutor {
  return { nftSchemaCode: "", executorAddress: "", creator: "" };
}

export const ActionExecutor: MessageFns<ActionExecutor> = {
  encode(message: ActionExecutor, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.nftSchemaCode !== "") {
      writer.uint32(10).string(message.nftSchemaCode);
    }
    if (message.executorAddress !== "") {
      writer.uint32(18).string(message.executorAddress);
    }
    if (message.creator !== "") {
      writer.uint32(26).string(message.creator);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ActionExecutor {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseActionExecutor();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.nftSchemaCode = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.executorAddress = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ActionExecutor {
    return {
      nftSchemaCode: isSet(object.nftSchemaCode) ? globalThis.String(object.nftSchemaCode) : "",
      executorAddress: isSet(object.executorAddress) ? globalThis.String(object.executorAddress) : "",
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
    };
  },

  toJSON(message: ActionExecutor): unknown {
    const obj: any = {};
    if (message.nftSchemaCode !== "") {
      obj.nftSchemaCode = message.nftSchemaCode;
    }
    if (message.executorAddress !== "") {
      obj.executorAddress = message.executorAddress;
    }
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ActionExecutor>, I>>(base?: I): ActionExecutor {
    return ActionExecutor.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ActionExecutor>, I>>(object: I): ActionExecutor {
    const message = createBaseActionExecutor();
    message.nftSchemaCode = object.nftSchemaCode ?? "";
    message.executorAddress = object.executorAddress ?? "";
    message.creator = object.creator ?? "";
    return message;
  },
};

function createBaseActionExecutorBySchema(): ActionExecutorBySchema {
  return { nftSchemaCode: "", executorAddress: [] };
}

export const ActionExecutorBySchema: MessageFns<ActionExecutorBySchema> = {
  encode(message: ActionExecutorBySchema, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.nftSchemaCode !== "") {
      writer.uint32(10).string(message.nftSchemaCode);
    }
    for (const v of message.executorAddress) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ActionExecutorBySchema {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseActionExecutorBySchema();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.nftSchemaCode = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.executorAddress.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ActionExecutorBySchema {
    return {
      nftSchemaCode: isSet(object.nftSchemaCode) ? globalThis.String(object.nftSchemaCode) : "",
      executorAddress: globalThis.Array.isArray(object?.executorAddress)
        ? object.executorAddress.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ActionExecutorBySchema): unknown {
    const obj: any = {};
    if (message.nftSchemaCode !== "") {
      obj.nftSchemaCode = message.nftSchemaCode;
    }
    if (message.executorAddress?.length) {
      obj.executorAddress = message.executorAddress;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ActionExecutorBySchema>, I>>(base?: I): ActionExecutorBySchema {
    return ActionExecutorBySchema.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ActionExecutorBySchema>, I>>(object: I): ActionExecutorBySchema {
    const message = createBaseActionExecutorBySchema();
    message.nftSchemaCode = object.nftSchemaCode ?? "";
    message.executorAddress = object.executorAddress?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
