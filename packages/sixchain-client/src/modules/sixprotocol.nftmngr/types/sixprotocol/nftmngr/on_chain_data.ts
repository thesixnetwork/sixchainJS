// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: sixprotocol/nftmngr/on_chain_data.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Action } from "./action";
import { AttributeDefinition } from "./attribute_definition";
import { VirtualAction } from "./virtual_action";

export const protobufPackage = "sixprotocol.nftmngr";

export interface FlagStatus {
  statusName: string;
  statusValue: boolean;
}

export interface OnChainData {
  nftAttributes: AttributeDefinition[];
  tokenAttributes: AttributeDefinition[];
  actions: Action[];
  status: FlagStatus[];
}

export interface OnChainDataResult {
  nftAttributes: AttributeDefinition[];
  tokenAttributes: AttributeDefinition[];
  actions: Action[];
  virtualActions: VirtualAction[];
  status: FlagStatus[];
}

function createBaseFlagStatus(): FlagStatus {
  return { statusName: "", statusValue: false };
}

export const FlagStatus: MessageFns<FlagStatus> = {
  encode(message: FlagStatus, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.statusName !== "") {
      writer.uint32(10).string(message.statusName);
    }
    if (message.statusValue !== false) {
      writer.uint32(16).bool(message.statusValue);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FlagStatus {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFlagStatus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.statusName = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.statusValue = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FlagStatus {
    return {
      statusName: isSet(object.statusName) ? globalThis.String(object.statusName) : "",
      statusValue: isSet(object.statusValue) ? globalThis.Boolean(object.statusValue) : false,
    };
  },

  toJSON(message: FlagStatus): unknown {
    const obj: any = {};
    if (message.statusName !== "") {
      obj.statusName = message.statusName;
    }
    if (message.statusValue !== false) {
      obj.statusValue = message.statusValue;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FlagStatus>, I>>(base?: I): FlagStatus {
    return FlagStatus.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FlagStatus>, I>>(object: I): FlagStatus {
    const message = createBaseFlagStatus();
    message.statusName = object.statusName ?? "";
    message.statusValue = object.statusValue ?? false;
    return message;
  },
};

function createBaseOnChainData(): OnChainData {
  return { nftAttributes: [], tokenAttributes: [], actions: [], status: [] };
}

export const OnChainData: MessageFns<OnChainData> = {
  encode(message: OnChainData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.nftAttributes) {
      AttributeDefinition.encode(v!, writer.uint32(10).fork()).join();
    }
    for (const v of message.tokenAttributes) {
      AttributeDefinition.encode(v!, writer.uint32(18).fork()).join();
    }
    for (const v of message.actions) {
      Action.encode(v!, writer.uint32(26).fork()).join();
    }
    for (const v of message.status) {
      FlagStatus.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OnChainData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOnChainData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.nftAttributes.push(AttributeDefinition.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.tokenAttributes.push(AttributeDefinition.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.actions.push(Action.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.status.push(FlagStatus.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OnChainData {
    return {
      nftAttributes: globalThis.Array.isArray(object?.nftAttributes)
        ? object.nftAttributes.map((e: any) => AttributeDefinition.fromJSON(e))
        : [],
      tokenAttributes: globalThis.Array.isArray(object?.tokenAttributes)
        ? object.tokenAttributes.map((e: any) => AttributeDefinition.fromJSON(e))
        : [],
      actions: globalThis.Array.isArray(object?.actions) ? object.actions.map((e: any) => Action.fromJSON(e)) : [],
      status: globalThis.Array.isArray(object?.status) ? object.status.map((e: any) => FlagStatus.fromJSON(e)) : [],
    };
  },

  toJSON(message: OnChainData): unknown {
    const obj: any = {};
    if (message.nftAttributes?.length) {
      obj.nftAttributes = message.nftAttributes.map((e) => AttributeDefinition.toJSON(e));
    }
    if (message.tokenAttributes?.length) {
      obj.tokenAttributes = message.tokenAttributes.map((e) => AttributeDefinition.toJSON(e));
    }
    if (message.actions?.length) {
      obj.actions = message.actions.map((e) => Action.toJSON(e));
    }
    if (message.status?.length) {
      obj.status = message.status.map((e) => FlagStatus.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OnChainData>, I>>(base?: I): OnChainData {
    return OnChainData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OnChainData>, I>>(object: I): OnChainData {
    const message = createBaseOnChainData();
    message.nftAttributes = object.nftAttributes?.map((e) => AttributeDefinition.fromPartial(e)) || [];
    message.tokenAttributes = object.tokenAttributes?.map((e) => AttributeDefinition.fromPartial(e)) || [];
    message.actions = object.actions?.map((e) => Action.fromPartial(e)) || [];
    message.status = object.status?.map((e) => FlagStatus.fromPartial(e)) || [];
    return message;
  },
};

function createBaseOnChainDataResult(): OnChainDataResult {
  return { nftAttributes: [], tokenAttributes: [], actions: [], virtualActions: [], status: [] };
}

export const OnChainDataResult: MessageFns<OnChainDataResult> = {
  encode(message: OnChainDataResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.nftAttributes) {
      AttributeDefinition.encode(v!, writer.uint32(10).fork()).join();
    }
    for (const v of message.tokenAttributes) {
      AttributeDefinition.encode(v!, writer.uint32(18).fork()).join();
    }
    for (const v of message.actions) {
      Action.encode(v!, writer.uint32(26).fork()).join();
    }
    for (const v of message.virtualActions) {
      VirtualAction.encode(v!, writer.uint32(34).fork()).join();
    }
    for (const v of message.status) {
      FlagStatus.encode(v!, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OnChainDataResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOnChainDataResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.nftAttributes.push(AttributeDefinition.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.tokenAttributes.push(AttributeDefinition.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.actions.push(Action.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.virtualActions.push(VirtualAction.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.status.push(FlagStatus.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OnChainDataResult {
    return {
      nftAttributes: globalThis.Array.isArray(object?.nftAttributes)
        ? object.nftAttributes.map((e: any) => AttributeDefinition.fromJSON(e))
        : [],
      tokenAttributes: globalThis.Array.isArray(object?.tokenAttributes)
        ? object.tokenAttributes.map((e: any) => AttributeDefinition.fromJSON(e))
        : [],
      actions: globalThis.Array.isArray(object?.actions) ? object.actions.map((e: any) => Action.fromJSON(e)) : [],
      virtualActions: globalThis.Array.isArray(object?.virtualActions)
        ? object.virtualActions.map((e: any) => VirtualAction.fromJSON(e))
        : [],
      status: globalThis.Array.isArray(object?.status) ? object.status.map((e: any) => FlagStatus.fromJSON(e)) : [],
    };
  },

  toJSON(message: OnChainDataResult): unknown {
    const obj: any = {};
    if (message.nftAttributes?.length) {
      obj.nftAttributes = message.nftAttributes.map((e) => AttributeDefinition.toJSON(e));
    }
    if (message.tokenAttributes?.length) {
      obj.tokenAttributes = message.tokenAttributes.map((e) => AttributeDefinition.toJSON(e));
    }
    if (message.actions?.length) {
      obj.actions = message.actions.map((e) => Action.toJSON(e));
    }
    if (message.virtualActions?.length) {
      obj.virtualActions = message.virtualActions.map((e) => VirtualAction.toJSON(e));
    }
    if (message.status?.length) {
      obj.status = message.status.map((e) => FlagStatus.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OnChainDataResult>, I>>(base?: I): OnChainDataResult {
    return OnChainDataResult.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OnChainDataResult>, I>>(object: I): OnChainDataResult {
    const message = createBaseOnChainDataResult();
    message.nftAttributes = object.nftAttributes?.map((e) => AttributeDefinition.fromPartial(e)) || [];
    message.tokenAttributes = object.tokenAttributes?.map((e) => AttributeDefinition.fromPartial(e)) || [];
    message.actions = object.actions?.map((e) => Action.fromPartial(e)) || [];
    message.virtualActions = object.virtualActions?.map((e) => VirtualAction.fromPartial(e)) || [];
    message.status = object.status?.map((e) => FlagStatus.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
