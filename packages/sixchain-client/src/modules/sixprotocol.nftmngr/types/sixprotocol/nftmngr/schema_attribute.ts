// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: sixprotocol/nftmngr/schema_attribute.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  BooleanAttributeValue,
  FloatAttributeValue,
  NumberAttributeValue,
  StringAttributeValue,
} from "./nft_attribute_value";

export const protobufPackage = "sixprotocol.nftmngr";

export interface SchemaAttribute {
  nftSchemaCode: string;
  name: string;
  dataType: string;
  currentValue: SchemaAttributeValue | undefined;
  creator: string;
}

export interface SchemaAttributeValue {
  numberAttributeValue?: NumberAttributeValue | undefined;
  stringAttributeValue?: StringAttributeValue | undefined;
  booleanAttributeValue?: BooleanAttributeValue | undefined;
  floatAttributeValue?: FloatAttributeValue | undefined;
}

function createBaseSchemaAttribute(): SchemaAttribute {
  return { nftSchemaCode: "", name: "", dataType: "", currentValue: undefined, creator: "" };
}

export const SchemaAttribute: MessageFns<SchemaAttribute> = {
  encode(message: SchemaAttribute, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.nftSchemaCode !== "") {
      writer.uint32(10).string(message.nftSchemaCode);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.dataType !== "") {
      writer.uint32(26).string(message.dataType);
    }
    if (message.currentValue !== undefined) {
      SchemaAttributeValue.encode(message.currentValue, writer.uint32(34).fork()).join();
    }
    if (message.creator !== "") {
      writer.uint32(42).string(message.creator);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SchemaAttribute {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSchemaAttribute();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.nftSchemaCode = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.dataType = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.currentValue = SchemaAttributeValue.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SchemaAttribute {
    return {
      nftSchemaCode: isSet(object.nftSchemaCode) ? globalThis.String(object.nftSchemaCode) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      dataType: isSet(object.dataType) ? globalThis.String(object.dataType) : "",
      currentValue: isSet(object.currentValue) ? SchemaAttributeValue.fromJSON(object.currentValue) : undefined,
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
    };
  },

  toJSON(message: SchemaAttribute): unknown {
    const obj: any = {};
    if (message.nftSchemaCode !== "") {
      obj.nftSchemaCode = message.nftSchemaCode;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.dataType !== "") {
      obj.dataType = message.dataType;
    }
    if (message.currentValue !== undefined) {
      obj.currentValue = SchemaAttributeValue.toJSON(message.currentValue);
    }
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SchemaAttribute>, I>>(base?: I): SchemaAttribute {
    return SchemaAttribute.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SchemaAttribute>, I>>(object: I): SchemaAttribute {
    const message = createBaseSchemaAttribute();
    message.nftSchemaCode = object.nftSchemaCode ?? "";
    message.name = object.name ?? "";
    message.dataType = object.dataType ?? "";
    message.currentValue = (object.currentValue !== undefined && object.currentValue !== null)
      ? SchemaAttributeValue.fromPartial(object.currentValue)
      : undefined;
    message.creator = object.creator ?? "";
    return message;
  },
};

function createBaseSchemaAttributeValue(): SchemaAttributeValue {
  return {
    numberAttributeValue: undefined,
    stringAttributeValue: undefined,
    booleanAttributeValue: undefined,
    floatAttributeValue: undefined,
  };
}

export const SchemaAttributeValue: MessageFns<SchemaAttributeValue> = {
  encode(message: SchemaAttributeValue, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.numberAttributeValue !== undefined) {
      NumberAttributeValue.encode(message.numberAttributeValue, writer.uint32(10).fork()).join();
    }
    if (message.stringAttributeValue !== undefined) {
      StringAttributeValue.encode(message.stringAttributeValue, writer.uint32(18).fork()).join();
    }
    if (message.booleanAttributeValue !== undefined) {
      BooleanAttributeValue.encode(message.booleanAttributeValue, writer.uint32(26).fork()).join();
    }
    if (message.floatAttributeValue !== undefined) {
      FloatAttributeValue.encode(message.floatAttributeValue, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SchemaAttributeValue {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSchemaAttributeValue();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.numberAttributeValue = NumberAttributeValue.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.stringAttributeValue = StringAttributeValue.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.booleanAttributeValue = BooleanAttributeValue.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.floatAttributeValue = FloatAttributeValue.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SchemaAttributeValue {
    return {
      numberAttributeValue: isSet(object.numberAttributeValue)
        ? NumberAttributeValue.fromJSON(object.numberAttributeValue)
        : undefined,
      stringAttributeValue: isSet(object.stringAttributeValue)
        ? StringAttributeValue.fromJSON(object.stringAttributeValue)
        : undefined,
      booleanAttributeValue: isSet(object.booleanAttributeValue)
        ? BooleanAttributeValue.fromJSON(object.booleanAttributeValue)
        : undefined,
      floatAttributeValue: isSet(object.floatAttributeValue)
        ? FloatAttributeValue.fromJSON(object.floatAttributeValue)
        : undefined,
    };
  },

  toJSON(message: SchemaAttributeValue): unknown {
    const obj: any = {};
    if (message.numberAttributeValue !== undefined) {
      obj.numberAttributeValue = NumberAttributeValue.toJSON(message.numberAttributeValue);
    }
    if (message.stringAttributeValue !== undefined) {
      obj.stringAttributeValue = StringAttributeValue.toJSON(message.stringAttributeValue);
    }
    if (message.booleanAttributeValue !== undefined) {
      obj.booleanAttributeValue = BooleanAttributeValue.toJSON(message.booleanAttributeValue);
    }
    if (message.floatAttributeValue !== undefined) {
      obj.floatAttributeValue = FloatAttributeValue.toJSON(message.floatAttributeValue);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SchemaAttributeValue>, I>>(base?: I): SchemaAttributeValue {
    return SchemaAttributeValue.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SchemaAttributeValue>, I>>(object: I): SchemaAttributeValue {
    const message = createBaseSchemaAttributeValue();
    message.numberAttributeValue = (object.numberAttributeValue !== undefined && object.numberAttributeValue !== null)
      ? NumberAttributeValue.fromPartial(object.numberAttributeValue)
      : undefined;
    message.stringAttributeValue = (object.stringAttributeValue !== undefined && object.stringAttributeValue !== null)
      ? StringAttributeValue.fromPartial(object.stringAttributeValue)
      : undefined;
    message.booleanAttributeValue =
      (object.booleanAttributeValue !== undefined && object.booleanAttributeValue !== null)
        ? BooleanAttributeValue.fromPartial(object.booleanAttributeValue)
        : undefined;
    message.floatAttributeValue = (object.floatAttributeValue !== undefined && object.floatAttributeValue !== null)
      ? FloatAttributeValue.fromPartial(object.floatAttributeValue)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
