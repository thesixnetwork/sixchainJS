// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: sixprotocol/nftmngr/lock_schema_fee.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Coin } from "../../cosmos/base/v1beta1/coin";

export const protobufPackage = "sixprotocol.nftmngr";

export interface LockSchemaFee {
  id: string;
  virtualSchemaCode: string;
  amount: Coin | undefined;
  proposer: string;
}

function createBaseLockSchemaFee(): LockSchemaFee {
  return { id: "", virtualSchemaCode: "", amount: undefined, proposer: "" };
}

export const LockSchemaFee: MessageFns<LockSchemaFee> = {
  encode(message: LockSchemaFee, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.virtualSchemaCode !== "") {
      writer.uint32(18).string(message.virtualSchemaCode);
    }
    if (message.amount !== undefined) {
      Coin.encode(message.amount, writer.uint32(26).fork()).join();
    }
    if (message.proposer !== "") {
      writer.uint32(34).string(message.proposer);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LockSchemaFee {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLockSchemaFee();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.virtualSchemaCode = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.amount = Coin.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.proposer = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LockSchemaFee {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      virtualSchemaCode: isSet(object.virtualSchemaCode) ? globalThis.String(object.virtualSchemaCode) : "",
      amount: isSet(object.amount) ? Coin.fromJSON(object.amount) : undefined,
      proposer: isSet(object.proposer) ? globalThis.String(object.proposer) : "",
    };
  },

  toJSON(message: LockSchemaFee): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.virtualSchemaCode !== "") {
      obj.virtualSchemaCode = message.virtualSchemaCode;
    }
    if (message.amount !== undefined) {
      obj.amount = Coin.toJSON(message.amount);
    }
    if (message.proposer !== "") {
      obj.proposer = message.proposer;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LockSchemaFee>, I>>(base?: I): LockSchemaFee {
    return LockSchemaFee.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LockSchemaFee>, I>>(object: I): LockSchemaFee {
    const message = createBaseLockSchemaFee();
    message.id = object.id ?? "";
    message.virtualSchemaCode = object.virtualSchemaCode ?? "";
    message.amount = (object.amount !== undefined && object.amount !== null)
      ? Coin.fromPartial(object.amount)
      : undefined;
    message.proposer = object.proposer ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
