// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: sixprotocol/nftmngr/action.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "sixprotocol.nftmngr";

export enum AllowedActioner {
  ALLOWED_ACTIONER_ALL = 0,
  ALLOWED_ACTIONER_SYSTEM_ONLY = 1,
  ALLOWED_ACTIONER_USER_ONLY = 2,
  UNRECOGNIZED = -1,
}

export function allowedActionerFromJSON(object: any): AllowedActioner {
  switch (object) {
    case 0:
    case "ALLOWED_ACTIONER_ALL":
      return AllowedActioner.ALLOWED_ACTIONER_ALL;
    case 1:
    case "ALLOWED_ACTIONER_SYSTEM_ONLY":
      return AllowedActioner.ALLOWED_ACTIONER_SYSTEM_ONLY;
    case 2:
    case "ALLOWED_ACTIONER_USER_ONLY":
      return AllowedActioner.ALLOWED_ACTIONER_USER_ONLY;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AllowedActioner.UNRECOGNIZED;
  }
}

export function allowedActionerToJSON(object: AllowedActioner): string {
  switch (object) {
    case AllowedActioner.ALLOWED_ACTIONER_ALL:
      return "ALLOWED_ACTIONER_ALL";
    case AllowedActioner.ALLOWED_ACTIONER_SYSTEM_ONLY:
      return "ALLOWED_ACTIONER_SYSTEM_ONLY";
    case AllowedActioner.ALLOWED_ACTIONER_USER_ONLY:
      return "ALLOWED_ACTIONER_USER_ONLY";
    case AllowedActioner.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface ActionParams {
  name: string;
  desc: string;
  dataType: string;
  required: boolean;
  defaultValue: string;
}

export interface Action {
  name: string;
  desc: string;
  disable: boolean;
  when: string;
  then: string[];
  allowedActioner: AllowedActioner;
  params: ActionParams[];
}

function createBaseActionParams(): ActionParams {
  return { name: "", desc: "", dataType: "", required: false, defaultValue: "" };
}

export const ActionParams: MessageFns<ActionParams> = {
  encode(message: ActionParams, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.desc !== "") {
      writer.uint32(18).string(message.desc);
    }
    if (message.dataType !== "") {
      writer.uint32(26).string(message.dataType);
    }
    if (message.required !== false) {
      writer.uint32(32).bool(message.required);
    }
    if (message.defaultValue !== "") {
      writer.uint32(42).string(message.defaultValue);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ActionParams {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseActionParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.desc = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.dataType = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.required = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.defaultValue = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ActionParams {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      desc: isSet(object.desc) ? globalThis.String(object.desc) : "",
      dataType: isSet(object.dataType) ? globalThis.String(object.dataType) : "",
      required: isSet(object.required) ? globalThis.Boolean(object.required) : false,
      defaultValue: isSet(object.defaultValue) ? globalThis.String(object.defaultValue) : "",
    };
  },

  toJSON(message: ActionParams): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.desc !== "") {
      obj.desc = message.desc;
    }
    if (message.dataType !== "") {
      obj.dataType = message.dataType;
    }
    if (message.required !== false) {
      obj.required = message.required;
    }
    if (message.defaultValue !== "") {
      obj.defaultValue = message.defaultValue;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ActionParams>, I>>(base?: I): ActionParams {
    return ActionParams.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ActionParams>, I>>(object: I): ActionParams {
    const message = createBaseActionParams();
    message.name = object.name ?? "";
    message.desc = object.desc ?? "";
    message.dataType = object.dataType ?? "";
    message.required = object.required ?? false;
    message.defaultValue = object.defaultValue ?? "";
    return message;
  },
};

function createBaseAction(): Action {
  return { name: "", desc: "", disable: false, when: "", then: [], allowedActioner: 0, params: [] };
}

export const Action: MessageFns<Action> = {
  encode(message: Action, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.desc !== "") {
      writer.uint32(18).string(message.desc);
    }
    if (message.disable !== false) {
      writer.uint32(24).bool(message.disable);
    }
    if (message.when !== "") {
      writer.uint32(34).string(message.when);
    }
    for (const v of message.then) {
      writer.uint32(42).string(v!);
    }
    if (message.allowedActioner !== 0) {
      writer.uint32(48).int32(message.allowedActioner);
    }
    for (const v of message.params) {
      ActionParams.encode(v!, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Action {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.desc = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.disable = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.when = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.then.push(reader.string());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.allowedActioner = reader.int32() as any;
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.params.push(ActionParams.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Action {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      desc: isSet(object.desc) ? globalThis.String(object.desc) : "",
      disable: isSet(object.disable) ? globalThis.Boolean(object.disable) : false,
      when: isSet(object.when) ? globalThis.String(object.when) : "",
      then: globalThis.Array.isArray(object?.then) ? object.then.map((e: any) => globalThis.String(e)) : [],
      allowedActioner: isSet(object.allowedActioner) ? allowedActionerFromJSON(object.allowedActioner) : 0,
      params: globalThis.Array.isArray(object?.params) ? object.params.map((e: any) => ActionParams.fromJSON(e)) : [],
    };
  },

  toJSON(message: Action): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.desc !== "") {
      obj.desc = message.desc;
    }
    if (message.disable !== false) {
      obj.disable = message.disable;
    }
    if (message.when !== "") {
      obj.when = message.when;
    }
    if (message.then?.length) {
      obj.then = message.then;
    }
    if (message.allowedActioner !== 0) {
      obj.allowedActioner = allowedActionerToJSON(message.allowedActioner);
    }
    if (message.params?.length) {
      obj.params = message.params.map((e) => ActionParams.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Action>, I>>(base?: I): Action {
    return Action.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Action>, I>>(object: I): Action {
    const message = createBaseAction();
    message.name = object.name ?? "";
    message.desc = object.desc ?? "";
    message.disable = object.disable ?? false;
    message.when = object.when ?? "";
    message.then = object.then?.map((e) => e) || [];
    message.allowedActioner = object.allowedActioner ?? 0;
    message.params = object.params?.map((e) => ActionParams.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
