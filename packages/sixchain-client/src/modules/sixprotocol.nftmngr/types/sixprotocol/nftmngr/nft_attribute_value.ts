// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: sixprotocol/nftmngr/nft_attribute_value.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "sixprotocol.nftmngr";

export interface NftAttributeValue {
  name: string;
  numberAttributeValue?: NumberAttributeValue | undefined;
  stringAttributeValue?: StringAttributeValue | undefined;
  booleanAttributeValue?: BooleanAttributeValue | undefined;
  floatAttributeValue?: FloatAttributeValue | undefined;
  hiddenToMarketplace: boolean;
}

export interface NumberAttributeValue {
  value: number;
}

export interface StringAttributeValue {
  value: string;
}

export interface BooleanAttributeValue {
  value: boolean;
}

export interface FloatAttributeValue {
  value: number;
}

function createBaseNftAttributeValue(): NftAttributeValue {
  return {
    name: "",
    numberAttributeValue: undefined,
    stringAttributeValue: undefined,
    booleanAttributeValue: undefined,
    floatAttributeValue: undefined,
    hiddenToMarketplace: false,
  };
}

export const NftAttributeValue: MessageFns<NftAttributeValue> = {
  encode(message: NftAttributeValue, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.numberAttributeValue !== undefined) {
      NumberAttributeValue.encode(message.numberAttributeValue, writer.uint32(18).fork()).join();
    }
    if (message.stringAttributeValue !== undefined) {
      StringAttributeValue.encode(message.stringAttributeValue, writer.uint32(26).fork()).join();
    }
    if (message.booleanAttributeValue !== undefined) {
      BooleanAttributeValue.encode(message.booleanAttributeValue, writer.uint32(34).fork()).join();
    }
    if (message.floatAttributeValue !== undefined) {
      FloatAttributeValue.encode(message.floatAttributeValue, writer.uint32(42).fork()).join();
    }
    if (message.hiddenToMarketplace !== false) {
      writer.uint32(48).bool(message.hiddenToMarketplace);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NftAttributeValue {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNftAttributeValue();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.numberAttributeValue = NumberAttributeValue.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.stringAttributeValue = StringAttributeValue.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.booleanAttributeValue = BooleanAttributeValue.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.floatAttributeValue = FloatAttributeValue.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.hiddenToMarketplace = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NftAttributeValue {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      numberAttributeValue: isSet(object.numberAttributeValue)
        ? NumberAttributeValue.fromJSON(object.numberAttributeValue)
        : undefined,
      stringAttributeValue: isSet(object.stringAttributeValue)
        ? StringAttributeValue.fromJSON(object.stringAttributeValue)
        : undefined,
      booleanAttributeValue: isSet(object.booleanAttributeValue)
        ? BooleanAttributeValue.fromJSON(object.booleanAttributeValue)
        : undefined,
      floatAttributeValue: isSet(object.floatAttributeValue)
        ? FloatAttributeValue.fromJSON(object.floatAttributeValue)
        : undefined,
      hiddenToMarketplace: isSet(object.hiddenToMarketplace) ? globalThis.Boolean(object.hiddenToMarketplace) : false,
    };
  },

  toJSON(message: NftAttributeValue): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.numberAttributeValue !== undefined) {
      obj.numberAttributeValue = NumberAttributeValue.toJSON(message.numberAttributeValue);
    }
    if (message.stringAttributeValue !== undefined) {
      obj.stringAttributeValue = StringAttributeValue.toJSON(message.stringAttributeValue);
    }
    if (message.booleanAttributeValue !== undefined) {
      obj.booleanAttributeValue = BooleanAttributeValue.toJSON(message.booleanAttributeValue);
    }
    if (message.floatAttributeValue !== undefined) {
      obj.floatAttributeValue = FloatAttributeValue.toJSON(message.floatAttributeValue);
    }
    if (message.hiddenToMarketplace !== false) {
      obj.hiddenToMarketplace = message.hiddenToMarketplace;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<NftAttributeValue>, I>>(base?: I): NftAttributeValue {
    return NftAttributeValue.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<NftAttributeValue>, I>>(object: I): NftAttributeValue {
    const message = createBaseNftAttributeValue();
    message.name = object.name ?? "";
    message.numberAttributeValue = (object.numberAttributeValue !== undefined && object.numberAttributeValue !== null)
      ? NumberAttributeValue.fromPartial(object.numberAttributeValue)
      : undefined;
    message.stringAttributeValue = (object.stringAttributeValue !== undefined && object.stringAttributeValue !== null)
      ? StringAttributeValue.fromPartial(object.stringAttributeValue)
      : undefined;
    message.booleanAttributeValue =
      (object.booleanAttributeValue !== undefined && object.booleanAttributeValue !== null)
        ? BooleanAttributeValue.fromPartial(object.booleanAttributeValue)
        : undefined;
    message.floatAttributeValue = (object.floatAttributeValue !== undefined && object.floatAttributeValue !== null)
      ? FloatAttributeValue.fromPartial(object.floatAttributeValue)
      : undefined;
    message.hiddenToMarketplace = object.hiddenToMarketplace ?? false;
    return message;
  },
};

function createBaseNumberAttributeValue(): NumberAttributeValue {
  return { value: 0 };
}

export const NumberAttributeValue: MessageFns<NumberAttributeValue> = {
  encode(message: NumberAttributeValue, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.value !== 0) {
      writer.uint32(8).uint64(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NumberAttributeValue {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNumberAttributeValue();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.value = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NumberAttributeValue {
    return { value: isSet(object.value) ? globalThis.Number(object.value) : 0 };
  },

  toJSON(message: NumberAttributeValue): unknown {
    const obj: any = {};
    if (message.value !== 0) {
      obj.value = Math.round(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<NumberAttributeValue>, I>>(base?: I): NumberAttributeValue {
    return NumberAttributeValue.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<NumberAttributeValue>, I>>(object: I): NumberAttributeValue {
    const message = createBaseNumberAttributeValue();
    message.value = object.value ?? 0;
    return message;
  },
};

function createBaseStringAttributeValue(): StringAttributeValue {
  return { value: "" };
}

export const StringAttributeValue: MessageFns<StringAttributeValue> = {
  encode(message: StringAttributeValue, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.value !== "") {
      writer.uint32(10).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StringAttributeValue {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStringAttributeValue();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StringAttributeValue {
    return { value: isSet(object.value) ? globalThis.String(object.value) : "" };
  },

  toJSON(message: StringAttributeValue): unknown {
    const obj: any = {};
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StringAttributeValue>, I>>(base?: I): StringAttributeValue {
    return StringAttributeValue.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StringAttributeValue>, I>>(object: I): StringAttributeValue {
    const message = createBaseStringAttributeValue();
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseBooleanAttributeValue(): BooleanAttributeValue {
  return { value: false };
}

export const BooleanAttributeValue: MessageFns<BooleanAttributeValue> = {
  encode(message: BooleanAttributeValue, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.value !== false) {
      writer.uint32(8).bool(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BooleanAttributeValue {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBooleanAttributeValue();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.value = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BooleanAttributeValue {
    return { value: isSet(object.value) ? globalThis.Boolean(object.value) : false };
  },

  toJSON(message: BooleanAttributeValue): unknown {
    const obj: any = {};
    if (message.value !== false) {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BooleanAttributeValue>, I>>(base?: I): BooleanAttributeValue {
    return BooleanAttributeValue.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BooleanAttributeValue>, I>>(object: I): BooleanAttributeValue {
    const message = createBaseBooleanAttributeValue();
    message.value = object.value ?? false;
    return message;
  },
};

function createBaseFloatAttributeValue(): FloatAttributeValue {
  return { value: 0 };
}

export const FloatAttributeValue: MessageFns<FloatAttributeValue> = {
  encode(message: FloatAttributeValue, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.value !== 0) {
      writer.uint32(9).double(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FloatAttributeValue {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFloatAttributeValue();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 9) {
            break;
          }

          message.value = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FloatAttributeValue {
    return { value: isSet(object.value) ? globalThis.Number(object.value) : 0 };
  },

  toJSON(message: FloatAttributeValue): unknown {
    const obj: any = {};
    if (message.value !== 0) {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FloatAttributeValue>, I>>(base?: I): FloatAttributeValue {
    return FloatAttributeValue.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FloatAttributeValue>, I>>(object: I): FloatAttributeValue {
    const message = createBaseFloatAttributeValue();
    message.value = object.value ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
