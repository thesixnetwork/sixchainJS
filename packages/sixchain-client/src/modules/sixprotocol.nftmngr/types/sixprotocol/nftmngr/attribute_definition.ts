// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: sixprotocol/nftmngr/attribute_definition.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { DisplayOption } from "./display_option";
import {
  BooleanAttributeValue,
  FloatAttributeValue,
  NumberAttributeValue,
  StringAttributeValue,
} from "./nft_attribute_value";

export const protobufPackage = "sixprotocol.nftmngr";

export interface DefaultMintValue {
  numberAttributeValue?: NumberAttributeValue | undefined;
  stringAttributeValue?: StringAttributeValue | undefined;
  booleanAttributeValue?: BooleanAttributeValue | undefined;
  floatAttributeValue?: FloatAttributeValue | undefined;
}

export interface AttributeDefinition {
  name: string;
  dataType: string;
  required: boolean;
  displayValueField: string;
  displayOption: DisplayOption | undefined;
  defaultMintValue:
    | DefaultMintValue
    | undefined;
  /** flag that allows action to override hidden */
  hiddenOveride: boolean;
  hiddenToMarketplace: boolean;
  index: number;
}

function createBaseDefaultMintValue(): DefaultMintValue {
  return {
    numberAttributeValue: undefined,
    stringAttributeValue: undefined,
    booleanAttributeValue: undefined,
    floatAttributeValue: undefined,
  };
}

export const DefaultMintValue: MessageFns<DefaultMintValue> = {
  encode(message: DefaultMintValue, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.numberAttributeValue !== undefined) {
      NumberAttributeValue.encode(message.numberAttributeValue, writer.uint32(10).fork()).join();
    }
    if (message.stringAttributeValue !== undefined) {
      StringAttributeValue.encode(message.stringAttributeValue, writer.uint32(18).fork()).join();
    }
    if (message.booleanAttributeValue !== undefined) {
      BooleanAttributeValue.encode(message.booleanAttributeValue, writer.uint32(26).fork()).join();
    }
    if (message.floatAttributeValue !== undefined) {
      FloatAttributeValue.encode(message.floatAttributeValue, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DefaultMintValue {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDefaultMintValue();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.numberAttributeValue = NumberAttributeValue.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.stringAttributeValue = StringAttributeValue.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.booleanAttributeValue = BooleanAttributeValue.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.floatAttributeValue = FloatAttributeValue.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DefaultMintValue {
    return {
      numberAttributeValue: isSet(object.numberAttributeValue)
        ? NumberAttributeValue.fromJSON(object.numberAttributeValue)
        : undefined,
      stringAttributeValue: isSet(object.stringAttributeValue)
        ? StringAttributeValue.fromJSON(object.stringAttributeValue)
        : undefined,
      booleanAttributeValue: isSet(object.booleanAttributeValue)
        ? BooleanAttributeValue.fromJSON(object.booleanAttributeValue)
        : undefined,
      floatAttributeValue: isSet(object.floatAttributeValue)
        ? FloatAttributeValue.fromJSON(object.floatAttributeValue)
        : undefined,
    };
  },

  toJSON(message: DefaultMintValue): unknown {
    const obj: any = {};
    if (message.numberAttributeValue !== undefined) {
      obj.numberAttributeValue = NumberAttributeValue.toJSON(message.numberAttributeValue);
    }
    if (message.stringAttributeValue !== undefined) {
      obj.stringAttributeValue = StringAttributeValue.toJSON(message.stringAttributeValue);
    }
    if (message.booleanAttributeValue !== undefined) {
      obj.booleanAttributeValue = BooleanAttributeValue.toJSON(message.booleanAttributeValue);
    }
    if (message.floatAttributeValue !== undefined) {
      obj.floatAttributeValue = FloatAttributeValue.toJSON(message.floatAttributeValue);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DefaultMintValue>, I>>(base?: I): DefaultMintValue {
    return DefaultMintValue.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DefaultMintValue>, I>>(object: I): DefaultMintValue {
    const message = createBaseDefaultMintValue();
    message.numberAttributeValue = (object.numberAttributeValue !== undefined && object.numberAttributeValue !== null)
      ? NumberAttributeValue.fromPartial(object.numberAttributeValue)
      : undefined;
    message.stringAttributeValue = (object.stringAttributeValue !== undefined && object.stringAttributeValue !== null)
      ? StringAttributeValue.fromPartial(object.stringAttributeValue)
      : undefined;
    message.booleanAttributeValue =
      (object.booleanAttributeValue !== undefined && object.booleanAttributeValue !== null)
        ? BooleanAttributeValue.fromPartial(object.booleanAttributeValue)
        : undefined;
    message.floatAttributeValue = (object.floatAttributeValue !== undefined && object.floatAttributeValue !== null)
      ? FloatAttributeValue.fromPartial(object.floatAttributeValue)
      : undefined;
    return message;
  },
};

function createBaseAttributeDefinition(): AttributeDefinition {
  return {
    name: "",
    dataType: "",
    required: false,
    displayValueField: "",
    displayOption: undefined,
    defaultMintValue: undefined,
    hiddenOveride: false,
    hiddenToMarketplace: false,
    index: 0,
  };
}

export const AttributeDefinition: MessageFns<AttributeDefinition> = {
  encode(message: AttributeDefinition, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.dataType !== "") {
      writer.uint32(18).string(message.dataType);
    }
    if (message.required !== false) {
      writer.uint32(24).bool(message.required);
    }
    if (message.displayValueField !== "") {
      writer.uint32(34).string(message.displayValueField);
    }
    if (message.displayOption !== undefined) {
      DisplayOption.encode(message.displayOption, writer.uint32(42).fork()).join();
    }
    if (message.defaultMintValue !== undefined) {
      DefaultMintValue.encode(message.defaultMintValue, writer.uint32(50).fork()).join();
    }
    if (message.hiddenOveride !== false) {
      writer.uint32(56).bool(message.hiddenOveride);
    }
    if (message.hiddenToMarketplace !== false) {
      writer.uint32(64).bool(message.hiddenToMarketplace);
    }
    if (message.index !== 0) {
      writer.uint32(72).uint64(message.index);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AttributeDefinition {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAttributeDefinition();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.dataType = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.required = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.displayValueField = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.displayOption = DisplayOption.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.defaultMintValue = DefaultMintValue.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.hiddenOveride = reader.bool();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.hiddenToMarketplace = reader.bool();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.index = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AttributeDefinition {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      dataType: isSet(object.dataType) ? globalThis.String(object.dataType) : "",
      required: isSet(object.required) ? globalThis.Boolean(object.required) : false,
      displayValueField: isSet(object.displayValueField) ? globalThis.String(object.displayValueField) : "",
      displayOption: isSet(object.displayOption) ? DisplayOption.fromJSON(object.displayOption) : undefined,
      defaultMintValue: isSet(object.defaultMintValue) ? DefaultMintValue.fromJSON(object.defaultMintValue) : undefined,
      hiddenOveride: isSet(object.hiddenOveride) ? globalThis.Boolean(object.hiddenOveride) : false,
      hiddenToMarketplace: isSet(object.hiddenToMarketplace) ? globalThis.Boolean(object.hiddenToMarketplace) : false,
      index: isSet(object.index) ? globalThis.Number(object.index) : 0,
    };
  },

  toJSON(message: AttributeDefinition): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.dataType !== "") {
      obj.dataType = message.dataType;
    }
    if (message.required !== false) {
      obj.required = message.required;
    }
    if (message.displayValueField !== "") {
      obj.displayValueField = message.displayValueField;
    }
    if (message.displayOption !== undefined) {
      obj.displayOption = DisplayOption.toJSON(message.displayOption);
    }
    if (message.defaultMintValue !== undefined) {
      obj.defaultMintValue = DefaultMintValue.toJSON(message.defaultMintValue);
    }
    if (message.hiddenOveride !== false) {
      obj.hiddenOveride = message.hiddenOveride;
    }
    if (message.hiddenToMarketplace !== false) {
      obj.hiddenToMarketplace = message.hiddenToMarketplace;
    }
    if (message.index !== 0) {
      obj.index = Math.round(message.index);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AttributeDefinition>, I>>(base?: I): AttributeDefinition {
    return AttributeDefinition.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AttributeDefinition>, I>>(object: I): AttributeDefinition {
    const message = createBaseAttributeDefinition();
    message.name = object.name ?? "";
    message.dataType = object.dataType ?? "";
    message.required = object.required ?? false;
    message.displayValueField = object.displayValueField ?? "";
    message.displayOption = (object.displayOption !== undefined && object.displayOption !== null)
      ? DisplayOption.fromPartial(object.displayOption)
      : undefined;
    message.defaultMintValue = (object.defaultMintValue !== undefined && object.defaultMintValue !== null)
      ? DefaultMintValue.fromPartial(object.defaultMintValue)
      : undefined;
    message.hiddenOveride = object.hiddenOveride ?? false;
    message.hiddenToMarketplace = object.hiddenToMarketplace ?? false;
    message.index = object.index ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
