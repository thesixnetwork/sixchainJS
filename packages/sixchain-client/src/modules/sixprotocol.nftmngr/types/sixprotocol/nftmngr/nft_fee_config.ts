// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: sixprotocol/nftmngr/nft_fee_config.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "sixprotocol.nftmngr";

export enum FeeDistributionMethod {
  BURN = 0,
  REWARD_POOL = 1,
  TRANSFER = 2,
  UNRECOGNIZED = -1,
}

export function feeDistributionMethodFromJSON(object: any): FeeDistributionMethod {
  switch (object) {
    case 0:
    case "BURN":
      return FeeDistributionMethod.BURN;
    case 1:
    case "REWARD_POOL":
      return FeeDistributionMethod.REWARD_POOL;
    case 2:
    case "TRANSFER":
      return FeeDistributionMethod.TRANSFER;
    case -1:
    case "UNRECOGNIZED":
    default:
      return FeeDistributionMethod.UNRECOGNIZED;
  }
}

export function feeDistributionMethodToJSON(object: FeeDistributionMethod): string {
  switch (object) {
    case FeeDistributionMethod.BURN:
      return "BURN";
    case FeeDistributionMethod.REWARD_POOL:
      return "REWARD_POOL";
    case FeeDistributionMethod.TRANSFER:
      return "TRANSFER";
    case FeeDistributionMethod.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum FeeSubject {
  CREATE_NFT_SCHEMA = 0,
  UNRECOGNIZED = -1,
}

export function feeSubjectFromJSON(object: any): FeeSubject {
  switch (object) {
    case 0:
    case "CREATE_NFT_SCHEMA":
      return FeeSubject.CREATE_NFT_SCHEMA;
    case -1:
    case "UNRECOGNIZED":
    default:
      return FeeSubject.UNRECOGNIZED;
  }
}

export function feeSubjectToJSON(object: FeeSubject): string {
  switch (object) {
    case FeeSubject.CREATE_NFT_SCHEMA:
      return "CREATE_NFT_SCHEMA";
    case FeeSubject.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface FeeDistribution {
  method: FeeDistributionMethod;
  portion: number;
}

export interface FeeConfig {
  feeAmount: string;
  feeDistributions: FeeDistribution[];
}

export interface NFTFeeConfig {
  schemaFee: FeeConfig | undefined;
}

function createBaseFeeDistribution(): FeeDistribution {
  return { method: 0, portion: 0 };
}

export const FeeDistribution: MessageFns<FeeDistribution> = {
  encode(message: FeeDistribution, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.method !== 0) {
      writer.uint32(8).int32(message.method);
    }
    if (message.portion !== 0) {
      writer.uint32(21).float(message.portion);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FeeDistribution {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFeeDistribution();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.method = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 21) {
            break;
          }

          message.portion = reader.float();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FeeDistribution {
    return {
      method: isSet(object.method) ? feeDistributionMethodFromJSON(object.method) : 0,
      portion: isSet(object.portion) ? globalThis.Number(object.portion) : 0,
    };
  },

  toJSON(message: FeeDistribution): unknown {
    const obj: any = {};
    if (message.method !== 0) {
      obj.method = feeDistributionMethodToJSON(message.method);
    }
    if (message.portion !== 0) {
      obj.portion = message.portion;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FeeDistribution>, I>>(base?: I): FeeDistribution {
    return FeeDistribution.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FeeDistribution>, I>>(object: I): FeeDistribution {
    const message = createBaseFeeDistribution();
    message.method = object.method ?? 0;
    message.portion = object.portion ?? 0;
    return message;
  },
};

function createBaseFeeConfig(): FeeConfig {
  return { feeAmount: "", feeDistributions: [] };
}

export const FeeConfig: MessageFns<FeeConfig> = {
  encode(message: FeeConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.feeAmount !== "") {
      writer.uint32(10).string(message.feeAmount);
    }
    for (const v of message.feeDistributions) {
      FeeDistribution.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FeeConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFeeConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.feeAmount = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.feeDistributions.push(FeeDistribution.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FeeConfig {
    return {
      feeAmount: isSet(object.feeAmount) ? globalThis.String(object.feeAmount) : "",
      feeDistributions: globalThis.Array.isArray(object?.feeDistributions)
        ? object.feeDistributions.map((e: any) => FeeDistribution.fromJSON(e))
        : [],
    };
  },

  toJSON(message: FeeConfig): unknown {
    const obj: any = {};
    if (message.feeAmount !== "") {
      obj.feeAmount = message.feeAmount;
    }
    if (message.feeDistributions?.length) {
      obj.feeDistributions = message.feeDistributions.map((e) => FeeDistribution.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FeeConfig>, I>>(base?: I): FeeConfig {
    return FeeConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FeeConfig>, I>>(object: I): FeeConfig {
    const message = createBaseFeeConfig();
    message.feeAmount = object.feeAmount ?? "";
    message.feeDistributions = object.feeDistributions?.map((e) => FeeDistribution.fromPartial(e)) || [];
    return message;
  },
};

function createBaseNFTFeeConfig(): NFTFeeConfig {
  return { schemaFee: undefined };
}

export const NFTFeeConfig: MessageFns<NFTFeeConfig> = {
  encode(message: NFTFeeConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.schemaFee !== undefined) {
      FeeConfig.encode(message.schemaFee, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NFTFeeConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNFTFeeConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.schemaFee = FeeConfig.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NFTFeeConfig {
    return { schemaFee: isSet(object.schemaFee) ? FeeConfig.fromJSON(object.schemaFee) : undefined };
  },

  toJSON(message: NFTFeeConfig): unknown {
    const obj: any = {};
    if (message.schemaFee !== undefined) {
      obj.schemaFee = FeeConfig.toJSON(message.schemaFee);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<NFTFeeConfig>, I>>(base?: I): NFTFeeConfig {
    return NFTFeeConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<NFTFeeConfig>, I>>(object: I): NFTFeeConfig {
    const message = createBaseNFTFeeConfig();
    message.schemaFee = (object.schemaFee !== undefined && object.schemaFee !== null)
      ? FeeConfig.fromPartial(object.schemaFee)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
