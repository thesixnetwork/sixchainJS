// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: sixprotocol/nftmngr/virtual_action.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { ActionParams, AllowedActioner, allowedActionerFromJSON, allowedActionerToJSON } from "./action";

export const protobufPackage = "sixprotocol.nftmngr";

export interface VirtualAction {
  virtualNftSchemaCode: string;
  name: string;
  desc: string;
  disable: boolean;
  when: string;
  then: string[];
  /** NOTE: Policy of virtual action */
  allowedActioner: AllowedActioner;
  params: ActionParams[];
}

function createBaseVirtualAction(): VirtualAction {
  return {
    virtualNftSchemaCode: "",
    name: "",
    desc: "",
    disable: false,
    when: "",
    then: [],
    allowedActioner: 0,
    params: [],
  };
}

export const VirtualAction: MessageFns<VirtualAction> = {
  encode(message: VirtualAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.virtualNftSchemaCode !== "") {
      writer.uint32(10).string(message.virtualNftSchemaCode);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.desc !== "") {
      writer.uint32(26).string(message.desc);
    }
    if (message.disable !== false) {
      writer.uint32(32).bool(message.disable);
    }
    if (message.when !== "") {
      writer.uint32(42).string(message.when);
    }
    for (const v of message.then) {
      writer.uint32(50).string(v!);
    }
    if (message.allowedActioner !== 0) {
      writer.uint32(56).int32(message.allowedActioner);
    }
    for (const v of message.params) {
      ActionParams.encode(v!, writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VirtualAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVirtualAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.virtualNftSchemaCode = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.desc = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.disable = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.when = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.then.push(reader.string());
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.allowedActioner = reader.int32() as any;
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.params.push(ActionParams.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VirtualAction {
    return {
      virtualNftSchemaCode: isSet(object.virtualNftSchemaCode) ? globalThis.String(object.virtualNftSchemaCode) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      desc: isSet(object.desc) ? globalThis.String(object.desc) : "",
      disable: isSet(object.disable) ? globalThis.Boolean(object.disable) : false,
      when: isSet(object.when) ? globalThis.String(object.when) : "",
      then: globalThis.Array.isArray(object?.then) ? object.then.map((e: any) => globalThis.String(e)) : [],
      allowedActioner: isSet(object.allowedActioner) ? allowedActionerFromJSON(object.allowedActioner) : 0,
      params: globalThis.Array.isArray(object?.params) ? object.params.map((e: any) => ActionParams.fromJSON(e)) : [],
    };
  },

  toJSON(message: VirtualAction): unknown {
    const obj: any = {};
    if (message.virtualNftSchemaCode !== "") {
      obj.virtualNftSchemaCode = message.virtualNftSchemaCode;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.desc !== "") {
      obj.desc = message.desc;
    }
    if (message.disable !== false) {
      obj.disable = message.disable;
    }
    if (message.when !== "") {
      obj.when = message.when;
    }
    if (message.then?.length) {
      obj.then = message.then;
    }
    if (message.allowedActioner !== 0) {
      obj.allowedActioner = allowedActionerToJSON(message.allowedActioner);
    }
    if (message.params?.length) {
      obj.params = message.params.map((e) => ActionParams.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VirtualAction>, I>>(base?: I): VirtualAction {
    return VirtualAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VirtualAction>, I>>(object: I): VirtualAction {
    const message = createBaseVirtualAction();
    message.virtualNftSchemaCode = object.virtualNftSchemaCode ?? "";
    message.name = object.name ?? "";
    message.desc = object.desc ?? "";
    message.disable = object.disable ?? false;
    message.when = object.when ?? "";
    message.then = object.then?.map((e) => e) || [];
    message.allowedActioner = object.allowedActioner ?? 0;
    message.params = object.params?.map((e) => ActionParams.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
