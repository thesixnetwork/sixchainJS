// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: sixprotocol/nftmngr/nft_data.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { NftAttributeValue } from "./nft_attribute_value";

export const protobufPackage = "sixprotocol.nftmngr";

export enum OwnerAddressType {
  ORIGIN_ADDRESS = 0,
  INTERNAL_ADDRESS = 1,
  UNRECOGNIZED = -1,
}

export function ownerAddressTypeFromJSON(object: any): OwnerAddressType {
  switch (object) {
    case 0:
    case "ORIGIN_ADDRESS":
      return OwnerAddressType.ORIGIN_ADDRESS;
    case 1:
    case "INTERNAL_ADDRESS":
      return OwnerAddressType.INTERNAL_ADDRESS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return OwnerAddressType.UNRECOGNIZED;
  }
}

export function ownerAddressTypeToJSON(object: OwnerAddressType): string {
  switch (object) {
    case OwnerAddressType.ORIGIN_ADDRESS:
      return "ORIGIN_ADDRESS";
    case OwnerAddressType.INTERNAL_ADDRESS:
      return "INTERNAL_ADDRESS";
    case OwnerAddressType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface NftData {
  nftSchemaCode: string;
  tokenId: string;
  tokenOwner: string;
  ownerAddressType: OwnerAddressType;
  originImage: string;
  onchainImage: string;
  tokenUri: string;
  originAttributes: NftAttributeValue[];
  onchainAttributes: NftAttributeValue[];
}

function createBaseNftData(): NftData {
  return {
    nftSchemaCode: "",
    tokenId: "",
    tokenOwner: "",
    ownerAddressType: 0,
    originImage: "",
    onchainImage: "",
    tokenUri: "",
    originAttributes: [],
    onchainAttributes: [],
  };
}

export const NftData: MessageFns<NftData> = {
  encode(message: NftData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.nftSchemaCode !== "") {
      writer.uint32(10).string(message.nftSchemaCode);
    }
    if (message.tokenId !== "") {
      writer.uint32(18).string(message.tokenId);
    }
    if (message.tokenOwner !== "") {
      writer.uint32(26).string(message.tokenOwner);
    }
    if (message.ownerAddressType !== 0) {
      writer.uint32(32).int32(message.ownerAddressType);
    }
    if (message.originImage !== "") {
      writer.uint32(42).string(message.originImage);
    }
    if (message.onchainImage !== "") {
      writer.uint32(50).string(message.onchainImage);
    }
    if (message.tokenUri !== "") {
      writer.uint32(58).string(message.tokenUri);
    }
    for (const v of message.originAttributes) {
      NftAttributeValue.encode(v!, writer.uint32(66).fork()).join();
    }
    for (const v of message.onchainAttributes) {
      NftAttributeValue.encode(v!, writer.uint32(74).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NftData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNftData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.nftSchemaCode = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.tokenId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.tokenOwner = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.ownerAddressType = reader.int32() as any;
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.originImage = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.onchainImage = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.tokenUri = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.originAttributes.push(NftAttributeValue.decode(reader, reader.uint32()));
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.onchainAttributes.push(NftAttributeValue.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NftData {
    return {
      nftSchemaCode: isSet(object.nftSchemaCode) ? globalThis.String(object.nftSchemaCode) : "",
      tokenId: isSet(object.tokenId) ? globalThis.String(object.tokenId) : "",
      tokenOwner: isSet(object.tokenOwner) ? globalThis.String(object.tokenOwner) : "",
      ownerAddressType: isSet(object.ownerAddressType) ? ownerAddressTypeFromJSON(object.ownerAddressType) : 0,
      originImage: isSet(object.originImage) ? globalThis.String(object.originImage) : "",
      onchainImage: isSet(object.onchainImage) ? globalThis.String(object.onchainImage) : "",
      tokenUri: isSet(object.tokenUri) ? globalThis.String(object.tokenUri) : "",
      originAttributes: globalThis.Array.isArray(object?.originAttributes)
        ? object.originAttributes.map((e: any) => NftAttributeValue.fromJSON(e))
        : [],
      onchainAttributes: globalThis.Array.isArray(object?.onchainAttributes)
        ? object.onchainAttributes.map((e: any) => NftAttributeValue.fromJSON(e))
        : [],
    };
  },

  toJSON(message: NftData): unknown {
    const obj: any = {};
    if (message.nftSchemaCode !== "") {
      obj.nftSchemaCode = message.nftSchemaCode;
    }
    if (message.tokenId !== "") {
      obj.tokenId = message.tokenId;
    }
    if (message.tokenOwner !== "") {
      obj.tokenOwner = message.tokenOwner;
    }
    if (message.ownerAddressType !== 0) {
      obj.ownerAddressType = ownerAddressTypeToJSON(message.ownerAddressType);
    }
    if (message.originImage !== "") {
      obj.originImage = message.originImage;
    }
    if (message.onchainImage !== "") {
      obj.onchainImage = message.onchainImage;
    }
    if (message.tokenUri !== "") {
      obj.tokenUri = message.tokenUri;
    }
    if (message.originAttributes?.length) {
      obj.originAttributes = message.originAttributes.map((e) => NftAttributeValue.toJSON(e));
    }
    if (message.onchainAttributes?.length) {
      obj.onchainAttributes = message.onchainAttributes.map((e) => NftAttributeValue.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<NftData>, I>>(base?: I): NftData {
    return NftData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<NftData>, I>>(object: I): NftData {
    const message = createBaseNftData();
    message.nftSchemaCode = object.nftSchemaCode ?? "";
    message.tokenId = object.tokenId ?? "";
    message.tokenOwner = object.tokenOwner ?? "";
    message.ownerAddressType = object.ownerAddressType ?? 0;
    message.originImage = object.originImage ?? "";
    message.onchainImage = object.onchainImage ?? "";
    message.tokenUri = object.tokenUri ?? "";
    message.originAttributes = object.originAttributes?.map((e) => NftAttributeValue.fromPartial(e)) || [];
    message.onchainAttributes = object.onchainAttributes?.map((e) => NftAttributeValue.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
