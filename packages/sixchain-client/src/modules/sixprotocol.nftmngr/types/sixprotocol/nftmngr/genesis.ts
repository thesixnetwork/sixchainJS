// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: sixprotocol/nftmngr/genesis.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { ActionByRefId } from "./action_by_ref_id";
import { ActionExecutor } from "./action_executor";
import { ActionOfSchema } from "./action_of_schema";
import { ExecutorOfSchema } from "./executor_of_schema";
import { LockSchemaFee } from "./lock_schema_fee";
import { MetadataCreator } from "./metadata_creator";
import { NftCollection } from "./nft_collection";
import { NftData } from "./nft_data";
import { NFTFeeBalance } from "./nft_fee_balance";
import { NFTFeeConfig } from "./nft_fee_config";
import { NFTSchema } from "./nft_schema";
import { NFTSchemaByContract } from "./nft_schema_by_contract";
import { Organization } from "./organization";
import { Params } from "./params";
import { SchemaAttribute } from "./schema_attribute";
import { VirtualAction } from "./virtual_action";
import {
  ActiveVirtualSchemaProposal,
  InactiveVirtualSchemaProposal,
  VirtualSchema,
  VirtualSchemaProposal,
} from "./virtual_schema";

export const protobufPackage = "sixprotocol.nftmngr";

/** GenesisState defines the nftmngr module's genesis state. */
export interface GenesisState {
  params: Params | undefined;
  nFTSchemaList: NFTSchema[];
  nftDataList: NftData[];
  actionByRefIdList: ActionByRefId[];
  organizationList: Organization[];
  nFTSchemaByContractList: NFTSchemaByContract[];
  nftFeeConfig: NFTFeeConfig | undefined;
  nFTFeeBalance: NFTFeeBalance | undefined;
  metadataCreatorList: MetadataCreator[];
  nftCollectionList: NftCollection[];
  actionExecutorList: ActionExecutor[];
  schemaAttributeList: SchemaAttribute[];
  actionOfSchemaList: ActionOfSchema[];
  executorOfSchemaList: ExecutorOfSchema[];
  virtualActionList: VirtualAction[];
  virtualSchemaList: VirtualSchema[];
  virtualSchemaProposalList: VirtualSchemaProposal[];
  activeVirtualSchemaProposalList: ActiveVirtualSchemaProposal[];
  inactiveVirtualSchemaProposalList: InactiveVirtualSchemaProposal[];
  /** this line is used by starport scaffolding # genesis/proto/state */
  lockSchemaFeeList: LockSchemaFee[];
}

function createBaseGenesisState(): GenesisState {
  return {
    params: undefined,
    nFTSchemaList: [],
    nftDataList: [],
    actionByRefIdList: [],
    organizationList: [],
    nFTSchemaByContractList: [],
    nftFeeConfig: undefined,
    nFTFeeBalance: undefined,
    metadataCreatorList: [],
    nftCollectionList: [],
    actionExecutorList: [],
    schemaAttributeList: [],
    actionOfSchemaList: [],
    executorOfSchemaList: [],
    virtualActionList: [],
    virtualSchemaList: [],
    virtualSchemaProposalList: [],
    activeVirtualSchemaProposalList: [],
    inactiveVirtualSchemaProposalList: [],
    lockSchemaFeeList: [],
  };
}

export const GenesisState: MessageFns<GenesisState> = {
  encode(message: GenesisState, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(10).fork()).join();
    }
    for (const v of message.nFTSchemaList) {
      NFTSchema.encode(v!, writer.uint32(18).fork()).join();
    }
    for (const v of message.nftDataList) {
      NftData.encode(v!, writer.uint32(26).fork()).join();
    }
    for (const v of message.actionByRefIdList) {
      ActionByRefId.encode(v!, writer.uint32(34).fork()).join();
    }
    for (const v of message.organizationList) {
      Organization.encode(v!, writer.uint32(42).fork()).join();
    }
    for (const v of message.nFTSchemaByContractList) {
      NFTSchemaByContract.encode(v!, writer.uint32(58).fork()).join();
    }
    if (message.nftFeeConfig !== undefined) {
      NFTFeeConfig.encode(message.nftFeeConfig, writer.uint32(66).fork()).join();
    }
    if (message.nFTFeeBalance !== undefined) {
      NFTFeeBalance.encode(message.nFTFeeBalance, writer.uint32(74).fork()).join();
    }
    for (const v of message.metadataCreatorList) {
      MetadataCreator.encode(v!, writer.uint32(82).fork()).join();
    }
    for (const v of message.nftCollectionList) {
      NftCollection.encode(v!, writer.uint32(90).fork()).join();
    }
    for (const v of message.actionExecutorList) {
      ActionExecutor.encode(v!, writer.uint32(98).fork()).join();
    }
    for (const v of message.schemaAttributeList) {
      SchemaAttribute.encode(v!, writer.uint32(106).fork()).join();
    }
    for (const v of message.actionOfSchemaList) {
      ActionOfSchema.encode(v!, writer.uint32(114).fork()).join();
    }
    for (const v of message.executorOfSchemaList) {
      ExecutorOfSchema.encode(v!, writer.uint32(122).fork()).join();
    }
    for (const v of message.virtualActionList) {
      VirtualAction.encode(v!, writer.uint32(130).fork()).join();
    }
    for (const v of message.virtualSchemaList) {
      VirtualSchema.encode(v!, writer.uint32(138).fork()).join();
    }
    for (const v of message.virtualSchemaProposalList) {
      VirtualSchemaProposal.encode(v!, writer.uint32(154).fork()).join();
    }
    for (const v of message.activeVirtualSchemaProposalList) {
      ActiveVirtualSchemaProposal.encode(v!, writer.uint32(162).fork()).join();
    }
    for (const v of message.inactiveVirtualSchemaProposalList) {
      InactiveVirtualSchemaProposal.encode(v!, writer.uint32(170).fork()).join();
    }
    for (const v of message.lockSchemaFeeList) {
      LockSchemaFee.encode(v!, writer.uint32(178).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenesisState {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenesisState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.nFTSchemaList.push(NFTSchema.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.nftDataList.push(NftData.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.actionByRefIdList.push(ActionByRefId.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.organizationList.push(Organization.decode(reader, reader.uint32()));
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.nFTSchemaByContractList.push(NFTSchemaByContract.decode(reader, reader.uint32()));
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.nftFeeConfig = NFTFeeConfig.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.nFTFeeBalance = NFTFeeBalance.decode(reader, reader.uint32());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.metadataCreatorList.push(MetadataCreator.decode(reader, reader.uint32()));
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.nftCollectionList.push(NftCollection.decode(reader, reader.uint32()));
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.actionExecutorList.push(ActionExecutor.decode(reader, reader.uint32()));
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.schemaAttributeList.push(SchemaAttribute.decode(reader, reader.uint32()));
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.actionOfSchemaList.push(ActionOfSchema.decode(reader, reader.uint32()));
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.executorOfSchemaList.push(ExecutorOfSchema.decode(reader, reader.uint32()));
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.virtualActionList.push(VirtualAction.decode(reader, reader.uint32()));
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.virtualSchemaList.push(VirtualSchema.decode(reader, reader.uint32()));
          continue;
        }
        case 19: {
          if (tag !== 154) {
            break;
          }

          message.virtualSchemaProposalList.push(VirtualSchemaProposal.decode(reader, reader.uint32()));
          continue;
        }
        case 20: {
          if (tag !== 162) {
            break;
          }

          message.activeVirtualSchemaProposalList.push(ActiveVirtualSchemaProposal.decode(reader, reader.uint32()));
          continue;
        }
        case 21: {
          if (tag !== 170) {
            break;
          }

          message.inactiveVirtualSchemaProposalList.push(InactiveVirtualSchemaProposal.decode(reader, reader.uint32()));
          continue;
        }
        case 22: {
          if (tag !== 178) {
            break;
          }

          message.lockSchemaFeeList.push(LockSchemaFee.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenesisState {
    return {
      params: isSet(object.params) ? Params.fromJSON(object.params) : undefined,
      nFTSchemaList: globalThis.Array.isArray(object?.nFTSchemaList)
        ? object.nFTSchemaList.map((e: any) => NFTSchema.fromJSON(e))
        : [],
      nftDataList: globalThis.Array.isArray(object?.nftDataList)
        ? object.nftDataList.map((e: any) => NftData.fromJSON(e))
        : [],
      actionByRefIdList: globalThis.Array.isArray(object?.actionByRefIdList)
        ? object.actionByRefIdList.map((e: any) => ActionByRefId.fromJSON(e))
        : [],
      organizationList: globalThis.Array.isArray(object?.organizationList)
        ? object.organizationList.map((e: any) => Organization.fromJSON(e))
        : [],
      nFTSchemaByContractList: globalThis.Array.isArray(object?.nFTSchemaByContractList)
        ? object.nFTSchemaByContractList.map((e: any) => NFTSchemaByContract.fromJSON(e))
        : [],
      nftFeeConfig: isSet(object.nftFeeConfig) ? NFTFeeConfig.fromJSON(object.nftFeeConfig) : undefined,
      nFTFeeBalance: isSet(object.nFTFeeBalance) ? NFTFeeBalance.fromJSON(object.nFTFeeBalance) : undefined,
      metadataCreatorList: globalThis.Array.isArray(object?.metadataCreatorList)
        ? object.metadataCreatorList.map((e: any) => MetadataCreator.fromJSON(e))
        : [],
      nftCollectionList: globalThis.Array.isArray(object?.nftCollectionList)
        ? object.nftCollectionList.map((e: any) => NftCollection.fromJSON(e))
        : [],
      actionExecutorList: globalThis.Array.isArray(object?.actionExecutorList)
        ? object.actionExecutorList.map((e: any) => ActionExecutor.fromJSON(e))
        : [],
      schemaAttributeList: globalThis.Array.isArray(object?.schemaAttributeList)
        ? object.schemaAttributeList.map((e: any) => SchemaAttribute.fromJSON(e))
        : [],
      actionOfSchemaList: globalThis.Array.isArray(object?.actionOfSchemaList)
        ? object.actionOfSchemaList.map((e: any) => ActionOfSchema.fromJSON(e))
        : [],
      executorOfSchemaList: globalThis.Array.isArray(object?.executorOfSchemaList)
        ? object.executorOfSchemaList.map((e: any) => ExecutorOfSchema.fromJSON(e))
        : [],
      virtualActionList: globalThis.Array.isArray(object?.virtualActionList)
        ? object.virtualActionList.map((e: any) => VirtualAction.fromJSON(e))
        : [],
      virtualSchemaList: globalThis.Array.isArray(object?.virtualSchemaList)
        ? object.virtualSchemaList.map((e: any) => VirtualSchema.fromJSON(e))
        : [],
      virtualSchemaProposalList: globalThis.Array.isArray(object?.virtualSchemaProposalList)
        ? object.virtualSchemaProposalList.map((e: any) => VirtualSchemaProposal.fromJSON(e))
        : [],
      activeVirtualSchemaProposalList: globalThis.Array.isArray(object?.activeVirtualSchemaProposalList)
        ? object.activeVirtualSchemaProposalList.map((e: any) => ActiveVirtualSchemaProposal.fromJSON(e))
        : [],
      inactiveVirtualSchemaProposalList: globalThis.Array.isArray(object?.inactiveVirtualSchemaProposalList)
        ? object.inactiveVirtualSchemaProposalList.map((e: any) => InactiveVirtualSchemaProposal.fromJSON(e))
        : [],
      lockSchemaFeeList: globalThis.Array.isArray(object?.lockSchemaFeeList)
        ? object.lockSchemaFeeList.map((e: any) => LockSchemaFee.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GenesisState): unknown {
    const obj: any = {};
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    if (message.nFTSchemaList?.length) {
      obj.nFTSchemaList = message.nFTSchemaList.map((e) => NFTSchema.toJSON(e));
    }
    if (message.nftDataList?.length) {
      obj.nftDataList = message.nftDataList.map((e) => NftData.toJSON(e));
    }
    if (message.actionByRefIdList?.length) {
      obj.actionByRefIdList = message.actionByRefIdList.map((e) => ActionByRefId.toJSON(e));
    }
    if (message.organizationList?.length) {
      obj.organizationList = message.organizationList.map((e) => Organization.toJSON(e));
    }
    if (message.nFTSchemaByContractList?.length) {
      obj.nFTSchemaByContractList = message.nFTSchemaByContractList.map((e) => NFTSchemaByContract.toJSON(e));
    }
    if (message.nftFeeConfig !== undefined) {
      obj.nftFeeConfig = NFTFeeConfig.toJSON(message.nftFeeConfig);
    }
    if (message.nFTFeeBalance !== undefined) {
      obj.nFTFeeBalance = NFTFeeBalance.toJSON(message.nFTFeeBalance);
    }
    if (message.metadataCreatorList?.length) {
      obj.metadataCreatorList = message.metadataCreatorList.map((e) => MetadataCreator.toJSON(e));
    }
    if (message.nftCollectionList?.length) {
      obj.nftCollectionList = message.nftCollectionList.map((e) => NftCollection.toJSON(e));
    }
    if (message.actionExecutorList?.length) {
      obj.actionExecutorList = message.actionExecutorList.map((e) => ActionExecutor.toJSON(e));
    }
    if (message.schemaAttributeList?.length) {
      obj.schemaAttributeList = message.schemaAttributeList.map((e) => SchemaAttribute.toJSON(e));
    }
    if (message.actionOfSchemaList?.length) {
      obj.actionOfSchemaList = message.actionOfSchemaList.map((e) => ActionOfSchema.toJSON(e));
    }
    if (message.executorOfSchemaList?.length) {
      obj.executorOfSchemaList = message.executorOfSchemaList.map((e) => ExecutorOfSchema.toJSON(e));
    }
    if (message.virtualActionList?.length) {
      obj.virtualActionList = message.virtualActionList.map((e) => VirtualAction.toJSON(e));
    }
    if (message.virtualSchemaList?.length) {
      obj.virtualSchemaList = message.virtualSchemaList.map((e) => VirtualSchema.toJSON(e));
    }
    if (message.virtualSchemaProposalList?.length) {
      obj.virtualSchemaProposalList = message.virtualSchemaProposalList.map((e) => VirtualSchemaProposal.toJSON(e));
    }
    if (message.activeVirtualSchemaProposalList?.length) {
      obj.activeVirtualSchemaProposalList = message.activeVirtualSchemaProposalList.map((e) =>
        ActiveVirtualSchemaProposal.toJSON(e)
      );
    }
    if (message.inactiveVirtualSchemaProposalList?.length) {
      obj.inactiveVirtualSchemaProposalList = message.inactiveVirtualSchemaProposalList.map((e) =>
        InactiveVirtualSchemaProposal.toJSON(e)
      );
    }
    if (message.lockSchemaFeeList?.length) {
      obj.lockSchemaFeeList = message.lockSchemaFeeList.map((e) => LockSchemaFee.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GenesisState>, I>>(base?: I): GenesisState {
    return GenesisState.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GenesisState>, I>>(object: I): GenesisState {
    const message = createBaseGenesisState();
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    message.nFTSchemaList = object.nFTSchemaList?.map((e) => NFTSchema.fromPartial(e)) || [];
    message.nftDataList = object.nftDataList?.map((e) => NftData.fromPartial(e)) || [];
    message.actionByRefIdList = object.actionByRefIdList?.map((e) => ActionByRefId.fromPartial(e)) || [];
    message.organizationList = object.organizationList?.map((e) => Organization.fromPartial(e)) || [];
    message.nFTSchemaByContractList = object.nFTSchemaByContractList?.map((e) => NFTSchemaByContract.fromPartial(e)) ||
      [];
    message.nftFeeConfig = (object.nftFeeConfig !== undefined && object.nftFeeConfig !== null)
      ? NFTFeeConfig.fromPartial(object.nftFeeConfig)
      : undefined;
    message.nFTFeeBalance = (object.nFTFeeBalance !== undefined && object.nFTFeeBalance !== null)
      ? NFTFeeBalance.fromPartial(object.nFTFeeBalance)
      : undefined;
    message.metadataCreatorList = object.metadataCreatorList?.map((e) => MetadataCreator.fromPartial(e)) || [];
    message.nftCollectionList = object.nftCollectionList?.map((e) => NftCollection.fromPartial(e)) || [];
    message.actionExecutorList = object.actionExecutorList?.map((e) => ActionExecutor.fromPartial(e)) || [];
    message.schemaAttributeList = object.schemaAttributeList?.map((e) => SchemaAttribute.fromPartial(e)) || [];
    message.actionOfSchemaList = object.actionOfSchemaList?.map((e) => ActionOfSchema.fromPartial(e)) || [];
    message.executorOfSchemaList = object.executorOfSchemaList?.map((e) => ExecutorOfSchema.fromPartial(e)) || [];
    message.virtualActionList = object.virtualActionList?.map((e) => VirtualAction.fromPartial(e)) || [];
    message.virtualSchemaList = object.virtualSchemaList?.map((e) => VirtualSchema.fromPartial(e)) || [];
    message.virtualSchemaProposalList =
      object.virtualSchemaProposalList?.map((e) => VirtualSchemaProposal.fromPartial(e)) || [];
    message.activeVirtualSchemaProposalList =
      object.activeVirtualSchemaProposalList?.map((e) => ActiveVirtualSchemaProposal.fromPartial(e)) || [];
    message.inactiveVirtualSchemaProposalList =
      object.inactiveVirtualSchemaProposalList?.map((e) => InactiveVirtualSchemaProposal.fromPartial(e)) || [];
    message.lockSchemaFeeList = object.lockSchemaFeeList?.map((e) => LockSchemaFee.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
