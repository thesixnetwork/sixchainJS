// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: sixprotocol/nftmngr/origin_data.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { AttributeDefinition } from "./attribute_definition";

export const protobufPackage = "sixprotocol.nftmngr";

export enum AttributeOverriding {
  ORIGIN = 0,
  CHAIN = 1,
  UNRECOGNIZED = -1,
}

export function attributeOverridingFromJSON(object: any): AttributeOverriding {
  switch (object) {
    case 0:
    case "ORIGIN":
      return AttributeOverriding.ORIGIN;
    case 1:
    case "CHAIN":
      return AttributeOverriding.CHAIN;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AttributeOverriding.UNRECOGNIZED;
  }
}

export function attributeOverridingToJSON(object: AttributeOverriding): string {
  switch (object) {
    case AttributeOverriding.ORIGIN:
      return "ORIGIN";
    case AttributeOverriding.CHAIN:
      return "CHAIN";
    case AttributeOverriding.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum URIRetrievalMethod {
  BASE = 0,
  TOKEN = 1,
  UNRECOGNIZED = -1,
}

export function uRIRetrievalMethodFromJSON(object: any): URIRetrievalMethod {
  switch (object) {
    case 0:
    case "BASE":
      return URIRetrievalMethod.BASE;
    case 1:
    case "TOKEN":
      return URIRetrievalMethod.TOKEN;
    case -1:
    case "UNRECOGNIZED":
    default:
      return URIRetrievalMethod.UNRECOGNIZED;
  }
}

export function uRIRetrievalMethodToJSON(object: URIRetrievalMethod): string {
  switch (object) {
    case URIRetrievalMethod.BASE:
      return "BASE";
    case URIRetrievalMethod.TOKEN:
      return "TOKEN";
    case URIRetrievalMethod.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface OriginData {
  originChain: string;
  originContractAddress: string;
  originBaseUri: string;
  attributeOverriding: AttributeOverriding;
  metadataFormat: string;
  originAttributes: AttributeDefinition[];
  uriRetrievalMethod: URIRetrievalMethod;
}

function createBaseOriginData(): OriginData {
  return {
    originChain: "",
    originContractAddress: "",
    originBaseUri: "",
    attributeOverriding: 0,
    metadataFormat: "",
    originAttributes: [],
    uriRetrievalMethod: 0,
  };
}

export const OriginData: MessageFns<OriginData> = {
  encode(message: OriginData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.originChain !== "") {
      writer.uint32(10).string(message.originChain);
    }
    if (message.originContractAddress !== "") {
      writer.uint32(18).string(message.originContractAddress);
    }
    if (message.originBaseUri !== "") {
      writer.uint32(26).string(message.originBaseUri);
    }
    if (message.attributeOverriding !== 0) {
      writer.uint32(32).int32(message.attributeOverriding);
    }
    if (message.metadataFormat !== "") {
      writer.uint32(42).string(message.metadataFormat);
    }
    for (const v of message.originAttributes) {
      AttributeDefinition.encode(v!, writer.uint32(50).fork()).join();
    }
    if (message.uriRetrievalMethod !== 0) {
      writer.uint32(56).int32(message.uriRetrievalMethod);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OriginData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOriginData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.originChain = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.originContractAddress = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.originBaseUri = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.attributeOverriding = reader.int32() as any;
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.metadataFormat = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.originAttributes.push(AttributeDefinition.decode(reader, reader.uint32()));
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.uriRetrievalMethod = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OriginData {
    return {
      originChain: isSet(object.originChain) ? globalThis.String(object.originChain) : "",
      originContractAddress: isSet(object.originContractAddress) ? globalThis.String(object.originContractAddress) : "",
      originBaseUri: isSet(object.originBaseUri) ? globalThis.String(object.originBaseUri) : "",
      attributeOverriding: isSet(object.attributeOverriding)
        ? attributeOverridingFromJSON(object.attributeOverriding)
        : 0,
      metadataFormat: isSet(object.metadataFormat) ? globalThis.String(object.metadataFormat) : "",
      originAttributes: globalThis.Array.isArray(object?.originAttributes)
        ? object.originAttributes.map((e: any) => AttributeDefinition.fromJSON(e))
        : [],
      uriRetrievalMethod: isSet(object.uriRetrievalMethod) ? uRIRetrievalMethodFromJSON(object.uriRetrievalMethod) : 0,
    };
  },

  toJSON(message: OriginData): unknown {
    const obj: any = {};
    if (message.originChain !== "") {
      obj.originChain = message.originChain;
    }
    if (message.originContractAddress !== "") {
      obj.originContractAddress = message.originContractAddress;
    }
    if (message.originBaseUri !== "") {
      obj.originBaseUri = message.originBaseUri;
    }
    if (message.attributeOverriding !== 0) {
      obj.attributeOverriding = attributeOverridingToJSON(message.attributeOverriding);
    }
    if (message.metadataFormat !== "") {
      obj.metadataFormat = message.metadataFormat;
    }
    if (message.originAttributes?.length) {
      obj.originAttributes = message.originAttributes.map((e) => AttributeDefinition.toJSON(e));
    }
    if (message.uriRetrievalMethod !== 0) {
      obj.uriRetrievalMethod = uRIRetrievalMethodToJSON(message.uriRetrievalMethod);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OriginData>, I>>(base?: I): OriginData {
    return OriginData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OriginData>, I>>(object: I): OriginData {
    const message = createBaseOriginData();
    message.originChain = object.originChain ?? "";
    message.originContractAddress = object.originContractAddress ?? "";
    message.originBaseUri = object.originBaseUri ?? "";
    message.attributeOverriding = object.attributeOverriding ?? 0;
    message.metadataFormat = object.metadataFormat ?? "";
    message.originAttributes = object.originAttributes?.map((e) => AttributeDefinition.fromPartial(e)) || [];
    message.uriRetrievalMethod = object.uriRetrievalMethod ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
