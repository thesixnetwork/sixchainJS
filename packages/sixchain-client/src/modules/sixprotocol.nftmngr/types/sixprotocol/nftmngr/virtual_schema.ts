// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: sixprotocol/nftmngr/virtual_schema.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "../../google/protobuf/timestamp";
import { Action } from "./action";

export const protobufPackage = "sixprotocol.nftmngr";

export enum RegistryStatus {
  PENDING = 0,
  REJECT = 1,
  ACCEPT = 2,
  UNRECOGNIZED = -1,
}

export function registryStatusFromJSON(object: any): RegistryStatus {
  switch (object) {
    case 0:
    case "PENDING":
      return RegistryStatus.PENDING;
    case 1:
    case "REJECT":
      return RegistryStatus.REJECT;
    case 2:
    case "ACCEPT":
      return RegistryStatus.ACCEPT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return RegistryStatus.UNRECOGNIZED;
  }
}

export function registryStatusToJSON(object: RegistryStatus): string {
  switch (object) {
    case RegistryStatus.PENDING:
      return "PENDING";
    case RegistryStatus.REJECT:
      return "REJECT";
    case RegistryStatus.ACCEPT:
      return "ACCEPT";
    case RegistryStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum ProposalType {
  CREATE = 0,
  EDIT = 1,
  UNRECOGNIZED = -1,
}

export function proposalTypeFromJSON(object: any): ProposalType {
  switch (object) {
    case 0:
    case "CREATE":
      return ProposalType.CREATE;
    case 1:
    case "EDIT":
      return ProposalType.EDIT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ProposalType.UNRECOGNIZED;
  }
}

export function proposalTypeToJSON(object: ProposalType): string {
  switch (object) {
    case ProposalType.CREATE:
      return "CREATE";
    case ProposalType.EDIT:
      return "EDIT";
    case ProposalType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface VirtualSchemaProposal {
  id: string;
  proposalType: ProposalType;
  virtualSchema: VirtualSchema | undefined;
  actions: Action[];
  executors: string[];
  submitTime: Date | undefined;
  votingStartTime: Date | undefined;
  votingEndTime: Date | undefined;
}

export interface VirtualSchemaProposalRequest {
  virtualSchemaCode: string;
  virtualSchemaRegistry: string[];
  actions: Action[];
  executors: string[];
  enable: boolean;
}

export interface VirtualSchema {
  virtualNftSchemaCode: string;
  registry: VirtualSchemaRegistry[];
  /** link wih virtual action. We will not put in here to reduce redundance info */
  enable: boolean;
}

export interface VirtualSchemaRegistry {
  nftSchemaCode: string;
  decision: RegistryStatus;
}

export interface VirtualSchemaRegistryRequest {
  nftSchemaCode: string;
}

export interface ActiveVirtualSchemaProposal {
  id: string;
}

export interface InactiveVirtualSchemaProposal {
  id: string;
}

function createBaseVirtualSchemaProposal(): VirtualSchemaProposal {
  return {
    id: "",
    proposalType: 0,
    virtualSchema: undefined,
    actions: [],
    executors: [],
    submitTime: undefined,
    votingStartTime: undefined,
    votingEndTime: undefined,
  };
}

export const VirtualSchemaProposal: MessageFns<VirtualSchemaProposal> = {
  encode(message: VirtualSchemaProposal, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.proposalType !== 0) {
      writer.uint32(16).int32(message.proposalType);
    }
    if (message.virtualSchema !== undefined) {
      VirtualSchema.encode(message.virtualSchema, writer.uint32(26).fork()).join();
    }
    for (const v of message.actions) {
      Action.encode(v!, writer.uint32(34).fork()).join();
    }
    for (const v of message.executors) {
      writer.uint32(42).string(v!);
    }
    if (message.submitTime !== undefined) {
      Timestamp.encode(toTimestamp(message.submitTime), writer.uint32(50).fork()).join();
    }
    if (message.votingStartTime !== undefined) {
      Timestamp.encode(toTimestamp(message.votingStartTime), writer.uint32(58).fork()).join();
    }
    if (message.votingEndTime !== undefined) {
      Timestamp.encode(toTimestamp(message.votingEndTime), writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VirtualSchemaProposal {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVirtualSchemaProposal();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.proposalType = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.virtualSchema = VirtualSchema.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.actions.push(Action.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.executors.push(reader.string());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.submitTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.votingStartTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.votingEndTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VirtualSchemaProposal {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      proposalType: isSet(object.proposalType) ? proposalTypeFromJSON(object.proposalType) : 0,
      virtualSchema: isSet(object.virtualSchema) ? VirtualSchema.fromJSON(object.virtualSchema) : undefined,
      actions: globalThis.Array.isArray(object?.actions) ? object.actions.map((e: any) => Action.fromJSON(e)) : [],
      executors: globalThis.Array.isArray(object?.executors)
        ? object.executors.map((e: any) => globalThis.String(e))
        : [],
      submitTime: isSet(object.submitTime) ? fromJsonTimestamp(object.submitTime) : undefined,
      votingStartTime: isSet(object.votingStartTime) ? fromJsonTimestamp(object.votingStartTime) : undefined,
      votingEndTime: isSet(object.votingEndTime) ? fromJsonTimestamp(object.votingEndTime) : undefined,
    };
  },

  toJSON(message: VirtualSchemaProposal): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.proposalType !== 0) {
      obj.proposalType = proposalTypeToJSON(message.proposalType);
    }
    if (message.virtualSchema !== undefined) {
      obj.virtualSchema = VirtualSchema.toJSON(message.virtualSchema);
    }
    if (message.actions?.length) {
      obj.actions = message.actions.map((e) => Action.toJSON(e));
    }
    if (message.executors?.length) {
      obj.executors = message.executors;
    }
    if (message.submitTime !== undefined) {
      obj.submitTime = message.submitTime.toISOString();
    }
    if (message.votingStartTime !== undefined) {
      obj.votingStartTime = message.votingStartTime.toISOString();
    }
    if (message.votingEndTime !== undefined) {
      obj.votingEndTime = message.votingEndTime.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VirtualSchemaProposal>, I>>(base?: I): VirtualSchemaProposal {
    return VirtualSchemaProposal.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VirtualSchemaProposal>, I>>(object: I): VirtualSchemaProposal {
    const message = createBaseVirtualSchemaProposal();
    message.id = object.id ?? "";
    message.proposalType = object.proposalType ?? 0;
    message.virtualSchema = (object.virtualSchema !== undefined && object.virtualSchema !== null)
      ? VirtualSchema.fromPartial(object.virtualSchema)
      : undefined;
    message.actions = object.actions?.map((e) => Action.fromPartial(e)) || [];
    message.executors = object.executors?.map((e) => e) || [];
    message.submitTime = object.submitTime ?? undefined;
    message.votingStartTime = object.votingStartTime ?? undefined;
    message.votingEndTime = object.votingEndTime ?? undefined;
    return message;
  },
};

function createBaseVirtualSchemaProposalRequest(): VirtualSchemaProposalRequest {
  return { virtualSchemaCode: "", virtualSchemaRegistry: [], actions: [], executors: [], enable: false };
}

export const VirtualSchemaProposalRequest: MessageFns<VirtualSchemaProposalRequest> = {
  encode(message: VirtualSchemaProposalRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.virtualSchemaCode !== "") {
      writer.uint32(10).string(message.virtualSchemaCode);
    }
    for (const v of message.virtualSchemaRegistry) {
      writer.uint32(18).string(v!);
    }
    for (const v of message.actions) {
      Action.encode(v!, writer.uint32(26).fork()).join();
    }
    for (const v of message.executors) {
      writer.uint32(34).string(v!);
    }
    if (message.enable !== false) {
      writer.uint32(40).bool(message.enable);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VirtualSchemaProposalRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVirtualSchemaProposalRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.virtualSchemaCode = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.virtualSchemaRegistry.push(reader.string());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.actions.push(Action.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.executors.push(reader.string());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.enable = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VirtualSchemaProposalRequest {
    return {
      virtualSchemaCode: isSet(object.virtualSchemaCode) ? globalThis.String(object.virtualSchemaCode) : "",
      virtualSchemaRegistry: globalThis.Array.isArray(object?.virtualSchemaRegistry)
        ? object.virtualSchemaRegistry.map((e: any) => globalThis.String(e))
        : [],
      actions: globalThis.Array.isArray(object?.actions) ? object.actions.map((e: any) => Action.fromJSON(e)) : [],
      executors: globalThis.Array.isArray(object?.executors)
        ? object.executors.map((e: any) => globalThis.String(e))
        : [],
      enable: isSet(object.enable) ? globalThis.Boolean(object.enable) : false,
    };
  },

  toJSON(message: VirtualSchemaProposalRequest): unknown {
    const obj: any = {};
    if (message.virtualSchemaCode !== "") {
      obj.virtualSchemaCode = message.virtualSchemaCode;
    }
    if (message.virtualSchemaRegistry?.length) {
      obj.virtualSchemaRegistry = message.virtualSchemaRegistry;
    }
    if (message.actions?.length) {
      obj.actions = message.actions.map((e) => Action.toJSON(e));
    }
    if (message.executors?.length) {
      obj.executors = message.executors;
    }
    if (message.enable !== false) {
      obj.enable = message.enable;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VirtualSchemaProposalRequest>, I>>(base?: I): VirtualSchemaProposalRequest {
    return VirtualSchemaProposalRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VirtualSchemaProposalRequest>, I>>(object: I): VirtualSchemaProposalRequest {
    const message = createBaseVirtualSchemaProposalRequest();
    message.virtualSchemaCode = object.virtualSchemaCode ?? "";
    message.virtualSchemaRegistry = object.virtualSchemaRegistry?.map((e) => e) || [];
    message.actions = object.actions?.map((e) => Action.fromPartial(e)) || [];
    message.executors = object.executors?.map((e) => e) || [];
    message.enable = object.enable ?? false;
    return message;
  },
};

function createBaseVirtualSchema(): VirtualSchema {
  return { virtualNftSchemaCode: "", registry: [], enable: false };
}

export const VirtualSchema: MessageFns<VirtualSchema> = {
  encode(message: VirtualSchema, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.virtualNftSchemaCode !== "") {
      writer.uint32(10).string(message.virtualNftSchemaCode);
    }
    for (const v of message.registry) {
      VirtualSchemaRegistry.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.enable !== false) {
      writer.uint32(24).bool(message.enable);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VirtualSchema {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVirtualSchema();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.virtualNftSchemaCode = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.registry.push(VirtualSchemaRegistry.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.enable = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VirtualSchema {
    return {
      virtualNftSchemaCode: isSet(object.virtualNftSchemaCode) ? globalThis.String(object.virtualNftSchemaCode) : "",
      registry: globalThis.Array.isArray(object?.registry)
        ? object.registry.map((e: any) => VirtualSchemaRegistry.fromJSON(e))
        : [],
      enable: isSet(object.enable) ? globalThis.Boolean(object.enable) : false,
    };
  },

  toJSON(message: VirtualSchema): unknown {
    const obj: any = {};
    if (message.virtualNftSchemaCode !== "") {
      obj.virtualNftSchemaCode = message.virtualNftSchemaCode;
    }
    if (message.registry?.length) {
      obj.registry = message.registry.map((e) => VirtualSchemaRegistry.toJSON(e));
    }
    if (message.enable !== false) {
      obj.enable = message.enable;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VirtualSchema>, I>>(base?: I): VirtualSchema {
    return VirtualSchema.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VirtualSchema>, I>>(object: I): VirtualSchema {
    const message = createBaseVirtualSchema();
    message.virtualNftSchemaCode = object.virtualNftSchemaCode ?? "";
    message.registry = object.registry?.map((e) => VirtualSchemaRegistry.fromPartial(e)) || [];
    message.enable = object.enable ?? false;
    return message;
  },
};

function createBaseVirtualSchemaRegistry(): VirtualSchemaRegistry {
  return { nftSchemaCode: "", decision: 0 };
}

export const VirtualSchemaRegistry: MessageFns<VirtualSchemaRegistry> = {
  encode(message: VirtualSchemaRegistry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.nftSchemaCode !== "") {
      writer.uint32(10).string(message.nftSchemaCode);
    }
    if (message.decision !== 0) {
      writer.uint32(16).int32(message.decision);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VirtualSchemaRegistry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVirtualSchemaRegistry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.nftSchemaCode = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.decision = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VirtualSchemaRegistry {
    return {
      nftSchemaCode: isSet(object.nftSchemaCode) ? globalThis.String(object.nftSchemaCode) : "",
      decision: isSet(object.decision) ? registryStatusFromJSON(object.decision) : 0,
    };
  },

  toJSON(message: VirtualSchemaRegistry): unknown {
    const obj: any = {};
    if (message.nftSchemaCode !== "") {
      obj.nftSchemaCode = message.nftSchemaCode;
    }
    if (message.decision !== 0) {
      obj.decision = registryStatusToJSON(message.decision);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VirtualSchemaRegistry>, I>>(base?: I): VirtualSchemaRegistry {
    return VirtualSchemaRegistry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VirtualSchemaRegistry>, I>>(object: I): VirtualSchemaRegistry {
    const message = createBaseVirtualSchemaRegistry();
    message.nftSchemaCode = object.nftSchemaCode ?? "";
    message.decision = object.decision ?? 0;
    return message;
  },
};

function createBaseVirtualSchemaRegistryRequest(): VirtualSchemaRegistryRequest {
  return { nftSchemaCode: "" };
}

export const VirtualSchemaRegistryRequest: MessageFns<VirtualSchemaRegistryRequest> = {
  encode(message: VirtualSchemaRegistryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.nftSchemaCode !== "") {
      writer.uint32(10).string(message.nftSchemaCode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VirtualSchemaRegistryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVirtualSchemaRegistryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.nftSchemaCode = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VirtualSchemaRegistryRequest {
    return { nftSchemaCode: isSet(object.nftSchemaCode) ? globalThis.String(object.nftSchemaCode) : "" };
  },

  toJSON(message: VirtualSchemaRegistryRequest): unknown {
    const obj: any = {};
    if (message.nftSchemaCode !== "") {
      obj.nftSchemaCode = message.nftSchemaCode;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VirtualSchemaRegistryRequest>, I>>(base?: I): VirtualSchemaRegistryRequest {
    return VirtualSchemaRegistryRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VirtualSchemaRegistryRequest>, I>>(object: I): VirtualSchemaRegistryRequest {
    const message = createBaseVirtualSchemaRegistryRequest();
    message.nftSchemaCode = object.nftSchemaCode ?? "";
    return message;
  },
};

function createBaseActiveVirtualSchemaProposal(): ActiveVirtualSchemaProposal {
  return { id: "" };
}

export const ActiveVirtualSchemaProposal: MessageFns<ActiveVirtualSchemaProposal> = {
  encode(message: ActiveVirtualSchemaProposal, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ActiveVirtualSchemaProposal {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseActiveVirtualSchemaProposal();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ActiveVirtualSchemaProposal {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: ActiveVirtualSchemaProposal): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ActiveVirtualSchemaProposal>, I>>(base?: I): ActiveVirtualSchemaProposal {
    return ActiveVirtualSchemaProposal.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ActiveVirtualSchemaProposal>, I>>(object: I): ActiveVirtualSchemaProposal {
    const message = createBaseActiveVirtualSchemaProposal();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseInactiveVirtualSchemaProposal(): InactiveVirtualSchemaProposal {
  return { id: "" };
}

export const InactiveVirtualSchemaProposal: MessageFns<InactiveVirtualSchemaProposal> = {
  encode(message: InactiveVirtualSchemaProposal, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InactiveVirtualSchemaProposal {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInactiveVirtualSchemaProposal();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InactiveVirtualSchemaProposal {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: InactiveVirtualSchemaProposal): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InactiveVirtualSchemaProposal>, I>>(base?: I): InactiveVirtualSchemaProposal {
    return InactiveVirtualSchemaProposal.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InactiveVirtualSchemaProposal>, I>>(
    object: I,
  ): InactiveVirtualSchemaProposal {
    const message = createBaseInactiveVirtualSchemaProposal();
    message.id = object.id ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
