// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: sixprotocol/tokenmngr/query.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { PageRequest, PageResponse } from "../../cosmos/base/query/v1beta1/pagination";
import { Mintperm } from "./mintperm";
import { Options } from "./options";
import { Params } from "./params";
import { Token } from "./token";
import { TokenBurn } from "./token_burn";

export const protobufPackage = "sixprotocol.tokenmngr";

/** QueryParamsRequest is request type for the Query/Params RPC method. */
export interface QueryParamsRequest {
}

/** QueryParamsResponse is response type for the Query/Params RPC method. */
export interface QueryParamsResponse {
  /** params holds all the parameters of this module. */
  params: Params | undefined;
}

export interface QueryGetTokenRequest {
  name: string;
}

export interface QueryGetTokenResponse {
  token: Token | undefined;
}

export interface QueryAllTokenRequest {
  pagination: PageRequest | undefined;
}

export interface QueryAllTokenResponse {
  token: Token[];
  pagination: PageResponse | undefined;
}

export interface QueryGetMintpermRequest {
  token: string;
  address: string;
}

export interface QueryGetMintpermResponse {
  mintperm: Mintperm | undefined;
}

export interface QueryAllMintpermRequest {
  pagination: PageRequest | undefined;
}

export interface QueryAllMintpermResponse {
  mintperm: Mintperm[];
  pagination: PageResponse | undefined;
}

export interface QueryGetTokenBurnRequest {
  index: string;
}

export interface QueryGetTokenBurnResponse {
  tokenBurn: TokenBurn | undefined;
}

export interface QueryAllTokenBurnRequest {
  pagination: PageRequest | undefined;
}

export interface QueryAllTokenBurnResponse {
  tokenBurn: TokenBurn[];
  pagination: PageResponse | undefined;
}

export interface QueryGetOptionsRequest {
}

export interface QueryGetOptionsResponse {
  Options: Options | undefined;
}

function createBaseQueryParamsRequest(): QueryParamsRequest {
  return {};
}

export const QueryParamsRequest: MessageFns<QueryParamsRequest> = {
  encode(_: QueryParamsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParamsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryParamsRequest {
    return {};
  },

  toJSON(_: QueryParamsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryParamsRequest>, I>>(base?: I): QueryParamsRequest {
    return QueryParamsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryParamsRequest>, I>>(_: I): QueryParamsRequest {
    const message = createBaseQueryParamsRequest();
    return message;
  },
};

function createBaseQueryParamsResponse(): QueryParamsResponse {
  return { params: undefined };
}

export const QueryParamsResponse: MessageFns<QueryParamsResponse> = {
  encode(message: QueryParamsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParamsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryParamsResponse {
    return { params: isSet(object.params) ? Params.fromJSON(object.params) : undefined };
  },

  toJSON(message: QueryParamsResponse): unknown {
    const obj: any = {};
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryParamsResponse>, I>>(base?: I): QueryParamsResponse {
    return QueryParamsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryParamsResponse>, I>>(object: I): QueryParamsResponse {
    const message = createBaseQueryParamsResponse();
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseQueryGetTokenRequest(): QueryGetTokenRequest {
  return { name: "" };
}

export const QueryGetTokenRequest: MessageFns<QueryGetTokenRequest> = {
  encode(message: QueryGetTokenRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetTokenRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetTokenRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetTokenRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: QueryGetTokenRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetTokenRequest>, I>>(base?: I): QueryGetTokenRequest {
    return QueryGetTokenRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetTokenRequest>, I>>(object: I): QueryGetTokenRequest {
    const message = createBaseQueryGetTokenRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseQueryGetTokenResponse(): QueryGetTokenResponse {
  return { token: undefined };
}

export const QueryGetTokenResponse: MessageFns<QueryGetTokenResponse> = {
  encode(message: QueryGetTokenResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.token !== undefined) {
      Token.encode(message.token, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetTokenResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetTokenResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.token = Token.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetTokenResponse {
    return { token: isSet(object.token) ? Token.fromJSON(object.token) : undefined };
  },

  toJSON(message: QueryGetTokenResponse): unknown {
    const obj: any = {};
    if (message.token !== undefined) {
      obj.token = Token.toJSON(message.token);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetTokenResponse>, I>>(base?: I): QueryGetTokenResponse {
    return QueryGetTokenResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetTokenResponse>, I>>(object: I): QueryGetTokenResponse {
    const message = createBaseQueryGetTokenResponse();
    message.token = (object.token !== undefined && object.token !== null) ? Token.fromPartial(object.token) : undefined;
    return message;
  },
};

function createBaseQueryAllTokenRequest(): QueryAllTokenRequest {
  return { pagination: undefined };
}

export const QueryAllTokenRequest: MessageFns<QueryAllTokenRequest> = {
  encode(message: QueryAllTokenRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllTokenRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllTokenRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllTokenRequest {
    return { pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined };
  },

  toJSON(message: QueryAllTokenRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllTokenRequest>, I>>(base?: I): QueryAllTokenRequest {
    return QueryAllTokenRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllTokenRequest>, I>>(object: I): QueryAllTokenRequest {
    const message = createBaseQueryAllTokenRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryAllTokenResponse(): QueryAllTokenResponse {
  return { token: [], pagination: undefined };
}

export const QueryAllTokenResponse: MessageFns<QueryAllTokenResponse> = {
  encode(message: QueryAllTokenResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.token) {
      Token.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllTokenResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllTokenResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.token.push(Token.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllTokenResponse {
    return {
      token: globalThis.Array.isArray(object?.token) ? object.token.map((e: any) => Token.fromJSON(e)) : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryAllTokenResponse): unknown {
    const obj: any = {};
    if (message.token?.length) {
      obj.token = message.token.map((e) => Token.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllTokenResponse>, I>>(base?: I): QueryAllTokenResponse {
    return QueryAllTokenResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllTokenResponse>, I>>(object: I): QueryAllTokenResponse {
    const message = createBaseQueryAllTokenResponse();
    message.token = object.token?.map((e) => Token.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryGetMintpermRequest(): QueryGetMintpermRequest {
  return { token: "", address: "" };
}

export const QueryGetMintpermRequest: MessageFns<QueryGetMintpermRequest> = {
  encode(message: QueryGetMintpermRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.token !== "") {
      writer.uint32(10).string(message.token);
    }
    if (message.address !== "") {
      writer.uint32(18).string(message.address);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetMintpermRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetMintpermRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.token = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.address = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetMintpermRequest {
    return {
      token: isSet(object.token) ? globalThis.String(object.token) : "",
      address: isSet(object.address) ? globalThis.String(object.address) : "",
    };
  },

  toJSON(message: QueryGetMintpermRequest): unknown {
    const obj: any = {};
    if (message.token !== "") {
      obj.token = message.token;
    }
    if (message.address !== "") {
      obj.address = message.address;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetMintpermRequest>, I>>(base?: I): QueryGetMintpermRequest {
    return QueryGetMintpermRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetMintpermRequest>, I>>(object: I): QueryGetMintpermRequest {
    const message = createBaseQueryGetMintpermRequest();
    message.token = object.token ?? "";
    message.address = object.address ?? "";
    return message;
  },
};

function createBaseQueryGetMintpermResponse(): QueryGetMintpermResponse {
  return { mintperm: undefined };
}

export const QueryGetMintpermResponse: MessageFns<QueryGetMintpermResponse> = {
  encode(message: QueryGetMintpermResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.mintperm !== undefined) {
      Mintperm.encode(message.mintperm, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetMintpermResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetMintpermResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.mintperm = Mintperm.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetMintpermResponse {
    return { mintperm: isSet(object.mintperm) ? Mintperm.fromJSON(object.mintperm) : undefined };
  },

  toJSON(message: QueryGetMintpermResponse): unknown {
    const obj: any = {};
    if (message.mintperm !== undefined) {
      obj.mintperm = Mintperm.toJSON(message.mintperm);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetMintpermResponse>, I>>(base?: I): QueryGetMintpermResponse {
    return QueryGetMintpermResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetMintpermResponse>, I>>(object: I): QueryGetMintpermResponse {
    const message = createBaseQueryGetMintpermResponse();
    message.mintperm = (object.mintperm !== undefined && object.mintperm !== null)
      ? Mintperm.fromPartial(object.mintperm)
      : undefined;
    return message;
  },
};

function createBaseQueryAllMintpermRequest(): QueryAllMintpermRequest {
  return { pagination: undefined };
}

export const QueryAllMintpermRequest: MessageFns<QueryAllMintpermRequest> = {
  encode(message: QueryAllMintpermRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllMintpermRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllMintpermRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllMintpermRequest {
    return { pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined };
  },

  toJSON(message: QueryAllMintpermRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllMintpermRequest>, I>>(base?: I): QueryAllMintpermRequest {
    return QueryAllMintpermRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllMintpermRequest>, I>>(object: I): QueryAllMintpermRequest {
    const message = createBaseQueryAllMintpermRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryAllMintpermResponse(): QueryAllMintpermResponse {
  return { mintperm: [], pagination: undefined };
}

export const QueryAllMintpermResponse: MessageFns<QueryAllMintpermResponse> = {
  encode(message: QueryAllMintpermResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.mintperm) {
      Mintperm.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllMintpermResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllMintpermResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.mintperm.push(Mintperm.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllMintpermResponse {
    return {
      mintperm: globalThis.Array.isArray(object?.mintperm) ? object.mintperm.map((e: any) => Mintperm.fromJSON(e)) : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryAllMintpermResponse): unknown {
    const obj: any = {};
    if (message.mintperm?.length) {
      obj.mintperm = message.mintperm.map((e) => Mintperm.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllMintpermResponse>, I>>(base?: I): QueryAllMintpermResponse {
    return QueryAllMintpermResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllMintpermResponse>, I>>(object: I): QueryAllMintpermResponse {
    const message = createBaseQueryAllMintpermResponse();
    message.mintperm = object.mintperm?.map((e) => Mintperm.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryGetTokenBurnRequest(): QueryGetTokenBurnRequest {
  return { index: "" };
}

export const QueryGetTokenBurnRequest: MessageFns<QueryGetTokenBurnRequest> = {
  encode(message: QueryGetTokenBurnRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.index !== "") {
      writer.uint32(10).string(message.index);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetTokenBurnRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetTokenBurnRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.index = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetTokenBurnRequest {
    return { index: isSet(object.index) ? globalThis.String(object.index) : "" };
  },

  toJSON(message: QueryGetTokenBurnRequest): unknown {
    const obj: any = {};
    if (message.index !== "") {
      obj.index = message.index;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetTokenBurnRequest>, I>>(base?: I): QueryGetTokenBurnRequest {
    return QueryGetTokenBurnRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetTokenBurnRequest>, I>>(object: I): QueryGetTokenBurnRequest {
    const message = createBaseQueryGetTokenBurnRequest();
    message.index = object.index ?? "";
    return message;
  },
};

function createBaseQueryGetTokenBurnResponse(): QueryGetTokenBurnResponse {
  return { tokenBurn: undefined };
}

export const QueryGetTokenBurnResponse: MessageFns<QueryGetTokenBurnResponse> = {
  encode(message: QueryGetTokenBurnResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tokenBurn !== undefined) {
      TokenBurn.encode(message.tokenBurn, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetTokenBurnResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetTokenBurnResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tokenBurn = TokenBurn.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetTokenBurnResponse {
    return { tokenBurn: isSet(object.tokenBurn) ? TokenBurn.fromJSON(object.tokenBurn) : undefined };
  },

  toJSON(message: QueryGetTokenBurnResponse): unknown {
    const obj: any = {};
    if (message.tokenBurn !== undefined) {
      obj.tokenBurn = TokenBurn.toJSON(message.tokenBurn);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetTokenBurnResponse>, I>>(base?: I): QueryGetTokenBurnResponse {
    return QueryGetTokenBurnResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetTokenBurnResponse>, I>>(object: I): QueryGetTokenBurnResponse {
    const message = createBaseQueryGetTokenBurnResponse();
    message.tokenBurn = (object.tokenBurn !== undefined && object.tokenBurn !== null)
      ? TokenBurn.fromPartial(object.tokenBurn)
      : undefined;
    return message;
  },
};

function createBaseQueryAllTokenBurnRequest(): QueryAllTokenBurnRequest {
  return { pagination: undefined };
}

export const QueryAllTokenBurnRequest: MessageFns<QueryAllTokenBurnRequest> = {
  encode(message: QueryAllTokenBurnRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllTokenBurnRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllTokenBurnRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllTokenBurnRequest {
    return { pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined };
  },

  toJSON(message: QueryAllTokenBurnRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllTokenBurnRequest>, I>>(base?: I): QueryAllTokenBurnRequest {
    return QueryAllTokenBurnRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllTokenBurnRequest>, I>>(object: I): QueryAllTokenBurnRequest {
    const message = createBaseQueryAllTokenBurnRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryAllTokenBurnResponse(): QueryAllTokenBurnResponse {
  return { tokenBurn: [], pagination: undefined };
}

export const QueryAllTokenBurnResponse: MessageFns<QueryAllTokenBurnResponse> = {
  encode(message: QueryAllTokenBurnResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.tokenBurn) {
      TokenBurn.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllTokenBurnResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllTokenBurnResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tokenBurn.push(TokenBurn.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllTokenBurnResponse {
    return {
      tokenBurn: globalThis.Array.isArray(object?.tokenBurn)
        ? object.tokenBurn.map((e: any) => TokenBurn.fromJSON(e))
        : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryAllTokenBurnResponse): unknown {
    const obj: any = {};
    if (message.tokenBurn?.length) {
      obj.tokenBurn = message.tokenBurn.map((e) => TokenBurn.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllTokenBurnResponse>, I>>(base?: I): QueryAllTokenBurnResponse {
    return QueryAllTokenBurnResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllTokenBurnResponse>, I>>(object: I): QueryAllTokenBurnResponse {
    const message = createBaseQueryAllTokenBurnResponse();
    message.tokenBurn = object.tokenBurn?.map((e) => TokenBurn.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryGetOptionsRequest(): QueryGetOptionsRequest {
  return {};
}

export const QueryGetOptionsRequest: MessageFns<QueryGetOptionsRequest> = {
  encode(_: QueryGetOptionsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetOptionsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetOptionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryGetOptionsRequest {
    return {};
  },

  toJSON(_: QueryGetOptionsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetOptionsRequest>, I>>(base?: I): QueryGetOptionsRequest {
    return QueryGetOptionsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetOptionsRequest>, I>>(_: I): QueryGetOptionsRequest {
    const message = createBaseQueryGetOptionsRequest();
    return message;
  },
};

function createBaseQueryGetOptionsResponse(): QueryGetOptionsResponse {
  return { Options: undefined };
}

export const QueryGetOptionsResponse: MessageFns<QueryGetOptionsResponse> = {
  encode(message: QueryGetOptionsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.Options !== undefined) {
      Options.encode(message.Options, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetOptionsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetOptionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.Options = Options.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetOptionsResponse {
    return { Options: isSet(object.Options) ? Options.fromJSON(object.Options) : undefined };
  },

  toJSON(message: QueryGetOptionsResponse): unknown {
    const obj: any = {};
    if (message.Options !== undefined) {
      obj.Options = Options.toJSON(message.Options);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetOptionsResponse>, I>>(base?: I): QueryGetOptionsResponse {
    return QueryGetOptionsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetOptionsResponse>, I>>(object: I): QueryGetOptionsResponse {
    const message = createBaseQueryGetOptionsResponse();
    message.Options = (object.Options !== undefined && object.Options !== null)
      ? Options.fromPartial(object.Options)
      : undefined;
    return message;
  },
};

/** Query defines the gRPC querier service. */
export interface Query {
  /** Parameters queries the parameters of the module. */
  Params(request: QueryParamsRequest): Promise<QueryParamsResponse>;
  /** Queries a list of Token items. */
  Token(request: QueryGetTokenRequest): Promise<QueryGetTokenResponse>;
  TokenAll(request: QueryAllTokenRequest): Promise<QueryAllTokenResponse>;
  /** Queries a list of Mintperm items. */
  Mintperm(request: QueryGetMintpermRequest): Promise<QueryGetMintpermResponse>;
  MintpermAll(request: QueryAllMintpermRequest): Promise<QueryAllMintpermResponse>;
  /** Queries a list of TokenBurn items. */
  TokenBurn(request: QueryGetTokenBurnRequest): Promise<QueryGetTokenBurnResponse>;
  TokenBurnAll(request: QueryAllTokenBurnRequest): Promise<QueryAllTokenBurnResponse>;
  /** Queries a Options by index. */
  Options(request: QueryGetOptionsRequest): Promise<QueryGetOptionsResponse>;
}

export const QueryServiceName = "sixprotocol.tokenmngr.Query";
export class QueryClientImpl implements Query {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || QueryServiceName;
    this.rpc = rpc;
    this.Params = this.Params.bind(this);
    this.Token = this.Token.bind(this);
    this.TokenAll = this.TokenAll.bind(this);
    this.Mintperm = this.Mintperm.bind(this);
    this.MintpermAll = this.MintpermAll.bind(this);
    this.TokenBurn = this.TokenBurn.bind(this);
    this.TokenBurnAll = this.TokenBurnAll.bind(this);
    this.Options = this.Options.bind(this);
  }
  Params(request: QueryParamsRequest): Promise<QueryParamsResponse> {
    const data = QueryParamsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Params", data);
    return promise.then((data) => QueryParamsResponse.decode(new BinaryReader(data)));
  }

  Token(request: QueryGetTokenRequest): Promise<QueryGetTokenResponse> {
    const data = QueryGetTokenRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Token", data);
    return promise.then((data) => QueryGetTokenResponse.decode(new BinaryReader(data)));
  }

  TokenAll(request: QueryAllTokenRequest): Promise<QueryAllTokenResponse> {
    const data = QueryAllTokenRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "TokenAll", data);
    return promise.then((data) => QueryAllTokenResponse.decode(new BinaryReader(data)));
  }

  Mintperm(request: QueryGetMintpermRequest): Promise<QueryGetMintpermResponse> {
    const data = QueryGetMintpermRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Mintperm", data);
    return promise.then((data) => QueryGetMintpermResponse.decode(new BinaryReader(data)));
  }

  MintpermAll(request: QueryAllMintpermRequest): Promise<QueryAllMintpermResponse> {
    const data = QueryAllMintpermRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "MintpermAll", data);
    return promise.then((data) => QueryAllMintpermResponse.decode(new BinaryReader(data)));
  }

  TokenBurn(request: QueryGetTokenBurnRequest): Promise<QueryGetTokenBurnResponse> {
    const data = QueryGetTokenBurnRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "TokenBurn", data);
    return promise.then((data) => QueryGetTokenBurnResponse.decode(new BinaryReader(data)));
  }

  TokenBurnAll(request: QueryAllTokenBurnRequest): Promise<QueryAllTokenBurnResponse> {
    const data = QueryAllTokenBurnRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "TokenBurnAll", data);
    return promise.then((data) => QueryAllTokenBurnResponse.decode(new BinaryReader(data)));
  }

  Options(request: QueryGetOptionsRequest): Promise<QueryGetOptionsResponse> {
    const data = QueryGetOptionsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Options", data);
    return promise.then((data) => QueryGetOptionsResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
