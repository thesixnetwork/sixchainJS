// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: ratelimit/v1/ratelimit.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Duration } from "../../google/protobuf/duration";
import { Timestamp } from "../../google/protobuf/timestamp";

export const protobufPackage = "ratelimit.v1";

/**
 * PacketDirection defines whether the transfer packet is being sent from
 * this chain or is being received on this chain
 */
export enum PacketDirection {
  PACKET_SEND = 0,
  PACKET_RECV = 1,
  UNRECOGNIZED = -1,
}

export function packetDirectionFromJSON(object: any): PacketDirection {
  switch (object) {
    case 0:
    case "PACKET_SEND":
      return PacketDirection.PACKET_SEND;
    case 1:
    case "PACKET_RECV":
      return PacketDirection.PACKET_RECV;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PacketDirection.UNRECOGNIZED;
  }
}

export function packetDirectionToJSON(object: PacketDirection): string {
  switch (object) {
    case PacketDirection.PACKET_SEND:
      return "PACKET_SEND";
    case PacketDirection.PACKET_RECV:
      return "PACKET_RECV";
    case PacketDirection.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Path holds the denom and channelID that define the rate limited route */
export interface Path {
  denom: string;
  channelId: string;
}

/** Quota defines the rate limit thresholds for transfer packets */
export interface Quota {
  /**
   * MaxPercentSend defines the threshold for outflows
   * The threshold is defined as a percentage (e.g. 10 indicates 10%)
   */
  maxPercentSend: string;
  /**
   * MaxPercentSend defines the threshold for inflows
   * The threshold is defined as a percentage (e.g. 10 indicates 10%)
   */
  maxPercentRecv: string;
  /**
   * DurationHours specifies the number of hours before the rate limit
   * is reset (e.g. 24 indicates that the rate limit is reset each day)
   */
  durationHours: number;
}

export interface Flow {
  /**
   * Inflow defines the total amount of inbound transfers for the given
   * rate limit in the current window
   */
  inflow: string;
  /**
   * Outflow defines the total amount of outbound transfers for the given
   * rate limit in the current window
   */
  outflow: string;
  /**
   * ChannelValue stores the total supply of the denom at the start of
   * the rate limit. This is used as the denominator when checking
   * the rate limit threshold
   * The ChannelValue is fixed for the duration of the rate limit window
   */
  channelValue: string;
}

/**
 * RateLimit stores all the context about a given rate limit, including
 * the relevant denom and channel, rate limit thresholds, and current
 * progress towards the limits
 */
export interface RateLimit {
  path: Path | undefined;
  quota: Quota | undefined;
  flow: Flow | undefined;
}

/**
 * WhitelistedAddressPair represents a sender-receiver combo that is
 * not subject to rate limit restrictions
 */
export interface WhitelistedAddressPair {
  sender: string;
  receiver: string;
}

export interface HourEpoch {
  epochNumber: number;
  duration: Duration | undefined;
  epochStartTime: Date | undefined;
  epochStartHeight: number;
}

function createBasePath(): Path {
  return { denom: "", channelId: "" };
}

export const Path: MessageFns<Path> = {
  encode(message: Path, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.denom !== "") {
      writer.uint32(10).string(message.denom);
    }
    if (message.channelId !== "") {
      writer.uint32(18).string(message.channelId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Path {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePath();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.denom = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.channelId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Path {
    return {
      denom: isSet(object.denom) ? globalThis.String(object.denom) : "",
      channelId: isSet(object.channelId) ? globalThis.String(object.channelId) : "",
    };
  },

  toJSON(message: Path): unknown {
    const obj: any = {};
    if (message.denom !== "") {
      obj.denom = message.denom;
    }
    if (message.channelId !== "") {
      obj.channelId = message.channelId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Path>, I>>(base?: I): Path {
    return Path.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Path>, I>>(object: I): Path {
    const message = createBasePath();
    message.denom = object.denom ?? "";
    message.channelId = object.channelId ?? "";
    return message;
  },
};

function createBaseQuota(): Quota {
  return { maxPercentSend: "", maxPercentRecv: "", durationHours: 0 };
}

export const Quota: MessageFns<Quota> = {
  encode(message: Quota, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.maxPercentSend !== "") {
      writer.uint32(10).string(message.maxPercentSend);
    }
    if (message.maxPercentRecv !== "") {
      writer.uint32(18).string(message.maxPercentRecv);
    }
    if (message.durationHours !== 0) {
      writer.uint32(24).uint64(message.durationHours);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Quota {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQuota();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.maxPercentSend = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.maxPercentRecv = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.durationHours = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Quota {
    return {
      maxPercentSend: isSet(object.maxPercentSend) ? globalThis.String(object.maxPercentSend) : "",
      maxPercentRecv: isSet(object.maxPercentRecv) ? globalThis.String(object.maxPercentRecv) : "",
      durationHours: isSet(object.durationHours) ? globalThis.Number(object.durationHours) : 0,
    };
  },

  toJSON(message: Quota): unknown {
    const obj: any = {};
    if (message.maxPercentSend !== "") {
      obj.maxPercentSend = message.maxPercentSend;
    }
    if (message.maxPercentRecv !== "") {
      obj.maxPercentRecv = message.maxPercentRecv;
    }
    if (message.durationHours !== 0) {
      obj.durationHours = Math.round(message.durationHours);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Quota>, I>>(base?: I): Quota {
    return Quota.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Quota>, I>>(object: I): Quota {
    const message = createBaseQuota();
    message.maxPercentSend = object.maxPercentSend ?? "";
    message.maxPercentRecv = object.maxPercentRecv ?? "";
    message.durationHours = object.durationHours ?? 0;
    return message;
  },
};

function createBaseFlow(): Flow {
  return { inflow: "", outflow: "", channelValue: "" };
}

export const Flow: MessageFns<Flow> = {
  encode(message: Flow, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.inflow !== "") {
      writer.uint32(10).string(message.inflow);
    }
    if (message.outflow !== "") {
      writer.uint32(18).string(message.outflow);
    }
    if (message.channelValue !== "") {
      writer.uint32(26).string(message.channelValue);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Flow {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFlow();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.inflow = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.outflow = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.channelValue = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Flow {
    return {
      inflow: isSet(object.inflow) ? globalThis.String(object.inflow) : "",
      outflow: isSet(object.outflow) ? globalThis.String(object.outflow) : "",
      channelValue: isSet(object.channelValue) ? globalThis.String(object.channelValue) : "",
    };
  },

  toJSON(message: Flow): unknown {
    const obj: any = {};
    if (message.inflow !== "") {
      obj.inflow = message.inflow;
    }
    if (message.outflow !== "") {
      obj.outflow = message.outflow;
    }
    if (message.channelValue !== "") {
      obj.channelValue = message.channelValue;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Flow>, I>>(base?: I): Flow {
    return Flow.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Flow>, I>>(object: I): Flow {
    const message = createBaseFlow();
    message.inflow = object.inflow ?? "";
    message.outflow = object.outflow ?? "";
    message.channelValue = object.channelValue ?? "";
    return message;
  },
};

function createBaseRateLimit(): RateLimit {
  return { path: undefined, quota: undefined, flow: undefined };
}

export const RateLimit: MessageFns<RateLimit> = {
  encode(message: RateLimit, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.path !== undefined) {
      Path.encode(message.path, writer.uint32(10).fork()).join();
    }
    if (message.quota !== undefined) {
      Quota.encode(message.quota, writer.uint32(18).fork()).join();
    }
    if (message.flow !== undefined) {
      Flow.encode(message.flow, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RateLimit {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRateLimit();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.path = Path.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.quota = Quota.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.flow = Flow.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RateLimit {
    return {
      path: isSet(object.path) ? Path.fromJSON(object.path) : undefined,
      quota: isSet(object.quota) ? Quota.fromJSON(object.quota) : undefined,
      flow: isSet(object.flow) ? Flow.fromJSON(object.flow) : undefined,
    };
  },

  toJSON(message: RateLimit): unknown {
    const obj: any = {};
    if (message.path !== undefined) {
      obj.path = Path.toJSON(message.path);
    }
    if (message.quota !== undefined) {
      obj.quota = Quota.toJSON(message.quota);
    }
    if (message.flow !== undefined) {
      obj.flow = Flow.toJSON(message.flow);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RateLimit>, I>>(base?: I): RateLimit {
    return RateLimit.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RateLimit>, I>>(object: I): RateLimit {
    const message = createBaseRateLimit();
    message.path = (object.path !== undefined && object.path !== null) ? Path.fromPartial(object.path) : undefined;
    message.quota = (object.quota !== undefined && object.quota !== null) ? Quota.fromPartial(object.quota) : undefined;
    message.flow = (object.flow !== undefined && object.flow !== null) ? Flow.fromPartial(object.flow) : undefined;
    return message;
  },
};

function createBaseWhitelistedAddressPair(): WhitelistedAddressPair {
  return { sender: "", receiver: "" };
}

export const WhitelistedAddressPair: MessageFns<WhitelistedAddressPair> = {
  encode(message: WhitelistedAddressPair, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sender !== "") {
      writer.uint32(10).string(message.sender);
    }
    if (message.receiver !== "") {
      writer.uint32(18).string(message.receiver);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WhitelistedAddressPair {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWhitelistedAddressPair();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sender = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.receiver = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WhitelistedAddressPair {
    return {
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
      receiver: isSet(object.receiver) ? globalThis.String(object.receiver) : "",
    };
  },

  toJSON(message: WhitelistedAddressPair): unknown {
    const obj: any = {};
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    if (message.receiver !== "") {
      obj.receiver = message.receiver;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WhitelistedAddressPair>, I>>(base?: I): WhitelistedAddressPair {
    return WhitelistedAddressPair.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WhitelistedAddressPair>, I>>(object: I): WhitelistedAddressPair {
    const message = createBaseWhitelistedAddressPair();
    message.sender = object.sender ?? "";
    message.receiver = object.receiver ?? "";
    return message;
  },
};

function createBaseHourEpoch(): HourEpoch {
  return { epochNumber: 0, duration: undefined, epochStartTime: undefined, epochStartHeight: 0 };
}

export const HourEpoch: MessageFns<HourEpoch> = {
  encode(message: HourEpoch, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.epochNumber !== 0) {
      writer.uint32(8).uint64(message.epochNumber);
    }
    if (message.duration !== undefined) {
      Duration.encode(message.duration, writer.uint32(18).fork()).join();
    }
    if (message.epochStartTime !== undefined) {
      Timestamp.encode(toTimestamp(message.epochStartTime), writer.uint32(26).fork()).join();
    }
    if (message.epochStartHeight !== 0) {
      writer.uint32(32).int64(message.epochStartHeight);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HourEpoch {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHourEpoch();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.epochNumber = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.duration = Duration.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.epochStartTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.epochStartHeight = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HourEpoch {
    return {
      epochNumber: isSet(object.epochNumber) ? globalThis.Number(object.epochNumber) : 0,
      duration: isSet(object.duration) ? Duration.fromJSON(object.duration) : undefined,
      epochStartTime: isSet(object.epochStartTime) ? fromJsonTimestamp(object.epochStartTime) : undefined,
      epochStartHeight: isSet(object.epochStartHeight) ? globalThis.Number(object.epochStartHeight) : 0,
    };
  },

  toJSON(message: HourEpoch): unknown {
    const obj: any = {};
    if (message.epochNumber !== 0) {
      obj.epochNumber = Math.round(message.epochNumber);
    }
    if (message.duration !== undefined) {
      obj.duration = Duration.toJSON(message.duration);
    }
    if (message.epochStartTime !== undefined) {
      obj.epochStartTime = message.epochStartTime.toISOString();
    }
    if (message.epochStartHeight !== 0) {
      obj.epochStartHeight = Math.round(message.epochStartHeight);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HourEpoch>, I>>(base?: I): HourEpoch {
    return HourEpoch.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HourEpoch>, I>>(object: I): HourEpoch {
    const message = createBaseHourEpoch();
    message.epochNumber = object.epochNumber ?? 0;
    message.duration = (object.duration !== undefined && object.duration !== null)
      ? Duration.fromPartial(object.duration)
      : undefined;
    message.epochStartTime = object.epochStartTime ?? undefined;
    message.epochStartHeight = object.epochStartHeight ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
