// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: ratelimit/v1/tx.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "ratelimit.v1";

/** Gov tx to add a new rate limit */
export interface MsgAddRateLimit {
  /** Authority defines the x/gov module account */
  authority: string;
  /**
   * Denom for the rate limit, as it appears on the rate limited chain
   * When rate limiting a non-native token, this will be an ibc denom
   */
  denom: string;
  /** ChannelId for the rate limit, on the side of the rate limited chain */
  channelId: string;
  /**
   * MaxPercentSend defines the threshold for outflows
   * The threshold is defined as a percentage (e.g. 10 indicates 10%)
   */
  maxPercentSend: string;
  /**
   * MaxPercentSend defines the threshold for inflows
   * The threshold is defined as a percentage (e.g. 10 indicates 10%)
   */
  maxPercentRecv: string;
  /**
   * DurationHours specifies the number of hours before the rate limit
   * is reset (e.g. 24 indicates that the rate limit is reset each day)
   */
  durationHours: number;
}

export interface MsgAddRateLimitResponse {
}

/** Gov tx to update an existing rate limit */
export interface MsgUpdateRateLimit {
  /** Authority defines the x/gov module account */
  authority: string;
  /**
   * Denom for the rate limit, as it appears on the rate limited chain
   * When rate limiting a non-native token, this will be an ibc denom
   */
  denom: string;
  /** ChannelId for the rate limit, on the side of the rate limited chain */
  channelId: string;
  /**
   * MaxPercentSend defines the threshold for outflows
   * The threshold is defined as a percentage (e.g. 10 indicates 10%)
   */
  maxPercentSend: string;
  /**
   * MaxPercentSend defines the threshold for inflows
   * The threshold is defined as a percentage (e.g. 10 indicates 10%)
   */
  maxPercentRecv: string;
  /**
   * DurationHours specifies the number of hours before the rate limit
   * is reset (e.g. 24 indicates that the rate limit is reset each day)
   */
  durationHours: number;
}

export interface MsgUpdateRateLimitResponse {
}

/** Gov tx to remove a rate limit */
export interface MsgRemoveRateLimit {
  /** Authority defines the x/gov module account */
  authority: string;
  /**
   * Denom for the rate limit, as it appears on the rate limited chain
   * When rate limiting a non-native token, this will be an ibc denom
   */
  denom: string;
  /** ChannelId for the rate limit, on the side of the rate limited chain */
  channelId: string;
}

export interface MsgRemoveRateLimitResponse {
}

/** Gov tx to reset the flow on a rate limit */
export interface MsgResetRateLimit {
  /** Authority defines the x/gov module account */
  authority: string;
  /**
   * Denom for the rate limit, as it appears on the rate limited chain
   * When rate limiting a non-native token, this will be an ibc denom
   */
  denom: string;
  /** ChannelId for the rate limit, on the side of the rate limited chain */
  channelId: string;
}

export interface MsgResetRateLimitResponse {
}

function createBaseMsgAddRateLimit(): MsgAddRateLimit {
  return { authority: "", denom: "", channelId: "", maxPercentSend: "", maxPercentRecv: "", durationHours: 0 };
}

export const MsgAddRateLimit: MessageFns<MsgAddRateLimit> = {
  encode(message: MsgAddRateLimit, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.authority !== "") {
      writer.uint32(10).string(message.authority);
    }
    if (message.denom !== "") {
      writer.uint32(18).string(message.denom);
    }
    if (message.channelId !== "") {
      writer.uint32(26).string(message.channelId);
    }
    if (message.maxPercentSend !== "") {
      writer.uint32(34).string(message.maxPercentSend);
    }
    if (message.maxPercentRecv !== "") {
      writer.uint32(42).string(message.maxPercentRecv);
    }
    if (message.durationHours !== 0) {
      writer.uint32(48).uint64(message.durationHours);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgAddRateLimit {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgAddRateLimit();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.authority = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.denom = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.channelId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.maxPercentSend = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.maxPercentRecv = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.durationHours = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgAddRateLimit {
    return {
      authority: isSet(object.authority) ? globalThis.String(object.authority) : "",
      denom: isSet(object.denom) ? globalThis.String(object.denom) : "",
      channelId: isSet(object.channelId) ? globalThis.String(object.channelId) : "",
      maxPercentSend: isSet(object.maxPercentSend) ? globalThis.String(object.maxPercentSend) : "",
      maxPercentRecv: isSet(object.maxPercentRecv) ? globalThis.String(object.maxPercentRecv) : "",
      durationHours: isSet(object.durationHours) ? globalThis.Number(object.durationHours) : 0,
    };
  },

  toJSON(message: MsgAddRateLimit): unknown {
    const obj: any = {};
    if (message.authority !== "") {
      obj.authority = message.authority;
    }
    if (message.denom !== "") {
      obj.denom = message.denom;
    }
    if (message.channelId !== "") {
      obj.channelId = message.channelId;
    }
    if (message.maxPercentSend !== "") {
      obj.maxPercentSend = message.maxPercentSend;
    }
    if (message.maxPercentRecv !== "") {
      obj.maxPercentRecv = message.maxPercentRecv;
    }
    if (message.durationHours !== 0) {
      obj.durationHours = Math.round(message.durationHours);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgAddRateLimit>, I>>(base?: I): MsgAddRateLimit {
    return MsgAddRateLimit.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgAddRateLimit>, I>>(object: I): MsgAddRateLimit {
    const message = createBaseMsgAddRateLimit();
    message.authority = object.authority ?? "";
    message.denom = object.denom ?? "";
    message.channelId = object.channelId ?? "";
    message.maxPercentSend = object.maxPercentSend ?? "";
    message.maxPercentRecv = object.maxPercentRecv ?? "";
    message.durationHours = object.durationHours ?? 0;
    return message;
  },
};

function createBaseMsgAddRateLimitResponse(): MsgAddRateLimitResponse {
  return {};
}

export const MsgAddRateLimitResponse: MessageFns<MsgAddRateLimitResponse> = {
  encode(_: MsgAddRateLimitResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgAddRateLimitResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgAddRateLimitResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgAddRateLimitResponse {
    return {};
  },

  toJSON(_: MsgAddRateLimitResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgAddRateLimitResponse>, I>>(base?: I): MsgAddRateLimitResponse {
    return MsgAddRateLimitResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgAddRateLimitResponse>, I>>(_: I): MsgAddRateLimitResponse {
    const message = createBaseMsgAddRateLimitResponse();
    return message;
  },
};

function createBaseMsgUpdateRateLimit(): MsgUpdateRateLimit {
  return { authority: "", denom: "", channelId: "", maxPercentSend: "", maxPercentRecv: "", durationHours: 0 };
}

export const MsgUpdateRateLimit: MessageFns<MsgUpdateRateLimit> = {
  encode(message: MsgUpdateRateLimit, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.authority !== "") {
      writer.uint32(10).string(message.authority);
    }
    if (message.denom !== "") {
      writer.uint32(18).string(message.denom);
    }
    if (message.channelId !== "") {
      writer.uint32(26).string(message.channelId);
    }
    if (message.maxPercentSend !== "") {
      writer.uint32(34).string(message.maxPercentSend);
    }
    if (message.maxPercentRecv !== "") {
      writer.uint32(42).string(message.maxPercentRecv);
    }
    if (message.durationHours !== 0) {
      writer.uint32(48).uint64(message.durationHours);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateRateLimit {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateRateLimit();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.authority = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.denom = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.channelId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.maxPercentSend = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.maxPercentRecv = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.durationHours = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdateRateLimit {
    return {
      authority: isSet(object.authority) ? globalThis.String(object.authority) : "",
      denom: isSet(object.denom) ? globalThis.String(object.denom) : "",
      channelId: isSet(object.channelId) ? globalThis.String(object.channelId) : "",
      maxPercentSend: isSet(object.maxPercentSend) ? globalThis.String(object.maxPercentSend) : "",
      maxPercentRecv: isSet(object.maxPercentRecv) ? globalThis.String(object.maxPercentRecv) : "",
      durationHours: isSet(object.durationHours) ? globalThis.Number(object.durationHours) : 0,
    };
  },

  toJSON(message: MsgUpdateRateLimit): unknown {
    const obj: any = {};
    if (message.authority !== "") {
      obj.authority = message.authority;
    }
    if (message.denom !== "") {
      obj.denom = message.denom;
    }
    if (message.channelId !== "") {
      obj.channelId = message.channelId;
    }
    if (message.maxPercentSend !== "") {
      obj.maxPercentSend = message.maxPercentSend;
    }
    if (message.maxPercentRecv !== "") {
      obj.maxPercentRecv = message.maxPercentRecv;
    }
    if (message.durationHours !== 0) {
      obj.durationHours = Math.round(message.durationHours);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateRateLimit>, I>>(base?: I): MsgUpdateRateLimit {
    return MsgUpdateRateLimit.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateRateLimit>, I>>(object: I): MsgUpdateRateLimit {
    const message = createBaseMsgUpdateRateLimit();
    message.authority = object.authority ?? "";
    message.denom = object.denom ?? "";
    message.channelId = object.channelId ?? "";
    message.maxPercentSend = object.maxPercentSend ?? "";
    message.maxPercentRecv = object.maxPercentRecv ?? "";
    message.durationHours = object.durationHours ?? 0;
    return message;
  },
};

function createBaseMsgUpdateRateLimitResponse(): MsgUpdateRateLimitResponse {
  return {};
}

export const MsgUpdateRateLimitResponse: MessageFns<MsgUpdateRateLimitResponse> = {
  encode(_: MsgUpdateRateLimitResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateRateLimitResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateRateLimitResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgUpdateRateLimitResponse {
    return {};
  },

  toJSON(_: MsgUpdateRateLimitResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateRateLimitResponse>, I>>(base?: I): MsgUpdateRateLimitResponse {
    return MsgUpdateRateLimitResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateRateLimitResponse>, I>>(_: I): MsgUpdateRateLimitResponse {
    const message = createBaseMsgUpdateRateLimitResponse();
    return message;
  },
};

function createBaseMsgRemoveRateLimit(): MsgRemoveRateLimit {
  return { authority: "", denom: "", channelId: "" };
}

export const MsgRemoveRateLimit: MessageFns<MsgRemoveRateLimit> = {
  encode(message: MsgRemoveRateLimit, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.authority !== "") {
      writer.uint32(10).string(message.authority);
    }
    if (message.denom !== "") {
      writer.uint32(18).string(message.denom);
    }
    if (message.channelId !== "") {
      writer.uint32(26).string(message.channelId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgRemoveRateLimit {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRemoveRateLimit();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.authority = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.denom = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.channelId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgRemoveRateLimit {
    return {
      authority: isSet(object.authority) ? globalThis.String(object.authority) : "",
      denom: isSet(object.denom) ? globalThis.String(object.denom) : "",
      channelId: isSet(object.channelId) ? globalThis.String(object.channelId) : "",
    };
  },

  toJSON(message: MsgRemoveRateLimit): unknown {
    const obj: any = {};
    if (message.authority !== "") {
      obj.authority = message.authority;
    }
    if (message.denom !== "") {
      obj.denom = message.denom;
    }
    if (message.channelId !== "") {
      obj.channelId = message.channelId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgRemoveRateLimit>, I>>(base?: I): MsgRemoveRateLimit {
    return MsgRemoveRateLimit.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgRemoveRateLimit>, I>>(object: I): MsgRemoveRateLimit {
    const message = createBaseMsgRemoveRateLimit();
    message.authority = object.authority ?? "";
    message.denom = object.denom ?? "";
    message.channelId = object.channelId ?? "";
    return message;
  },
};

function createBaseMsgRemoveRateLimitResponse(): MsgRemoveRateLimitResponse {
  return {};
}

export const MsgRemoveRateLimitResponse: MessageFns<MsgRemoveRateLimitResponse> = {
  encode(_: MsgRemoveRateLimitResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgRemoveRateLimitResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRemoveRateLimitResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgRemoveRateLimitResponse {
    return {};
  },

  toJSON(_: MsgRemoveRateLimitResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgRemoveRateLimitResponse>, I>>(base?: I): MsgRemoveRateLimitResponse {
    return MsgRemoveRateLimitResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgRemoveRateLimitResponse>, I>>(_: I): MsgRemoveRateLimitResponse {
    const message = createBaseMsgRemoveRateLimitResponse();
    return message;
  },
};

function createBaseMsgResetRateLimit(): MsgResetRateLimit {
  return { authority: "", denom: "", channelId: "" };
}

export const MsgResetRateLimit: MessageFns<MsgResetRateLimit> = {
  encode(message: MsgResetRateLimit, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.authority !== "") {
      writer.uint32(10).string(message.authority);
    }
    if (message.denom !== "") {
      writer.uint32(18).string(message.denom);
    }
    if (message.channelId !== "") {
      writer.uint32(26).string(message.channelId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgResetRateLimit {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgResetRateLimit();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.authority = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.denom = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.channelId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgResetRateLimit {
    return {
      authority: isSet(object.authority) ? globalThis.String(object.authority) : "",
      denom: isSet(object.denom) ? globalThis.String(object.denom) : "",
      channelId: isSet(object.channelId) ? globalThis.String(object.channelId) : "",
    };
  },

  toJSON(message: MsgResetRateLimit): unknown {
    const obj: any = {};
    if (message.authority !== "") {
      obj.authority = message.authority;
    }
    if (message.denom !== "") {
      obj.denom = message.denom;
    }
    if (message.channelId !== "") {
      obj.channelId = message.channelId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgResetRateLimit>, I>>(base?: I): MsgResetRateLimit {
    return MsgResetRateLimit.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgResetRateLimit>, I>>(object: I): MsgResetRateLimit {
    const message = createBaseMsgResetRateLimit();
    message.authority = object.authority ?? "";
    message.denom = object.denom ?? "";
    message.channelId = object.channelId ?? "";
    return message;
  },
};

function createBaseMsgResetRateLimitResponse(): MsgResetRateLimitResponse {
  return {};
}

export const MsgResetRateLimitResponse: MessageFns<MsgResetRateLimitResponse> = {
  encode(_: MsgResetRateLimitResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgResetRateLimitResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgResetRateLimitResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgResetRateLimitResponse {
    return {};
  },

  toJSON(_: MsgResetRateLimitResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgResetRateLimitResponse>, I>>(base?: I): MsgResetRateLimitResponse {
    return MsgResetRateLimitResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgResetRateLimitResponse>, I>>(_: I): MsgResetRateLimitResponse {
    const message = createBaseMsgResetRateLimitResponse();
    return message;
  },
};

/** Msg service for rate limit txs */
export interface Msg {
  /** Gov tx to add a new rate limit */
  AddRateLimit(request: MsgAddRateLimit): Promise<MsgAddRateLimitResponse>;
  /** Gov tx to update an existing rate limit */
  UpdateRateLimit(request: MsgUpdateRateLimit): Promise<MsgUpdateRateLimitResponse>;
  /** Gov tx to remove a rate limit */
  RemoveRateLimit(request: MsgRemoveRateLimit): Promise<MsgRemoveRateLimitResponse>;
  /** Gov tx to reset the flow on a rate limit */
  ResetRateLimit(request: MsgResetRateLimit): Promise<MsgResetRateLimitResponse>;
}

export const MsgServiceName = "ratelimit.v1.Msg";
export class MsgClientImpl implements Msg {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || MsgServiceName;
    this.rpc = rpc;
    this.AddRateLimit = this.AddRateLimit.bind(this);
    this.UpdateRateLimit = this.UpdateRateLimit.bind(this);
    this.RemoveRateLimit = this.RemoveRateLimit.bind(this);
    this.ResetRateLimit = this.ResetRateLimit.bind(this);
  }
  AddRateLimit(request: MsgAddRateLimit): Promise<MsgAddRateLimitResponse> {
    const data = MsgAddRateLimit.encode(request).finish();
    const promise = this.rpc.request(this.service, "AddRateLimit", data);
    return promise.then((data) => MsgAddRateLimitResponse.decode(new BinaryReader(data)));
  }

  UpdateRateLimit(request: MsgUpdateRateLimit): Promise<MsgUpdateRateLimitResponse> {
    const data = MsgUpdateRateLimit.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateRateLimit", data);
    return promise.then((data) => MsgUpdateRateLimitResponse.decode(new BinaryReader(data)));
  }

  RemoveRateLimit(request: MsgRemoveRateLimit): Promise<MsgRemoveRateLimitResponse> {
    const data = MsgRemoveRateLimit.encode(request).finish();
    const promise = this.rpc.request(this.service, "RemoveRateLimit", data);
    return promise.then((data) => MsgRemoveRateLimitResponse.decode(new BinaryReader(data)));
  }

  ResetRateLimit(request: MsgResetRateLimit): Promise<MsgResetRateLimitResponse> {
    const data = MsgResetRateLimit.encode(request).finish();
    const promise = this.rpc.request(this.service, "ResetRateLimit", data);
    return promise.then((data) => MsgResetRateLimitResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
