// Generated by Ignite ignite.com/cli

import { SigningStargateClient, DeliverTxResponse, StdFee } from "@cosmjs/stargate";
import { EncodeObject, GeneratedType, OfflineSigner, Registry } from "@cosmjs/proto-signing";
import { msgTypes } from './registry';
import { IgniteClient } from "../client"
import { MissingWalletError } from "../helpers"
import { Api } from "./rest";
import { MsgAddRateLimit } from "./types/ratelimit/v1/tx";
import { MsgUpdateRateLimit } from "./types/ratelimit/v1/tx";
import { MsgRemoveRateLimit } from "./types/ratelimit/v1/tx";
import { MsgResetRateLimit } from "./types/ratelimit/v1/tx";

import { Params as typeParams} from "./types"
import { Path as typePath} from "./types"
import { Quota as typeQuota} from "./types"
import { Flow as typeFlow} from "./types"
import { RateLimit as typeRateLimit} from "./types"
import { WhitelistedAddressPair as typeWhitelistedAddressPair} from "./types"
import { HourEpoch as typeHourEpoch} from "./types"

export { MsgAddRateLimit, MsgUpdateRateLimit, MsgRemoveRateLimit, MsgResetRateLimit };

type sendMsgAddRateLimitParams = {
  value: MsgAddRateLimit,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdateRateLimitParams = {
  value: MsgUpdateRateLimit,
  fee?: StdFee,
  memo?: string
};

type sendMsgRemoveRateLimitParams = {
  value: MsgRemoveRateLimit,
  fee?: StdFee,
  memo?: string
};

type sendMsgResetRateLimitParams = {
  value: MsgResetRateLimit,
  fee?: StdFee,
  memo?: string
};


type msgAddRateLimitParams = {
  value: MsgAddRateLimit,
};

type msgUpdateRateLimitParams = {
  value: MsgUpdateRateLimit,
};

type msgRemoveRateLimitParams = {
  value: MsgRemoveRateLimit,
};

type msgResetRateLimitParams = {
  value: MsgResetRateLimit,
};


export const registry = new Registry(msgTypes);

type Field = {
	name: string;
	type: unknown;
}
function getStructure(template) {
	const structure: {fields: Field[]} = { fields: [] }
	for (let [key, value] of Object.entries(template)) {
		let field = { name: key, type: typeof value }
		structure.fields.push(field)
	}
	return structure
}
const defaultFee = {
  amount: [],
  gas: "200000",
};

interface TxClientOptions {
  addr: string
	prefix: string
	signer?: OfflineSigner
}

export const txClient = ({ signer, prefix, addr }: TxClientOptions = { addr: "http://localhost:26657", prefix: "cosmos" }) => {

  return {
		
		async sendMsgAddRateLimit({ value, fee, memo }: sendMsgAddRateLimitParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgAddRateLimit: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgAddRateLimit({ value: MsgAddRateLimit.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgAddRateLimit: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdateRateLimit({ value, fee, memo }: sendMsgUpdateRateLimitParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateRateLimit: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgUpdateRateLimit({ value: MsgUpdateRateLimit.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateRateLimit: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgRemoveRateLimit({ value, fee, memo }: sendMsgRemoveRateLimitParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgRemoveRateLimit: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgRemoveRateLimit({ value: MsgRemoveRateLimit.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgRemoveRateLimit: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgResetRateLimit({ value, fee, memo }: sendMsgResetRateLimitParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgResetRateLimit: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgResetRateLimit({ value: MsgResetRateLimit.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgResetRateLimit: Could not broadcast Tx: '+ e.message)
			}
		},
		
		
		msgAddRateLimit({ value }: msgAddRateLimitParams): EncodeObject {
			try {
				return { typeUrl: "/ratelimit.v1.MsgAddRateLimit", value: MsgAddRateLimit.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgAddRateLimit: Could not create message: ' + e.message)
			}
		},
		
		msgUpdateRateLimit({ value }: msgUpdateRateLimitParams): EncodeObject {
			try {
				return { typeUrl: "/ratelimit.v1.MsgUpdateRateLimit", value: MsgUpdateRateLimit.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateRateLimit: Could not create message: ' + e.message)
			}
		},
		
		msgRemoveRateLimit({ value }: msgRemoveRateLimitParams): EncodeObject {
			try {
				return { typeUrl: "/ratelimit.v1.MsgRemoveRateLimit", value: MsgRemoveRateLimit.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgRemoveRateLimit: Could not create message: ' + e.message)
			}
		},
		
		msgResetRateLimit({ value }: msgResetRateLimitParams): EncodeObject {
			try {
				return { typeUrl: "/ratelimit.v1.MsgResetRateLimit", value: MsgResetRateLimit.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgResetRateLimit: Could not create message: ' + e.message)
			}
		},
		
	}
};

interface QueryClientOptions {
  addr: string
}

export const queryClient = ({ addr: addr }: QueryClientOptions = { addr: "http://localhost:1317" }) => {
  return new Api({ baseURL: addr });
};

class SDKModule {
	public query: ReturnType<typeof queryClient>;
	public tx: ReturnType<typeof txClient>;
	public structure: Record<string,unknown>;
	public registry: Array<[string, GeneratedType]> = [];

	constructor(client: IgniteClient) {		
	
		this.query = queryClient({ addr: client.env.apiURL });		
		this.updateTX(client);
		this.structure =  {
						Params: getStructure(typeParams.fromPartial({})),
						Path: getStructure(typePath.fromPartial({})),
						Quota: getStructure(typeQuota.fromPartial({})),
						Flow: getStructure(typeFlow.fromPartial({})),
						RateLimit: getStructure(typeRateLimit.fromPartial({})),
						WhitelistedAddressPair: getStructure(typeWhitelistedAddressPair.fromPartial({})),
						HourEpoch: getStructure(typeHourEpoch.fromPartial({})),
						
		};
		client.on('signer-changed',(signer) => {			
		 this.updateTX(client);
		})
	}
	updateTX(client: IgniteClient) {
    const methods = txClient({
        signer: client.signer,
        addr: client.env.rpcURL,
        prefix: client.env.prefix ?? "cosmos",
    })
	
    this.tx = methods;
    for (let m in methods) {
        this.tx[m] = methods[m].bind(this.tx);
    }
	}
};

const IgntModule = (test: IgniteClient) => {
	return {
		module: {
			RatelimitV_1: new SDKModule(test)
		},
		registry: msgTypes
  }
}
export default IgntModule;