// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: evmos/inflation/v1/genesis.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { ExponentialCalculation, InflationDistribution } from "./inflation";

export const protobufPackage = "evmos.inflation.v1";

/**
 * Copyright Tharsis Labs Ltd.(Evmos)
 * SPDX-License-Identifier:ENCL-1.0(https://github.com/evmos/evmos/blob/main/LICENSE)
 */

/** GenesisState defines the inflation module's genesis state. */
export interface GenesisState {
  /** params defines all the parameters of the module. */
  params:
    | Params
    | undefined;
  /** period is the amount of past periods, based on the epochs per period param */
  period: number;
  /** epoch_identifier for inflation */
  epochIdentifier: string;
  /** epochs_per_period is the number of epochs after which inflation is recalculated */
  epochsPerPeriod: number;
  /** skipped_epochs is the number of epochs that have passed while inflation is disabled */
  skippedEpochs: number;
}

/** Params holds parameters for the inflation module. */
export interface Params {
  /** mint_denom specifies the type of coin to mint */
  mintDenom: string;
  /** exponential_calculation takes in the variables to calculate exponential inflation */
  exponentialCalculation:
    | ExponentialCalculation
    | undefined;
  /** inflation_distribution of the minted denom */
  inflationDistribution:
    | InflationDistribution
    | undefined;
  /** enable_inflation is the parameter that enables inflation and halts increasing the skipped_epochs */
  enableInflation: boolean;
}

function createBaseGenesisState(): GenesisState {
  return { params: undefined, period: 0, epochIdentifier: "", epochsPerPeriod: 0, skippedEpochs: 0 };
}

export const GenesisState: MessageFns<GenesisState> = {
  encode(message: GenesisState, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(10).fork()).join();
    }
    if (message.period !== 0) {
      writer.uint32(16).uint64(message.period);
    }
    if (message.epochIdentifier !== "") {
      writer.uint32(26).string(message.epochIdentifier);
    }
    if (message.epochsPerPeriod !== 0) {
      writer.uint32(32).int64(message.epochsPerPeriod);
    }
    if (message.skippedEpochs !== 0) {
      writer.uint32(40).uint64(message.skippedEpochs);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenesisState {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenesisState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.period = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.epochIdentifier = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.epochsPerPeriod = longToNumber(reader.int64());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.skippedEpochs = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenesisState {
    return {
      params: isSet(object.params) ? Params.fromJSON(object.params) : undefined,
      period: isSet(object.period) ? globalThis.Number(object.period) : 0,
      epochIdentifier: isSet(object.epochIdentifier) ? globalThis.String(object.epochIdentifier) : "",
      epochsPerPeriod: isSet(object.epochsPerPeriod) ? globalThis.Number(object.epochsPerPeriod) : 0,
      skippedEpochs: isSet(object.skippedEpochs) ? globalThis.Number(object.skippedEpochs) : 0,
    };
  },

  toJSON(message: GenesisState): unknown {
    const obj: any = {};
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    if (message.period !== 0) {
      obj.period = Math.round(message.period);
    }
    if (message.epochIdentifier !== "") {
      obj.epochIdentifier = message.epochIdentifier;
    }
    if (message.epochsPerPeriod !== 0) {
      obj.epochsPerPeriod = Math.round(message.epochsPerPeriod);
    }
    if (message.skippedEpochs !== 0) {
      obj.skippedEpochs = Math.round(message.skippedEpochs);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GenesisState>, I>>(base?: I): GenesisState {
    return GenesisState.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GenesisState>, I>>(object: I): GenesisState {
    const message = createBaseGenesisState();
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    message.period = object.period ?? 0;
    message.epochIdentifier = object.epochIdentifier ?? "";
    message.epochsPerPeriod = object.epochsPerPeriod ?? 0;
    message.skippedEpochs = object.skippedEpochs ?? 0;
    return message;
  },
};

function createBaseParams(): Params {
  return { mintDenom: "", exponentialCalculation: undefined, inflationDistribution: undefined, enableInflation: false };
}

export const Params: MessageFns<Params> = {
  encode(message: Params, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.mintDenom !== "") {
      writer.uint32(10).string(message.mintDenom);
    }
    if (message.exponentialCalculation !== undefined) {
      ExponentialCalculation.encode(message.exponentialCalculation, writer.uint32(18).fork()).join();
    }
    if (message.inflationDistribution !== undefined) {
      InflationDistribution.encode(message.inflationDistribution, writer.uint32(26).fork()).join();
    }
    if (message.enableInflation !== false) {
      writer.uint32(32).bool(message.enableInflation);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Params {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.mintDenom = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.exponentialCalculation = ExponentialCalculation.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.inflationDistribution = InflationDistribution.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.enableInflation = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Params {
    return {
      mintDenom: isSet(object.mintDenom) ? globalThis.String(object.mintDenom) : "",
      exponentialCalculation: isSet(object.exponentialCalculation)
        ? ExponentialCalculation.fromJSON(object.exponentialCalculation)
        : undefined,
      inflationDistribution: isSet(object.inflationDistribution)
        ? InflationDistribution.fromJSON(object.inflationDistribution)
        : undefined,
      enableInflation: isSet(object.enableInflation) ? globalThis.Boolean(object.enableInflation) : false,
    };
  },

  toJSON(message: Params): unknown {
    const obj: any = {};
    if (message.mintDenom !== "") {
      obj.mintDenom = message.mintDenom;
    }
    if (message.exponentialCalculation !== undefined) {
      obj.exponentialCalculation = ExponentialCalculation.toJSON(message.exponentialCalculation);
    }
    if (message.inflationDistribution !== undefined) {
      obj.inflationDistribution = InflationDistribution.toJSON(message.inflationDistribution);
    }
    if (message.enableInflation !== false) {
      obj.enableInflation = message.enableInflation;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Params>, I>>(base?: I): Params {
    return Params.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Params>, I>>(object: I): Params {
    const message = createBaseParams();
    message.mintDenom = object.mintDenom ?? "";
    message.exponentialCalculation =
      (object.exponentialCalculation !== undefined && object.exponentialCalculation !== null)
        ? ExponentialCalculation.fromPartial(object.exponentialCalculation)
        : undefined;
    message.inflationDistribution =
      (object.inflationDistribution !== undefined && object.inflationDistribution !== null)
        ? InflationDistribution.fromPartial(object.inflationDistribution)
        : undefined;
    message.enableInflation = object.enableInflation ?? false;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
