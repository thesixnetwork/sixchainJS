// Generated by Ignite ignite.com/cli

import { SigningStargateClient, DeliverTxResponse, StdFee } from "@cosmjs/stargate";
import { EncodeObject, GeneratedType, OfflineSigner, Registry } from "@cosmjs/proto-signing";
import { msgTypes } from './registry';
import { IgniteClient } from "../client"
import { MissingWalletError } from "../helpers"
import { Api } from "./rest";
import { MsgUpdateParams } from "./types/sixprotocol/nftoracle/tx";
import { MsgCreateMintRequest } from "./types/sixprotocol/nftoracle/tx";
import { MsgSubmitMintResponse } from "./types/sixprotocol/nftoracle/tx";
import { MsgCreateActionRequest } from "./types/sixprotocol/nftoracle/tx";
import { MsgSubmitActionResponse } from "./types/sixprotocol/nftoracle/tx";
import { MsgCreateVerifyCollectionOwnerRequest } from "./types/sixprotocol/nftoracle/tx";
import { MsgSubmitVerifyCollectionOwner } from "./types/sixprotocol/nftoracle/tx";
import { MsgSetMinimumConfirmation } from "./types/sixprotocol/nftoracle/tx";
import { MsgCreateActionSigner } from "./types/sixprotocol/nftoracle/tx";
import { MsgUpdateActionSigner } from "./types/sixprotocol/nftoracle/tx";
import { MsgDeleteActionSigner } from "./types/sixprotocol/nftoracle/tx";
import { MsgCreateActionSignerConfig } from "./types/sixprotocol/nftoracle/tx";
import { MsgUpdateActionSignerConfig } from "./types/sixprotocol/nftoracle/tx";
import { MsgDeleteActionSignerConfig } from "./types/sixprotocol/nftoracle/tx";
import { MsgCreateSyncActionSigner } from "./types/sixprotocol/nftoracle/tx";
import { MsgSubmitSyncActionSigner } from "./types/sixprotocol/nftoracle/tx";

import { ActionParameter as typeActionParameter} from "./types"
import { ActionOracleParam as typeActionOracleParam} from "./types"
import { ActionOracleRequest as typeActionOracleRequest} from "./types"
import { ActionSignature as typeActionSignature} from "./types"
import { ActionSigner as typeActionSigner} from "./types"
import { SetSignerSignature as typeSetSignerSignature} from "./types"
import { SetSignerParams as typeSetSignerParams} from "./types"
import { ActionSignerConfig as typeActionSignerConfig} from "./types"
import { BindedSignerParams as typeBindedSignerParams} from "./types"
import { BindedSigner as typeBindedSigner} from "./types"
import { OriginContractParam as typeOriginContractParam} from "./types"
import { CollectionOwnerRequest as typeCollectionOwnerRequest} from "./types"
import { OriginContractInfo as typeOriginContractInfo} from "./types"
import { CollectionOwnerSignature as typeCollectionOwnerSignature} from "./types"
import { MintRequest as typeMintRequest} from "./types"
import { Trait as typeTrait} from "./types"
import { OracleConfig as typeOracleConfig} from "./types"
import { Params as typeParams} from "./types"
import { NftOriginData as typeNftOriginData} from "./types"
import { DataHash as typeDataHash} from "./types"
import { SyncActionSigner as typeSyncActionSigner} from "./types"
import { ParameterSyncSignerByOracle as typeParameterSyncSignerByOracle} from "./types"
import { ContractInfoHash as typeContractInfoHash} from "./types"

export { MsgUpdateParams, MsgCreateMintRequest, MsgSubmitMintResponse, MsgCreateActionRequest, MsgSubmitActionResponse, MsgCreateVerifyCollectionOwnerRequest, MsgSubmitVerifyCollectionOwner, MsgSetMinimumConfirmation, MsgCreateActionSigner, MsgUpdateActionSigner, MsgDeleteActionSigner, MsgCreateActionSignerConfig, MsgUpdateActionSignerConfig, MsgDeleteActionSignerConfig, MsgCreateSyncActionSigner, MsgSubmitSyncActionSigner };

type sendMsgUpdateParamsParams = {
  value: MsgUpdateParams,
  fee?: StdFee,
  memo?: string
};

type sendMsgCreateMintRequestParams = {
  value: MsgCreateMintRequest,
  fee?: StdFee,
  memo?: string
};

type sendMsgSubmitMintResponseParams = {
  value: MsgSubmitMintResponse,
  fee?: StdFee,
  memo?: string
};

type sendMsgCreateActionRequestParams = {
  value: MsgCreateActionRequest,
  fee?: StdFee,
  memo?: string
};

type sendMsgSubmitActionResponseParams = {
  value: MsgSubmitActionResponse,
  fee?: StdFee,
  memo?: string
};

type sendMsgCreateVerifyCollectionOwnerRequestParams = {
  value: MsgCreateVerifyCollectionOwnerRequest,
  fee?: StdFee,
  memo?: string
};

type sendMsgSubmitVerifyCollectionOwnerParams = {
  value: MsgSubmitVerifyCollectionOwner,
  fee?: StdFee,
  memo?: string
};

type sendMsgSetMinimumConfirmationParams = {
  value: MsgSetMinimumConfirmation,
  fee?: StdFee,
  memo?: string
};

type sendMsgCreateActionSignerParams = {
  value: MsgCreateActionSigner,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdateActionSignerParams = {
  value: MsgUpdateActionSigner,
  fee?: StdFee,
  memo?: string
};

type sendMsgDeleteActionSignerParams = {
  value: MsgDeleteActionSigner,
  fee?: StdFee,
  memo?: string
};

type sendMsgCreateActionSignerConfigParams = {
  value: MsgCreateActionSignerConfig,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdateActionSignerConfigParams = {
  value: MsgUpdateActionSignerConfig,
  fee?: StdFee,
  memo?: string
};

type sendMsgDeleteActionSignerConfigParams = {
  value: MsgDeleteActionSignerConfig,
  fee?: StdFee,
  memo?: string
};

type sendMsgCreateSyncActionSignerParams = {
  value: MsgCreateSyncActionSigner,
  fee?: StdFee,
  memo?: string
};

type sendMsgSubmitSyncActionSignerParams = {
  value: MsgSubmitSyncActionSigner,
  fee?: StdFee,
  memo?: string
};


type msgUpdateParamsParams = {
  value: MsgUpdateParams,
};

type msgCreateMintRequestParams = {
  value: MsgCreateMintRequest,
};

type msgSubmitMintResponseParams = {
  value: MsgSubmitMintResponse,
};

type msgCreateActionRequestParams = {
  value: MsgCreateActionRequest,
};

type msgSubmitActionResponseParams = {
  value: MsgSubmitActionResponse,
};

type msgCreateVerifyCollectionOwnerRequestParams = {
  value: MsgCreateVerifyCollectionOwnerRequest,
};

type msgSubmitVerifyCollectionOwnerParams = {
  value: MsgSubmitVerifyCollectionOwner,
};

type msgSetMinimumConfirmationParams = {
  value: MsgSetMinimumConfirmation,
};

type msgCreateActionSignerParams = {
  value: MsgCreateActionSigner,
};

type msgUpdateActionSignerParams = {
  value: MsgUpdateActionSigner,
};

type msgDeleteActionSignerParams = {
  value: MsgDeleteActionSigner,
};

type msgCreateActionSignerConfigParams = {
  value: MsgCreateActionSignerConfig,
};

type msgUpdateActionSignerConfigParams = {
  value: MsgUpdateActionSignerConfig,
};

type msgDeleteActionSignerConfigParams = {
  value: MsgDeleteActionSignerConfig,
};

type msgCreateSyncActionSignerParams = {
  value: MsgCreateSyncActionSigner,
};

type msgSubmitSyncActionSignerParams = {
  value: MsgSubmitSyncActionSigner,
};


export const registry = new Registry(msgTypes);

type Field = {
	name: string;
	type: unknown;
}
function getStructure(template) {
	const structure: {fields: Field[]} = { fields: [] }
	for (let [key, value] of Object.entries(template)) {
		let field = { name: key, type: typeof value }
		structure.fields.push(field)
	}
	return structure
}
const defaultFee = {
  amount: [],
  gas: "200000",
};

interface TxClientOptions {
  addr: string
	prefix: string
	signer?: OfflineSigner
}

export const txClient = ({ signer, prefix, addr }: TxClientOptions = { addr: "http://localhost:26657", prefix: "cosmos" }) => {

  return {
		
		async sendMsgUpdateParams({ value, fee, memo }: sendMsgUpdateParamsParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateParams: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgUpdateParams({ value: MsgUpdateParams.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateParams: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCreateMintRequest({ value, fee, memo }: sendMsgCreateMintRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCreateMintRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgCreateMintRequest({ value: MsgCreateMintRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreateMintRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgSubmitMintResponse({ value, fee, memo }: sendMsgSubmitMintResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgSubmitMintResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgSubmitMintResponse({ value: MsgSubmitMintResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgSubmitMintResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCreateActionRequest({ value, fee, memo }: sendMsgCreateActionRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCreateActionRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgCreateActionRequest({ value: MsgCreateActionRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreateActionRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgSubmitActionResponse({ value, fee, memo }: sendMsgSubmitActionResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgSubmitActionResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgSubmitActionResponse({ value: MsgSubmitActionResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgSubmitActionResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCreateVerifyCollectionOwnerRequest({ value, fee, memo }: sendMsgCreateVerifyCollectionOwnerRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCreateVerifyCollectionOwnerRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgCreateVerifyCollectionOwnerRequest({ value: MsgCreateVerifyCollectionOwnerRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreateVerifyCollectionOwnerRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgSubmitVerifyCollectionOwner({ value, fee, memo }: sendMsgSubmitVerifyCollectionOwnerParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgSubmitVerifyCollectionOwner: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgSubmitVerifyCollectionOwner({ value: MsgSubmitVerifyCollectionOwner.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgSubmitVerifyCollectionOwner: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgSetMinimumConfirmation({ value, fee, memo }: sendMsgSetMinimumConfirmationParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgSetMinimumConfirmation: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgSetMinimumConfirmation({ value: MsgSetMinimumConfirmation.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgSetMinimumConfirmation: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCreateActionSigner({ value, fee, memo }: sendMsgCreateActionSignerParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCreateActionSigner: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgCreateActionSigner({ value: MsgCreateActionSigner.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreateActionSigner: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdateActionSigner({ value, fee, memo }: sendMsgUpdateActionSignerParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateActionSigner: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgUpdateActionSigner({ value: MsgUpdateActionSigner.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateActionSigner: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgDeleteActionSigner({ value, fee, memo }: sendMsgDeleteActionSignerParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgDeleteActionSigner: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgDeleteActionSigner({ value: MsgDeleteActionSigner.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgDeleteActionSigner: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCreateActionSignerConfig({ value, fee, memo }: sendMsgCreateActionSignerConfigParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCreateActionSignerConfig: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgCreateActionSignerConfig({ value: MsgCreateActionSignerConfig.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreateActionSignerConfig: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdateActionSignerConfig({ value, fee, memo }: sendMsgUpdateActionSignerConfigParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateActionSignerConfig: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgUpdateActionSignerConfig({ value: MsgUpdateActionSignerConfig.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateActionSignerConfig: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgDeleteActionSignerConfig({ value, fee, memo }: sendMsgDeleteActionSignerConfigParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgDeleteActionSignerConfig: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgDeleteActionSignerConfig({ value: MsgDeleteActionSignerConfig.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgDeleteActionSignerConfig: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCreateSyncActionSigner({ value, fee, memo }: sendMsgCreateSyncActionSignerParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCreateSyncActionSigner: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgCreateSyncActionSigner({ value: MsgCreateSyncActionSigner.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreateSyncActionSigner: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgSubmitSyncActionSigner({ value, fee, memo }: sendMsgSubmitSyncActionSignerParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgSubmitSyncActionSigner: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgSubmitSyncActionSigner({ value: MsgSubmitSyncActionSigner.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgSubmitSyncActionSigner: Could not broadcast Tx: '+ e.message)
			}
		},
		
		
		msgUpdateParams({ value }: msgUpdateParamsParams): EncodeObject {
			try {
				return { typeUrl: "/sixprotocol.nftoracle.MsgUpdateParams", value: MsgUpdateParams.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateParams: Could not create message: ' + e.message)
			}
		},
		
		msgCreateMintRequest({ value }: msgCreateMintRequestParams): EncodeObject {
			try {
				return { typeUrl: "/sixprotocol.nftoracle.MsgCreateMintRequest", value: MsgCreateMintRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCreateMintRequest: Could not create message: ' + e.message)
			}
		},
		
		msgSubmitMintResponse({ value }: msgSubmitMintResponseParams): EncodeObject {
			try {
				return { typeUrl: "/sixprotocol.nftoracle.MsgSubmitMintResponse", value: MsgSubmitMintResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgSubmitMintResponse: Could not create message: ' + e.message)
			}
		},
		
		msgCreateActionRequest({ value }: msgCreateActionRequestParams): EncodeObject {
			try {
				return { typeUrl: "/sixprotocol.nftoracle.MsgCreateActionRequest", value: MsgCreateActionRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCreateActionRequest: Could not create message: ' + e.message)
			}
		},
		
		msgSubmitActionResponse({ value }: msgSubmitActionResponseParams): EncodeObject {
			try {
				return { typeUrl: "/sixprotocol.nftoracle.MsgSubmitActionResponse", value: MsgSubmitActionResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgSubmitActionResponse: Could not create message: ' + e.message)
			}
		},
		
		msgCreateVerifyCollectionOwnerRequest({ value }: msgCreateVerifyCollectionOwnerRequestParams): EncodeObject {
			try {
				return { typeUrl: "/sixprotocol.nftoracle.MsgCreateVerifyCollectionOwnerRequest", value: MsgCreateVerifyCollectionOwnerRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCreateVerifyCollectionOwnerRequest: Could not create message: ' + e.message)
			}
		},
		
		msgSubmitVerifyCollectionOwner({ value }: msgSubmitVerifyCollectionOwnerParams): EncodeObject {
			try {
				return { typeUrl: "/sixprotocol.nftoracle.MsgSubmitVerifyCollectionOwner", value: MsgSubmitVerifyCollectionOwner.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgSubmitVerifyCollectionOwner: Could not create message: ' + e.message)
			}
		},
		
		msgSetMinimumConfirmation({ value }: msgSetMinimumConfirmationParams): EncodeObject {
			try {
				return { typeUrl: "/sixprotocol.nftoracle.MsgSetMinimumConfirmation", value: MsgSetMinimumConfirmation.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgSetMinimumConfirmation: Could not create message: ' + e.message)
			}
		},
		
		msgCreateActionSigner({ value }: msgCreateActionSignerParams): EncodeObject {
			try {
				return { typeUrl: "/sixprotocol.nftoracle.MsgCreateActionSigner", value: MsgCreateActionSigner.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCreateActionSigner: Could not create message: ' + e.message)
			}
		},
		
		msgUpdateActionSigner({ value }: msgUpdateActionSignerParams): EncodeObject {
			try {
				return { typeUrl: "/sixprotocol.nftoracle.MsgUpdateActionSigner", value: MsgUpdateActionSigner.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateActionSigner: Could not create message: ' + e.message)
			}
		},
		
		msgDeleteActionSigner({ value }: msgDeleteActionSignerParams): EncodeObject {
			try {
				return { typeUrl: "/sixprotocol.nftoracle.MsgDeleteActionSigner", value: MsgDeleteActionSigner.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgDeleteActionSigner: Could not create message: ' + e.message)
			}
		},
		
		msgCreateActionSignerConfig({ value }: msgCreateActionSignerConfigParams): EncodeObject {
			try {
				return { typeUrl: "/sixprotocol.nftoracle.MsgCreateActionSignerConfig", value: MsgCreateActionSignerConfig.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCreateActionSignerConfig: Could not create message: ' + e.message)
			}
		},
		
		msgUpdateActionSignerConfig({ value }: msgUpdateActionSignerConfigParams): EncodeObject {
			try {
				return { typeUrl: "/sixprotocol.nftoracle.MsgUpdateActionSignerConfig", value: MsgUpdateActionSignerConfig.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateActionSignerConfig: Could not create message: ' + e.message)
			}
		},
		
		msgDeleteActionSignerConfig({ value }: msgDeleteActionSignerConfigParams): EncodeObject {
			try {
				return { typeUrl: "/sixprotocol.nftoracle.MsgDeleteActionSignerConfig", value: MsgDeleteActionSignerConfig.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgDeleteActionSignerConfig: Could not create message: ' + e.message)
			}
		},
		
		msgCreateSyncActionSigner({ value }: msgCreateSyncActionSignerParams): EncodeObject {
			try {
				return { typeUrl: "/sixprotocol.nftoracle.MsgCreateSyncActionSigner", value: MsgCreateSyncActionSigner.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCreateSyncActionSigner: Could not create message: ' + e.message)
			}
		},
		
		msgSubmitSyncActionSigner({ value }: msgSubmitSyncActionSignerParams): EncodeObject {
			try {
				return { typeUrl: "/sixprotocol.nftoracle.MsgSubmitSyncActionSigner", value: MsgSubmitSyncActionSigner.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgSubmitSyncActionSigner: Could not create message: ' + e.message)
			}
		},
		
	}
};

interface QueryClientOptions {
  addr: string
}

export const queryClient = ({ addr: addr }: QueryClientOptions = { addr: "http://localhost:1317" }) => {
  return new Api({ baseURL: addr });
};

class SDKModule {
	public query: ReturnType<typeof queryClient>;
	public tx: ReturnType<typeof txClient>;
	public structure: Record<string,unknown>;
	public registry: Array<[string, GeneratedType]> = [];

	constructor(client: IgniteClient) {		
	
		this.query = queryClient({ addr: client.env.apiURL });		
		this.updateTX(client);
		this.structure =  {
						ActionParameter: getStructure(typeActionParameter.fromPartial({})),
						ActionOracleParam: getStructure(typeActionOracleParam.fromPartial({})),
						ActionOracleRequest: getStructure(typeActionOracleRequest.fromPartial({})),
						ActionSignature: getStructure(typeActionSignature.fromPartial({})),
						ActionSigner: getStructure(typeActionSigner.fromPartial({})),
						SetSignerSignature: getStructure(typeSetSignerSignature.fromPartial({})),
						SetSignerParams: getStructure(typeSetSignerParams.fromPartial({})),
						ActionSignerConfig: getStructure(typeActionSignerConfig.fromPartial({})),
						BindedSignerParams: getStructure(typeBindedSignerParams.fromPartial({})),
						BindedSigner: getStructure(typeBindedSigner.fromPartial({})),
						OriginContractParam: getStructure(typeOriginContractParam.fromPartial({})),
						CollectionOwnerRequest: getStructure(typeCollectionOwnerRequest.fromPartial({})),
						OriginContractInfo: getStructure(typeOriginContractInfo.fromPartial({})),
						CollectionOwnerSignature: getStructure(typeCollectionOwnerSignature.fromPartial({})),
						MintRequest: getStructure(typeMintRequest.fromPartial({})),
						Trait: getStructure(typeTrait.fromPartial({})),
						OracleConfig: getStructure(typeOracleConfig.fromPartial({})),
						Params: getStructure(typeParams.fromPartial({})),
						NftOriginData: getStructure(typeNftOriginData.fromPartial({})),
						DataHash: getStructure(typeDataHash.fromPartial({})),
						SyncActionSigner: getStructure(typeSyncActionSigner.fromPartial({})),
						ParameterSyncSignerByOracle: getStructure(typeParameterSyncSignerByOracle.fromPartial({})),
						ContractInfoHash: getStructure(typeContractInfoHash.fromPartial({})),
						
		};
		client.on('signer-changed',(signer) => {			
		 this.updateTX(client);
		})
	}
	updateTX(client: IgniteClient) {
    const methods = txClient({
        signer: client.signer,
        addr: client.env.rpcURL,
        prefix: client.env.prefix ?? "cosmos",
    })
	
    this.tx = methods;
    for (let m in methods) {
        this.tx[m] = methods[m].bind(this.tx);
    }
	}
};

const IgntModule = (test: IgniteClient) => {
	return {
		module: {
			SixprotocolNftoracle: new SDKModule(test)
		},
		registry: msgTypes
  }
}
export default IgntModule;