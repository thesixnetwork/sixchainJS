// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: sixprotocol/nftoracle/action_signer.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "../../google/protobuf/timestamp";

export const protobufPackage = "sixprotocol.nftoracle";

export enum CreationFlow {
  ORACLE = 0,
  INTERNAL_OWNER = 1,
  UNRECOGNIZED = -1,
}

export function creationFlowFromJSON(object: any): CreationFlow {
  switch (object) {
    case 0:
    case "ORACLE":
      return CreationFlow.ORACLE;
    case 1:
    case "INTERNAL_OWNER":
      return CreationFlow.INTERNAL_OWNER;
    case -1:
    case "UNRECOGNIZED":
    default:
      return CreationFlow.UNRECOGNIZED;
  }
}

export function creationFlowToJSON(object: CreationFlow): string {
  switch (object) {
    case CreationFlow.ORACLE:
      return "ORACLE";
    case CreationFlow.INTERNAL_OWNER:
      return "INTERNAL_OWNER";
    case CreationFlow.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface ActionSigner {
  actorAddress: string;
  ownerAddress: string;
  createdAt: Date | undefined;
  expiredAt: Date | undefined;
  creator: string;
  creationFlow: CreationFlow;
}

export interface SetSignerSignature {
  signature: string;
  message: string;
}

export interface SetSignerParams {
  ownerAddress: string;
  actorAddress: string;
  expiredAt: Date | undefined;
}

function createBaseActionSigner(): ActionSigner {
  return {
    actorAddress: "",
    ownerAddress: "",
    createdAt: undefined,
    expiredAt: undefined,
    creator: "",
    creationFlow: 0,
  };
}

export const ActionSigner: MessageFns<ActionSigner> = {
  encode(message: ActionSigner, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.actorAddress !== "") {
      writer.uint32(10).string(message.actorAddress);
    }
    if (message.ownerAddress !== "") {
      writer.uint32(18).string(message.ownerAddress);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(26).fork()).join();
    }
    if (message.expiredAt !== undefined) {
      Timestamp.encode(toTimestamp(message.expiredAt), writer.uint32(34).fork()).join();
    }
    if (message.creator !== "") {
      writer.uint32(42).string(message.creator);
    }
    if (message.creationFlow !== 0) {
      writer.uint32(48).int32(message.creationFlow);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ActionSigner {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseActionSigner();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.actorAddress = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.ownerAddress = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.expiredAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.creationFlow = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ActionSigner {
    return {
      actorAddress: isSet(object.actorAddress) ? globalThis.String(object.actorAddress) : "",
      ownerAddress: isSet(object.ownerAddress) ? globalThis.String(object.ownerAddress) : "",
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      expiredAt: isSet(object.expiredAt) ? fromJsonTimestamp(object.expiredAt) : undefined,
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      creationFlow: isSet(object.creationFlow) ? creationFlowFromJSON(object.creationFlow) : 0,
    };
  },

  toJSON(message: ActionSigner): unknown {
    const obj: any = {};
    if (message.actorAddress !== "") {
      obj.actorAddress = message.actorAddress;
    }
    if (message.ownerAddress !== "") {
      obj.ownerAddress = message.ownerAddress;
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    if (message.expiredAt !== undefined) {
      obj.expiredAt = message.expiredAt.toISOString();
    }
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.creationFlow !== 0) {
      obj.creationFlow = creationFlowToJSON(message.creationFlow);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ActionSigner>, I>>(base?: I): ActionSigner {
    return ActionSigner.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ActionSigner>, I>>(object: I): ActionSigner {
    const message = createBaseActionSigner();
    message.actorAddress = object.actorAddress ?? "";
    message.ownerAddress = object.ownerAddress ?? "";
    message.createdAt = object.createdAt ?? undefined;
    message.expiredAt = object.expiredAt ?? undefined;
    message.creator = object.creator ?? "";
    message.creationFlow = object.creationFlow ?? 0;
    return message;
  },
};

function createBaseSetSignerSignature(): SetSignerSignature {
  return { signature: "", message: "" };
}

export const SetSignerSignature: MessageFns<SetSignerSignature> = {
  encode(message: SetSignerSignature, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.signature !== "") {
      writer.uint32(10).string(message.signature);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetSignerSignature {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetSignerSignature();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.signature = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetSignerSignature {
    return {
      signature: isSet(object.signature) ? globalThis.String(object.signature) : "",
      message: isSet(object.message) ? globalThis.String(object.message) : "",
    };
  },

  toJSON(message: SetSignerSignature): unknown {
    const obj: any = {};
    if (message.signature !== "") {
      obj.signature = message.signature;
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetSignerSignature>, I>>(base?: I): SetSignerSignature {
    return SetSignerSignature.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetSignerSignature>, I>>(object: I): SetSignerSignature {
    const message = createBaseSetSignerSignature();
    message.signature = object.signature ?? "";
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseSetSignerParams(): SetSignerParams {
  return { ownerAddress: "", actorAddress: "", expiredAt: undefined };
}

export const SetSignerParams: MessageFns<SetSignerParams> = {
  encode(message: SetSignerParams, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.ownerAddress !== "") {
      writer.uint32(10).string(message.ownerAddress);
    }
    if (message.actorAddress !== "") {
      writer.uint32(18).string(message.actorAddress);
    }
    if (message.expiredAt !== undefined) {
      Timestamp.encode(toTimestamp(message.expiredAt), writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetSignerParams {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetSignerParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.ownerAddress = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.actorAddress = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.expiredAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetSignerParams {
    return {
      ownerAddress: isSet(object.ownerAddress) ? globalThis.String(object.ownerAddress) : "",
      actorAddress: isSet(object.actorAddress) ? globalThis.String(object.actorAddress) : "",
      expiredAt: isSet(object.expiredAt) ? fromJsonTimestamp(object.expiredAt) : undefined,
    };
  },

  toJSON(message: SetSignerParams): unknown {
    const obj: any = {};
    if (message.ownerAddress !== "") {
      obj.ownerAddress = message.ownerAddress;
    }
    if (message.actorAddress !== "") {
      obj.actorAddress = message.actorAddress;
    }
    if (message.expiredAt !== undefined) {
      obj.expiredAt = message.expiredAt.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetSignerParams>, I>>(base?: I): SetSignerParams {
    return SetSignerParams.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetSignerParams>, I>>(object: I): SetSignerParams {
    const message = createBaseSetSignerParams();
    message.ownerAddress = object.ownerAddress ?? "";
    message.actorAddress = object.actorAddress ?? "";
    message.expiredAt = object.expiredAt ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
