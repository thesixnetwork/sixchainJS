// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: sixprotocol/nftoracle/genesis.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { ActionOracleRequest } from "./action_request";
import { ActionSigner } from "./action_signer";
import { ActionSignerConfig } from "./action_signer_config";
import { BindedSigner } from "./binded_signer";
import { CollectionOwnerRequest } from "./collection_owner_request";
import { MintRequest } from "./mint_request";
import { OracleConfig } from "./oracle_config";
import { Params } from "./params";
import { SyncActionSigner } from "./sync_action_signer";

export const protobufPackage = "sixprotocol.nftoracle";

/** GenesisState defines the nftoracle module's genesis state. */
export interface GenesisState {
  /** params defines all the parameters of the module. */
  params: Params | undefined;
  mintRequestList: MintRequest[];
  mintRequestCount: number;
  actionRequestList: ActionOracleRequest[];
  actionRequestCount: number;
  collectionOwnerRequestList: CollectionOwnerRequest[];
  collectionOwnerRequestCount: number;
  oracleConfig: OracleConfig | undefined;
  actionSignerList: ActionSigner[];
  bindedSignerList: BindedSigner[];
  actionSignerConfigList: ActionSignerConfig[];
  syncActionSignerList: SyncActionSigner[];
  syncActionSignerCount: number;
}

function createBaseGenesisState(): GenesisState {
  return {
    params: undefined,
    mintRequestList: [],
    mintRequestCount: 0,
    actionRequestList: [],
    actionRequestCount: 0,
    collectionOwnerRequestList: [],
    collectionOwnerRequestCount: 0,
    oracleConfig: undefined,
    actionSignerList: [],
    bindedSignerList: [],
    actionSignerConfigList: [],
    syncActionSignerList: [],
    syncActionSignerCount: 0,
  };
}

export const GenesisState: MessageFns<GenesisState> = {
  encode(message: GenesisState, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(10).fork()).join();
    }
    for (const v of message.mintRequestList) {
      MintRequest.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.mintRequestCount !== 0) {
      writer.uint32(24).uint64(message.mintRequestCount);
    }
    for (const v of message.actionRequestList) {
      ActionOracleRequest.encode(v!, writer.uint32(34).fork()).join();
    }
    if (message.actionRequestCount !== 0) {
      writer.uint32(40).uint64(message.actionRequestCount);
    }
    for (const v of message.collectionOwnerRequestList) {
      CollectionOwnerRequest.encode(v!, writer.uint32(50).fork()).join();
    }
    if (message.collectionOwnerRequestCount !== 0) {
      writer.uint32(56).uint64(message.collectionOwnerRequestCount);
    }
    if (message.oracleConfig !== undefined) {
      OracleConfig.encode(message.oracleConfig, writer.uint32(66).fork()).join();
    }
    for (const v of message.actionSignerList) {
      ActionSigner.encode(v!, writer.uint32(74).fork()).join();
    }
    for (const v of message.bindedSignerList) {
      BindedSigner.encode(v!, writer.uint32(82).fork()).join();
    }
    for (const v of message.actionSignerConfigList) {
      ActionSignerConfig.encode(v!, writer.uint32(106).fork()).join();
    }
    for (const v of message.syncActionSignerList) {
      SyncActionSigner.encode(v!, writer.uint32(114).fork()).join();
    }
    if (message.syncActionSignerCount !== 0) {
      writer.uint32(120).uint64(message.syncActionSignerCount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenesisState {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenesisState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.mintRequestList.push(MintRequest.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.mintRequestCount = longToNumber(reader.uint64());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.actionRequestList.push(ActionOracleRequest.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.actionRequestCount = longToNumber(reader.uint64());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.collectionOwnerRequestList.push(CollectionOwnerRequest.decode(reader, reader.uint32()));
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.collectionOwnerRequestCount = longToNumber(reader.uint64());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.oracleConfig = OracleConfig.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.actionSignerList.push(ActionSigner.decode(reader, reader.uint32()));
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.bindedSignerList.push(BindedSigner.decode(reader, reader.uint32()));
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.actionSignerConfigList.push(ActionSignerConfig.decode(reader, reader.uint32()));
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.syncActionSignerList.push(SyncActionSigner.decode(reader, reader.uint32()));
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.syncActionSignerCount = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenesisState {
    return {
      params: isSet(object.params) ? Params.fromJSON(object.params) : undefined,
      mintRequestList: globalThis.Array.isArray(object?.mintRequestList)
        ? object.mintRequestList.map((e: any) => MintRequest.fromJSON(e))
        : [],
      mintRequestCount: isSet(object.mintRequestCount) ? globalThis.Number(object.mintRequestCount) : 0,
      actionRequestList: globalThis.Array.isArray(object?.actionRequestList)
        ? object.actionRequestList.map((e: any) => ActionOracleRequest.fromJSON(e))
        : [],
      actionRequestCount: isSet(object.actionRequestCount) ? globalThis.Number(object.actionRequestCount) : 0,
      collectionOwnerRequestList: globalThis.Array.isArray(object?.collectionOwnerRequestList)
        ? object.collectionOwnerRequestList.map((e: any) => CollectionOwnerRequest.fromJSON(e))
        : [],
      collectionOwnerRequestCount: isSet(object.collectionOwnerRequestCount)
        ? globalThis.Number(object.collectionOwnerRequestCount)
        : 0,
      oracleConfig: isSet(object.oracleConfig) ? OracleConfig.fromJSON(object.oracleConfig) : undefined,
      actionSignerList: globalThis.Array.isArray(object?.actionSignerList)
        ? object.actionSignerList.map((e: any) => ActionSigner.fromJSON(e))
        : [],
      bindedSignerList: globalThis.Array.isArray(object?.bindedSignerList)
        ? object.bindedSignerList.map((e: any) => BindedSigner.fromJSON(e))
        : [],
      actionSignerConfigList: globalThis.Array.isArray(object?.actionSignerConfigList)
        ? object.actionSignerConfigList.map((e: any) => ActionSignerConfig.fromJSON(e))
        : [],
      syncActionSignerList: globalThis.Array.isArray(object?.syncActionSignerList)
        ? object.syncActionSignerList.map((e: any) => SyncActionSigner.fromJSON(e))
        : [],
      syncActionSignerCount: isSet(object.syncActionSignerCount) ? globalThis.Number(object.syncActionSignerCount) : 0,
    };
  },

  toJSON(message: GenesisState): unknown {
    const obj: any = {};
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    if (message.mintRequestList?.length) {
      obj.mintRequestList = message.mintRequestList.map((e) => MintRequest.toJSON(e));
    }
    if (message.mintRequestCount !== 0) {
      obj.mintRequestCount = Math.round(message.mintRequestCount);
    }
    if (message.actionRequestList?.length) {
      obj.actionRequestList = message.actionRequestList.map((e) => ActionOracleRequest.toJSON(e));
    }
    if (message.actionRequestCount !== 0) {
      obj.actionRequestCount = Math.round(message.actionRequestCount);
    }
    if (message.collectionOwnerRequestList?.length) {
      obj.collectionOwnerRequestList = message.collectionOwnerRequestList.map((e) => CollectionOwnerRequest.toJSON(e));
    }
    if (message.collectionOwnerRequestCount !== 0) {
      obj.collectionOwnerRequestCount = Math.round(message.collectionOwnerRequestCount);
    }
    if (message.oracleConfig !== undefined) {
      obj.oracleConfig = OracleConfig.toJSON(message.oracleConfig);
    }
    if (message.actionSignerList?.length) {
      obj.actionSignerList = message.actionSignerList.map((e) => ActionSigner.toJSON(e));
    }
    if (message.bindedSignerList?.length) {
      obj.bindedSignerList = message.bindedSignerList.map((e) => BindedSigner.toJSON(e));
    }
    if (message.actionSignerConfigList?.length) {
      obj.actionSignerConfigList = message.actionSignerConfigList.map((e) => ActionSignerConfig.toJSON(e));
    }
    if (message.syncActionSignerList?.length) {
      obj.syncActionSignerList = message.syncActionSignerList.map((e) => SyncActionSigner.toJSON(e));
    }
    if (message.syncActionSignerCount !== 0) {
      obj.syncActionSignerCount = Math.round(message.syncActionSignerCount);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GenesisState>, I>>(base?: I): GenesisState {
    return GenesisState.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GenesisState>, I>>(object: I): GenesisState {
    const message = createBaseGenesisState();
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    message.mintRequestList = object.mintRequestList?.map((e) => MintRequest.fromPartial(e)) || [];
    message.mintRequestCount = object.mintRequestCount ?? 0;
    message.actionRequestList = object.actionRequestList?.map((e) => ActionOracleRequest.fromPartial(e)) || [];
    message.actionRequestCount = object.actionRequestCount ?? 0;
    message.collectionOwnerRequestList =
      object.collectionOwnerRequestList?.map((e) => CollectionOwnerRequest.fromPartial(e)) || [];
    message.collectionOwnerRequestCount = object.collectionOwnerRequestCount ?? 0;
    message.oracleConfig = (object.oracleConfig !== undefined && object.oracleConfig !== null)
      ? OracleConfig.fromPartial(object.oracleConfig)
      : undefined;
    message.actionSignerList = object.actionSignerList?.map((e) => ActionSigner.fromPartial(e)) || [];
    message.bindedSignerList = object.bindedSignerList?.map((e) => BindedSigner.fromPartial(e)) || [];
    message.actionSignerConfigList = object.actionSignerConfigList?.map((e) => ActionSignerConfig.fromPartial(e)) || [];
    message.syncActionSignerList = object.syncActionSignerList?.map((e) => SyncActionSigner.fromPartial(e)) || [];
    message.syncActionSignerCount = object.syncActionSignerCount ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
