// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: sixprotocol/nftoracle/request.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Trait } from "./opensea";

export const protobufPackage = "sixprotocol.nftoracle";

export enum RequestStatus {
  PENDING = 0,
  SUCCESS_WITH_CONSENSUS = 1,
  FAILED_WITHOUT_CONSENSUS = 2,
  EXPIRED = 3,
  FAILED_ON_EXECUTION = 4,
  FAILED_REJECT_BY_CONSENSUS = 5,
  UNRECOGNIZED = -1,
}

export function requestStatusFromJSON(object: any): RequestStatus {
  switch (object) {
    case 0:
    case "PENDING":
      return RequestStatus.PENDING;
    case 1:
    case "SUCCESS_WITH_CONSENSUS":
      return RequestStatus.SUCCESS_WITH_CONSENSUS;
    case 2:
    case "FAILED_WITHOUT_CONSENSUS":
      return RequestStatus.FAILED_WITHOUT_CONSENSUS;
    case 3:
    case "EXPIRED":
      return RequestStatus.EXPIRED;
    case 4:
    case "FAILED_ON_EXECUTION":
      return RequestStatus.FAILED_ON_EXECUTION;
    case 5:
    case "FAILED_REJECT_BY_CONSENSUS":
      return RequestStatus.FAILED_REJECT_BY_CONSENSUS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return RequestStatus.UNRECOGNIZED;
  }
}

export function requestStatusToJSON(object: RequestStatus): string {
  switch (object) {
    case RequestStatus.PENDING:
      return "PENDING";
    case RequestStatus.SUCCESS_WITH_CONSENSUS:
      return "SUCCESS_WITH_CONSENSUS";
    case RequestStatus.FAILED_WITHOUT_CONSENSUS:
      return "FAILED_WITHOUT_CONSENSUS";
    case RequestStatus.EXPIRED:
      return "EXPIRED";
    case RequestStatus.FAILED_ON_EXECUTION:
      return "FAILED_ON_EXECUTION";
    case RequestStatus.FAILED_REJECT_BY_CONSENSUS:
      return "FAILED_REJECT_BY_CONSENSUS";
    case RequestStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface NftOriginData {
  image: string;
  holderAddress: string;
  traits: Trait[];
}

export interface DataHash {
  originData: NftOriginData | undefined;
  hash: Uint8Array;
  confirmers: string[];
}

function createBaseNftOriginData(): NftOriginData {
  return { image: "", holderAddress: "", traits: [] };
}

export const NftOriginData: MessageFns<NftOriginData> = {
  encode(message: NftOriginData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.image !== "") {
      writer.uint32(10).string(message.image);
    }
    if (message.holderAddress !== "") {
      writer.uint32(18).string(message.holderAddress);
    }
    for (const v of message.traits) {
      Trait.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NftOriginData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNftOriginData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.image = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.holderAddress = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.traits.push(Trait.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NftOriginData {
    return {
      image: isSet(object.image) ? globalThis.String(object.image) : "",
      holderAddress: isSet(object.holderAddress) ? globalThis.String(object.holderAddress) : "",
      traits: globalThis.Array.isArray(object?.traits) ? object.traits.map((e: any) => Trait.fromJSON(e)) : [],
    };
  },

  toJSON(message: NftOriginData): unknown {
    const obj: any = {};
    if (message.image !== "") {
      obj.image = message.image;
    }
    if (message.holderAddress !== "") {
      obj.holderAddress = message.holderAddress;
    }
    if (message.traits?.length) {
      obj.traits = message.traits.map((e) => Trait.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<NftOriginData>, I>>(base?: I): NftOriginData {
    return NftOriginData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<NftOriginData>, I>>(object: I): NftOriginData {
    const message = createBaseNftOriginData();
    message.image = object.image ?? "";
    message.holderAddress = object.holderAddress ?? "";
    message.traits = object.traits?.map((e) => Trait.fromPartial(e)) || [];
    return message;
  },
};

function createBaseDataHash(): DataHash {
  return { originData: undefined, hash: new Uint8Array(0), confirmers: [] };
}

export const DataHash: MessageFns<DataHash> = {
  encode(message: DataHash, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.originData !== undefined) {
      NftOriginData.encode(message.originData, writer.uint32(10).fork()).join();
    }
    if (message.hash.length !== 0) {
      writer.uint32(18).bytes(message.hash);
    }
    for (const v of message.confirmers) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DataHash {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataHash();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.originData = NftOriginData.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.hash = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.confirmers.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataHash {
    return {
      originData: isSet(object.originData) ? NftOriginData.fromJSON(object.originData) : undefined,
      hash: isSet(object.hash) ? bytesFromBase64(object.hash) : new Uint8Array(0),
      confirmers: globalThis.Array.isArray(object?.confirmers)
        ? object.confirmers.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: DataHash): unknown {
    const obj: any = {};
    if (message.originData !== undefined) {
      obj.originData = NftOriginData.toJSON(message.originData);
    }
    if (message.hash.length !== 0) {
      obj.hash = base64FromBytes(message.hash);
    }
    if (message.confirmers?.length) {
      obj.confirmers = message.confirmers;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DataHash>, I>>(base?: I): DataHash {
    return DataHash.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DataHash>, I>>(object: I): DataHash {
    const message = createBaseDataHash();
    message.originData = (object.originData !== undefined && object.originData !== null)
      ? NftOriginData.fromPartial(object.originData)
      : undefined;
    message.hash = object.hash ?? new Uint8Array(0);
    message.confirmers = object.confirmers?.map((e) => e) || [];
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
