// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: sixprotocol/nftoracle/mint_request.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "../../google/protobuf/timestamp";
import { DataHash, RequestStatus, requestStatusFromJSON, requestStatusToJSON } from "./request";

export const protobufPackage = "sixprotocol.nftoracle";

export interface MintRequest {
  id: number;
  nftSchemaCode: string;
  tokenId: string;
  requiredConfirm: number;
  status: RequestStatus;
  currentConfirm: number;
  confirmers: string[];
  /** NftOriginData nft_origin_data = 8; */
  createdAt: Date | undefined;
  validUntil: Date | undefined;
  dataHashes: DataHash[];
  expiredHeight: number;
}

function createBaseMintRequest(): MintRequest {
  return {
    id: 0,
    nftSchemaCode: "",
    tokenId: "",
    requiredConfirm: 0,
    status: 0,
    currentConfirm: 0,
    confirmers: [],
    createdAt: undefined,
    validUntil: undefined,
    dataHashes: [],
    expiredHeight: 0,
  };
}

export const MintRequest: MessageFns<MintRequest> = {
  encode(message: MintRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).uint64(message.id);
    }
    if (message.nftSchemaCode !== "") {
      writer.uint32(18).string(message.nftSchemaCode);
    }
    if (message.tokenId !== "") {
      writer.uint32(26).string(message.tokenId);
    }
    if (message.requiredConfirm !== 0) {
      writer.uint32(32).uint64(message.requiredConfirm);
    }
    if (message.status !== 0) {
      writer.uint32(40).int32(message.status);
    }
    if (message.currentConfirm !== 0) {
      writer.uint32(48).uint64(message.currentConfirm);
    }
    for (const v of message.confirmers) {
      writer.uint32(58).string(v!);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(66).fork()).join();
    }
    if (message.validUntil !== undefined) {
      Timestamp.encode(toTimestamp(message.validUntil), writer.uint32(74).fork()).join();
    }
    for (const v of message.dataHashes) {
      DataHash.encode(v!, writer.uint32(82).fork()).join();
    }
    if (message.expiredHeight !== 0) {
      writer.uint32(88).int64(message.expiredHeight);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MintRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMintRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.nftSchemaCode = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.tokenId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.requiredConfirm = longToNumber(reader.uint64());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.currentConfirm = longToNumber(reader.uint64());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.confirmers.push(reader.string());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.validUntil = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.dataHashes.push(DataHash.decode(reader, reader.uint32()));
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.expiredHeight = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MintRequest {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      nftSchemaCode: isSet(object.nftSchemaCode) ? globalThis.String(object.nftSchemaCode) : "",
      tokenId: isSet(object.tokenId) ? globalThis.String(object.tokenId) : "",
      requiredConfirm: isSet(object.requiredConfirm) ? globalThis.Number(object.requiredConfirm) : 0,
      status: isSet(object.status) ? requestStatusFromJSON(object.status) : 0,
      currentConfirm: isSet(object.currentConfirm) ? globalThis.Number(object.currentConfirm) : 0,
      confirmers: globalThis.Array.isArray(object?.confirmers)
        ? object.confirmers.map((e: any) => globalThis.String(e))
        : [],
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      validUntil: isSet(object.validUntil) ? fromJsonTimestamp(object.validUntil) : undefined,
      dataHashes: globalThis.Array.isArray(object?.dataHashes)
        ? object.dataHashes.map((e: any) => DataHash.fromJSON(e))
        : [],
      expiredHeight: isSet(object.expiredHeight) ? globalThis.Number(object.expiredHeight) : 0,
    };
  },

  toJSON(message: MintRequest): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.nftSchemaCode !== "") {
      obj.nftSchemaCode = message.nftSchemaCode;
    }
    if (message.tokenId !== "") {
      obj.tokenId = message.tokenId;
    }
    if (message.requiredConfirm !== 0) {
      obj.requiredConfirm = Math.round(message.requiredConfirm);
    }
    if (message.status !== 0) {
      obj.status = requestStatusToJSON(message.status);
    }
    if (message.currentConfirm !== 0) {
      obj.currentConfirm = Math.round(message.currentConfirm);
    }
    if (message.confirmers?.length) {
      obj.confirmers = message.confirmers;
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    if (message.validUntil !== undefined) {
      obj.validUntil = message.validUntil.toISOString();
    }
    if (message.dataHashes?.length) {
      obj.dataHashes = message.dataHashes.map((e) => DataHash.toJSON(e));
    }
    if (message.expiredHeight !== 0) {
      obj.expiredHeight = Math.round(message.expiredHeight);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MintRequest>, I>>(base?: I): MintRequest {
    return MintRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MintRequest>, I>>(object: I): MintRequest {
    const message = createBaseMintRequest();
    message.id = object.id ?? 0;
    message.nftSchemaCode = object.nftSchemaCode ?? "";
    message.tokenId = object.tokenId ?? "";
    message.requiredConfirm = object.requiredConfirm ?? 0;
    message.status = object.status ?? 0;
    message.currentConfirm = object.currentConfirm ?? 0;
    message.confirmers = object.confirmers?.map((e) => e) || [];
    message.createdAt = object.createdAt ?? undefined;
    message.validUntil = object.validUntil ?? undefined;
    message.dataHashes = object.dataHashes?.map((e) => DataHash.fromPartial(e)) || [];
    message.expiredHeight = object.expiredHeight ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
