// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: sixprotocol/nftoracle/query.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { PageRequest, PageResponse } from "../../cosmos/base/query/v1beta1/pagination";
import { ActionOracleRequest } from "./action_request";
import { ActionSigner } from "./action_signer";
import { ActionSignerConfig } from "./action_signer_config";
import { BindedSigner } from "./binded_signer";
import { CollectionOwnerRequest } from "./collection_owner_request";
import { MintRequest } from "./mint_request";
import { OracleConfig } from "./oracle_config";
import { Params } from "./params";
import { SyncActionSigner } from "./sync_action_signer";

export const protobufPackage = "sixprotocol.nftoracle";

/** QueryParamsRequest is request type for the Query/Params RPC method. */
export interface QueryParamsRequest {
}

/** QueryParamsResponse is response type for the Query/Params RPC method. */
export interface QueryParamsResponse {
  /** params holds all the parameters of this module. */
  params: Params | undefined;
}

export interface QueryGetMintRequestRequest {
  id: number;
}

export interface QueryGetMintRequestResponse {
  MintRequest: MintRequest | undefined;
}

export interface QueryAllMintRequestRequest {
  pagination: PageRequest | undefined;
}

export interface QueryAllMintRequestResponse {
  MintRequest: MintRequest[];
  pagination: PageResponse | undefined;
}

export interface QueryGetActionRequestRequest {
  id: number;
}

export interface QueryGetActionRequestResponse {
  ActionOracleRequest: ActionOracleRequest | undefined;
}

export interface QueryAllActionRequestRequest {
  pagination: PageRequest | undefined;
}

export interface QueryAllActionRequestResponse {
  ActionOracleRequest: ActionOracleRequest[];
  pagination: PageResponse | undefined;
}

export interface QueryGetCollectionOwnerRequestRequest {
  id: number;
}

export interface QueryGetCollectionOwnerRequestResponse {
  CollectionOwnerRequest: CollectionOwnerRequest | undefined;
}

export interface QueryAllCollectionOwnerRequestRequest {
  pagination: PageRequest | undefined;
}

export interface QueryAllCollectionOwnerRequestResponse {
  CollectionOwnerRequest: CollectionOwnerRequest[];
  pagination: PageResponse | undefined;
}

export interface QueryGetOracleConfigRequest {
}

export interface QueryGetOracleConfigResponse {
  OracleConfig: OracleConfig | undefined;
}

export interface QueryGetActionSignerRequest {
  actorAddress: string;
  ownerAddress: string;
}

export interface QueryGetActionSignerResponse {
  actionSigner: ActionSigner | undefined;
}

export interface QueryAllActionSignerRequest {
  pagination: PageRequest | undefined;
}

export interface QueryAllActionSignerResponse {
  actionSigner: ActionSigner[];
  pagination: PageResponse | undefined;
}

export interface QueryGetBindedSignerRequest {
  ownerAddress: string;
}

export interface QueryGetBindedSignerResponse {
  bindedSigner: BindedSigner | undefined;
}

export interface QueryGetActionSignerConfigRequest {
  chain: string;
}

export interface QueryGetActionSignerConfigResponse {
  actionSignerConfig: ActionSignerConfig | undefined;
}

export interface QueryAllActionSignerConfigRequest {
  pagination: PageRequest | undefined;
}

export interface QueryAllActionSignerConfigResponse {
  actionSignerConfig: ActionSignerConfig[];
  pagination: PageResponse | undefined;
}

export interface QueryGetSyncActionSignerRequest {
  id: number;
}

export interface QueryGetSyncActionSignerResponse {
  SyncActionSigner: SyncActionSigner | undefined;
}

export interface QueryAllSyncActionSignerRequest {
  pagination: PageRequest | undefined;
}

export interface QueryAllSyncActionSignerResponse {
  SyncActionSigner: SyncActionSigner[];
  pagination: PageResponse | undefined;
}

function createBaseQueryParamsRequest(): QueryParamsRequest {
  return {};
}

export const QueryParamsRequest: MessageFns<QueryParamsRequest> = {
  encode(_: QueryParamsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParamsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryParamsRequest {
    return {};
  },

  toJSON(_: QueryParamsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryParamsRequest>, I>>(base?: I): QueryParamsRequest {
    return QueryParamsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryParamsRequest>, I>>(_: I): QueryParamsRequest {
    const message = createBaseQueryParamsRequest();
    return message;
  },
};

function createBaseQueryParamsResponse(): QueryParamsResponse {
  return { params: undefined };
}

export const QueryParamsResponse: MessageFns<QueryParamsResponse> = {
  encode(message: QueryParamsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParamsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryParamsResponse {
    return { params: isSet(object.params) ? Params.fromJSON(object.params) : undefined };
  },

  toJSON(message: QueryParamsResponse): unknown {
    const obj: any = {};
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryParamsResponse>, I>>(base?: I): QueryParamsResponse {
    return QueryParamsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryParamsResponse>, I>>(object: I): QueryParamsResponse {
    const message = createBaseQueryParamsResponse();
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseQueryGetMintRequestRequest(): QueryGetMintRequestRequest {
  return { id: 0 };
}

export const QueryGetMintRequestRequest: MessageFns<QueryGetMintRequestRequest> = {
  encode(message: QueryGetMintRequestRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).uint64(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetMintRequestRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetMintRequestRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetMintRequestRequest {
    return { id: isSet(object.id) ? globalThis.Number(object.id) : 0 };
  },

  toJSON(message: QueryGetMintRequestRequest): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetMintRequestRequest>, I>>(base?: I): QueryGetMintRequestRequest {
    return QueryGetMintRequestRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetMintRequestRequest>, I>>(object: I): QueryGetMintRequestRequest {
    const message = createBaseQueryGetMintRequestRequest();
    message.id = object.id ?? 0;
    return message;
  },
};

function createBaseQueryGetMintRequestResponse(): QueryGetMintRequestResponse {
  return { MintRequest: undefined };
}

export const QueryGetMintRequestResponse: MessageFns<QueryGetMintRequestResponse> = {
  encode(message: QueryGetMintRequestResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.MintRequest !== undefined) {
      MintRequest.encode(message.MintRequest, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetMintRequestResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetMintRequestResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.MintRequest = MintRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetMintRequestResponse {
    return { MintRequest: isSet(object.MintRequest) ? MintRequest.fromJSON(object.MintRequest) : undefined };
  },

  toJSON(message: QueryGetMintRequestResponse): unknown {
    const obj: any = {};
    if (message.MintRequest !== undefined) {
      obj.MintRequest = MintRequest.toJSON(message.MintRequest);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetMintRequestResponse>, I>>(base?: I): QueryGetMintRequestResponse {
    return QueryGetMintRequestResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetMintRequestResponse>, I>>(object: I): QueryGetMintRequestResponse {
    const message = createBaseQueryGetMintRequestResponse();
    message.MintRequest = (object.MintRequest !== undefined && object.MintRequest !== null)
      ? MintRequest.fromPartial(object.MintRequest)
      : undefined;
    return message;
  },
};

function createBaseQueryAllMintRequestRequest(): QueryAllMintRequestRequest {
  return { pagination: undefined };
}

export const QueryAllMintRequestRequest: MessageFns<QueryAllMintRequestRequest> = {
  encode(message: QueryAllMintRequestRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllMintRequestRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllMintRequestRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllMintRequestRequest {
    return { pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined };
  },

  toJSON(message: QueryAllMintRequestRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllMintRequestRequest>, I>>(base?: I): QueryAllMintRequestRequest {
    return QueryAllMintRequestRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllMintRequestRequest>, I>>(object: I): QueryAllMintRequestRequest {
    const message = createBaseQueryAllMintRequestRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryAllMintRequestResponse(): QueryAllMintRequestResponse {
  return { MintRequest: [], pagination: undefined };
}

export const QueryAllMintRequestResponse: MessageFns<QueryAllMintRequestResponse> = {
  encode(message: QueryAllMintRequestResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.MintRequest) {
      MintRequest.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllMintRequestResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllMintRequestResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.MintRequest.push(MintRequest.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllMintRequestResponse {
    return {
      MintRequest: globalThis.Array.isArray(object?.MintRequest)
        ? object.MintRequest.map((e: any) => MintRequest.fromJSON(e))
        : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryAllMintRequestResponse): unknown {
    const obj: any = {};
    if (message.MintRequest?.length) {
      obj.MintRequest = message.MintRequest.map((e) => MintRequest.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllMintRequestResponse>, I>>(base?: I): QueryAllMintRequestResponse {
    return QueryAllMintRequestResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllMintRequestResponse>, I>>(object: I): QueryAllMintRequestResponse {
    const message = createBaseQueryAllMintRequestResponse();
    message.MintRequest = object.MintRequest?.map((e) => MintRequest.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryGetActionRequestRequest(): QueryGetActionRequestRequest {
  return { id: 0 };
}

export const QueryGetActionRequestRequest: MessageFns<QueryGetActionRequestRequest> = {
  encode(message: QueryGetActionRequestRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).uint64(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetActionRequestRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetActionRequestRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetActionRequestRequest {
    return { id: isSet(object.id) ? globalThis.Number(object.id) : 0 };
  },

  toJSON(message: QueryGetActionRequestRequest): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetActionRequestRequest>, I>>(base?: I): QueryGetActionRequestRequest {
    return QueryGetActionRequestRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetActionRequestRequest>, I>>(object: I): QueryGetActionRequestRequest {
    const message = createBaseQueryGetActionRequestRequest();
    message.id = object.id ?? 0;
    return message;
  },
};

function createBaseQueryGetActionRequestResponse(): QueryGetActionRequestResponse {
  return { ActionOracleRequest: undefined };
}

export const QueryGetActionRequestResponse: MessageFns<QueryGetActionRequestResponse> = {
  encode(message: QueryGetActionRequestResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.ActionOracleRequest !== undefined) {
      ActionOracleRequest.encode(message.ActionOracleRequest, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetActionRequestResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetActionRequestResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.ActionOracleRequest = ActionOracleRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetActionRequestResponse {
    return {
      ActionOracleRequest: isSet(object.ActionOracleRequest)
        ? ActionOracleRequest.fromJSON(object.ActionOracleRequest)
        : undefined,
    };
  },

  toJSON(message: QueryGetActionRequestResponse): unknown {
    const obj: any = {};
    if (message.ActionOracleRequest !== undefined) {
      obj.ActionOracleRequest = ActionOracleRequest.toJSON(message.ActionOracleRequest);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetActionRequestResponse>, I>>(base?: I): QueryGetActionRequestResponse {
    return QueryGetActionRequestResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetActionRequestResponse>, I>>(
    object: I,
  ): QueryGetActionRequestResponse {
    const message = createBaseQueryGetActionRequestResponse();
    message.ActionOracleRequest = (object.ActionOracleRequest !== undefined && object.ActionOracleRequest !== null)
      ? ActionOracleRequest.fromPartial(object.ActionOracleRequest)
      : undefined;
    return message;
  },
};

function createBaseQueryAllActionRequestRequest(): QueryAllActionRequestRequest {
  return { pagination: undefined };
}

export const QueryAllActionRequestRequest: MessageFns<QueryAllActionRequestRequest> = {
  encode(message: QueryAllActionRequestRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllActionRequestRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllActionRequestRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllActionRequestRequest {
    return { pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined };
  },

  toJSON(message: QueryAllActionRequestRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllActionRequestRequest>, I>>(base?: I): QueryAllActionRequestRequest {
    return QueryAllActionRequestRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllActionRequestRequest>, I>>(object: I): QueryAllActionRequestRequest {
    const message = createBaseQueryAllActionRequestRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryAllActionRequestResponse(): QueryAllActionRequestResponse {
  return { ActionOracleRequest: [], pagination: undefined };
}

export const QueryAllActionRequestResponse: MessageFns<QueryAllActionRequestResponse> = {
  encode(message: QueryAllActionRequestResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.ActionOracleRequest) {
      ActionOracleRequest.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllActionRequestResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllActionRequestResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.ActionOracleRequest.push(ActionOracleRequest.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllActionRequestResponse {
    return {
      ActionOracleRequest: globalThis.Array.isArray(object?.ActionOracleRequest)
        ? object.ActionOracleRequest.map((e: any) => ActionOracleRequest.fromJSON(e))
        : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryAllActionRequestResponse): unknown {
    const obj: any = {};
    if (message.ActionOracleRequest?.length) {
      obj.ActionOracleRequest = message.ActionOracleRequest.map((e) => ActionOracleRequest.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllActionRequestResponse>, I>>(base?: I): QueryAllActionRequestResponse {
    return QueryAllActionRequestResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllActionRequestResponse>, I>>(
    object: I,
  ): QueryAllActionRequestResponse {
    const message = createBaseQueryAllActionRequestResponse();
    message.ActionOracleRequest = object.ActionOracleRequest?.map((e) => ActionOracleRequest.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryGetCollectionOwnerRequestRequest(): QueryGetCollectionOwnerRequestRequest {
  return { id: 0 };
}

export const QueryGetCollectionOwnerRequestRequest: MessageFns<QueryGetCollectionOwnerRequestRequest> = {
  encode(message: QueryGetCollectionOwnerRequestRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).uint64(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetCollectionOwnerRequestRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetCollectionOwnerRequestRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetCollectionOwnerRequestRequest {
    return { id: isSet(object.id) ? globalThis.Number(object.id) : 0 };
  },

  toJSON(message: QueryGetCollectionOwnerRequestRequest): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetCollectionOwnerRequestRequest>, I>>(
    base?: I,
  ): QueryGetCollectionOwnerRequestRequest {
    return QueryGetCollectionOwnerRequestRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetCollectionOwnerRequestRequest>, I>>(
    object: I,
  ): QueryGetCollectionOwnerRequestRequest {
    const message = createBaseQueryGetCollectionOwnerRequestRequest();
    message.id = object.id ?? 0;
    return message;
  },
};

function createBaseQueryGetCollectionOwnerRequestResponse(): QueryGetCollectionOwnerRequestResponse {
  return { CollectionOwnerRequest: undefined };
}

export const QueryGetCollectionOwnerRequestResponse: MessageFns<QueryGetCollectionOwnerRequestResponse> = {
  encode(message: QueryGetCollectionOwnerRequestResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.CollectionOwnerRequest !== undefined) {
      CollectionOwnerRequest.encode(message.CollectionOwnerRequest, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetCollectionOwnerRequestResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetCollectionOwnerRequestResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.CollectionOwnerRequest = CollectionOwnerRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetCollectionOwnerRequestResponse {
    return {
      CollectionOwnerRequest: isSet(object.CollectionOwnerRequest)
        ? CollectionOwnerRequest.fromJSON(object.CollectionOwnerRequest)
        : undefined,
    };
  },

  toJSON(message: QueryGetCollectionOwnerRequestResponse): unknown {
    const obj: any = {};
    if (message.CollectionOwnerRequest !== undefined) {
      obj.CollectionOwnerRequest = CollectionOwnerRequest.toJSON(message.CollectionOwnerRequest);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetCollectionOwnerRequestResponse>, I>>(
    base?: I,
  ): QueryGetCollectionOwnerRequestResponse {
    return QueryGetCollectionOwnerRequestResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetCollectionOwnerRequestResponse>, I>>(
    object: I,
  ): QueryGetCollectionOwnerRequestResponse {
    const message = createBaseQueryGetCollectionOwnerRequestResponse();
    message.CollectionOwnerRequest =
      (object.CollectionOwnerRequest !== undefined && object.CollectionOwnerRequest !== null)
        ? CollectionOwnerRequest.fromPartial(object.CollectionOwnerRequest)
        : undefined;
    return message;
  },
};

function createBaseQueryAllCollectionOwnerRequestRequest(): QueryAllCollectionOwnerRequestRequest {
  return { pagination: undefined };
}

export const QueryAllCollectionOwnerRequestRequest: MessageFns<QueryAllCollectionOwnerRequestRequest> = {
  encode(message: QueryAllCollectionOwnerRequestRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllCollectionOwnerRequestRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllCollectionOwnerRequestRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllCollectionOwnerRequestRequest {
    return { pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined };
  },

  toJSON(message: QueryAllCollectionOwnerRequestRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllCollectionOwnerRequestRequest>, I>>(
    base?: I,
  ): QueryAllCollectionOwnerRequestRequest {
    return QueryAllCollectionOwnerRequestRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllCollectionOwnerRequestRequest>, I>>(
    object: I,
  ): QueryAllCollectionOwnerRequestRequest {
    const message = createBaseQueryAllCollectionOwnerRequestRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryAllCollectionOwnerRequestResponse(): QueryAllCollectionOwnerRequestResponse {
  return { CollectionOwnerRequest: [], pagination: undefined };
}

export const QueryAllCollectionOwnerRequestResponse: MessageFns<QueryAllCollectionOwnerRequestResponse> = {
  encode(message: QueryAllCollectionOwnerRequestResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.CollectionOwnerRequest) {
      CollectionOwnerRequest.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllCollectionOwnerRequestResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllCollectionOwnerRequestResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.CollectionOwnerRequest.push(CollectionOwnerRequest.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllCollectionOwnerRequestResponse {
    return {
      CollectionOwnerRequest: globalThis.Array.isArray(object?.CollectionOwnerRequest)
        ? object.CollectionOwnerRequest.map((e: any) => CollectionOwnerRequest.fromJSON(e))
        : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryAllCollectionOwnerRequestResponse): unknown {
    const obj: any = {};
    if (message.CollectionOwnerRequest?.length) {
      obj.CollectionOwnerRequest = message.CollectionOwnerRequest.map((e) => CollectionOwnerRequest.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllCollectionOwnerRequestResponse>, I>>(
    base?: I,
  ): QueryAllCollectionOwnerRequestResponse {
    return QueryAllCollectionOwnerRequestResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllCollectionOwnerRequestResponse>, I>>(
    object: I,
  ): QueryAllCollectionOwnerRequestResponse {
    const message = createBaseQueryAllCollectionOwnerRequestResponse();
    message.CollectionOwnerRequest = object.CollectionOwnerRequest?.map((e) => CollectionOwnerRequest.fromPartial(e)) ||
      [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryGetOracleConfigRequest(): QueryGetOracleConfigRequest {
  return {};
}

export const QueryGetOracleConfigRequest: MessageFns<QueryGetOracleConfigRequest> = {
  encode(_: QueryGetOracleConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetOracleConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetOracleConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryGetOracleConfigRequest {
    return {};
  },

  toJSON(_: QueryGetOracleConfigRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetOracleConfigRequest>, I>>(base?: I): QueryGetOracleConfigRequest {
    return QueryGetOracleConfigRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetOracleConfigRequest>, I>>(_: I): QueryGetOracleConfigRequest {
    const message = createBaseQueryGetOracleConfigRequest();
    return message;
  },
};

function createBaseQueryGetOracleConfigResponse(): QueryGetOracleConfigResponse {
  return { OracleConfig: undefined };
}

export const QueryGetOracleConfigResponse: MessageFns<QueryGetOracleConfigResponse> = {
  encode(message: QueryGetOracleConfigResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.OracleConfig !== undefined) {
      OracleConfig.encode(message.OracleConfig, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetOracleConfigResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetOracleConfigResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.OracleConfig = OracleConfig.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetOracleConfigResponse {
    return { OracleConfig: isSet(object.OracleConfig) ? OracleConfig.fromJSON(object.OracleConfig) : undefined };
  },

  toJSON(message: QueryGetOracleConfigResponse): unknown {
    const obj: any = {};
    if (message.OracleConfig !== undefined) {
      obj.OracleConfig = OracleConfig.toJSON(message.OracleConfig);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetOracleConfigResponse>, I>>(base?: I): QueryGetOracleConfigResponse {
    return QueryGetOracleConfigResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetOracleConfigResponse>, I>>(object: I): QueryGetOracleConfigResponse {
    const message = createBaseQueryGetOracleConfigResponse();
    message.OracleConfig = (object.OracleConfig !== undefined && object.OracleConfig !== null)
      ? OracleConfig.fromPartial(object.OracleConfig)
      : undefined;
    return message;
  },
};

function createBaseQueryGetActionSignerRequest(): QueryGetActionSignerRequest {
  return { actorAddress: "", ownerAddress: "" };
}

export const QueryGetActionSignerRequest: MessageFns<QueryGetActionSignerRequest> = {
  encode(message: QueryGetActionSignerRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.actorAddress !== "") {
      writer.uint32(10).string(message.actorAddress);
    }
    if (message.ownerAddress !== "") {
      writer.uint32(18).string(message.ownerAddress);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetActionSignerRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetActionSignerRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.actorAddress = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.ownerAddress = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetActionSignerRequest {
    return {
      actorAddress: isSet(object.actorAddress) ? globalThis.String(object.actorAddress) : "",
      ownerAddress: isSet(object.ownerAddress) ? globalThis.String(object.ownerAddress) : "",
    };
  },

  toJSON(message: QueryGetActionSignerRequest): unknown {
    const obj: any = {};
    if (message.actorAddress !== "") {
      obj.actorAddress = message.actorAddress;
    }
    if (message.ownerAddress !== "") {
      obj.ownerAddress = message.ownerAddress;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetActionSignerRequest>, I>>(base?: I): QueryGetActionSignerRequest {
    return QueryGetActionSignerRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetActionSignerRequest>, I>>(object: I): QueryGetActionSignerRequest {
    const message = createBaseQueryGetActionSignerRequest();
    message.actorAddress = object.actorAddress ?? "";
    message.ownerAddress = object.ownerAddress ?? "";
    return message;
  },
};

function createBaseQueryGetActionSignerResponse(): QueryGetActionSignerResponse {
  return { actionSigner: undefined };
}

export const QueryGetActionSignerResponse: MessageFns<QueryGetActionSignerResponse> = {
  encode(message: QueryGetActionSignerResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.actionSigner !== undefined) {
      ActionSigner.encode(message.actionSigner, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetActionSignerResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetActionSignerResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.actionSigner = ActionSigner.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetActionSignerResponse {
    return { actionSigner: isSet(object.actionSigner) ? ActionSigner.fromJSON(object.actionSigner) : undefined };
  },

  toJSON(message: QueryGetActionSignerResponse): unknown {
    const obj: any = {};
    if (message.actionSigner !== undefined) {
      obj.actionSigner = ActionSigner.toJSON(message.actionSigner);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetActionSignerResponse>, I>>(base?: I): QueryGetActionSignerResponse {
    return QueryGetActionSignerResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetActionSignerResponse>, I>>(object: I): QueryGetActionSignerResponse {
    const message = createBaseQueryGetActionSignerResponse();
    message.actionSigner = (object.actionSigner !== undefined && object.actionSigner !== null)
      ? ActionSigner.fromPartial(object.actionSigner)
      : undefined;
    return message;
  },
};

function createBaseQueryAllActionSignerRequest(): QueryAllActionSignerRequest {
  return { pagination: undefined };
}

export const QueryAllActionSignerRequest: MessageFns<QueryAllActionSignerRequest> = {
  encode(message: QueryAllActionSignerRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllActionSignerRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllActionSignerRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllActionSignerRequest {
    return { pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined };
  },

  toJSON(message: QueryAllActionSignerRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllActionSignerRequest>, I>>(base?: I): QueryAllActionSignerRequest {
    return QueryAllActionSignerRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllActionSignerRequest>, I>>(object: I): QueryAllActionSignerRequest {
    const message = createBaseQueryAllActionSignerRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryAllActionSignerResponse(): QueryAllActionSignerResponse {
  return { actionSigner: [], pagination: undefined };
}

export const QueryAllActionSignerResponse: MessageFns<QueryAllActionSignerResponse> = {
  encode(message: QueryAllActionSignerResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.actionSigner) {
      ActionSigner.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllActionSignerResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllActionSignerResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.actionSigner.push(ActionSigner.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllActionSignerResponse {
    return {
      actionSigner: globalThis.Array.isArray(object?.actionSigner)
        ? object.actionSigner.map((e: any) => ActionSigner.fromJSON(e))
        : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryAllActionSignerResponse): unknown {
    const obj: any = {};
    if (message.actionSigner?.length) {
      obj.actionSigner = message.actionSigner.map((e) => ActionSigner.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllActionSignerResponse>, I>>(base?: I): QueryAllActionSignerResponse {
    return QueryAllActionSignerResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllActionSignerResponse>, I>>(object: I): QueryAllActionSignerResponse {
    const message = createBaseQueryAllActionSignerResponse();
    message.actionSigner = object.actionSigner?.map((e) => ActionSigner.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryGetBindedSignerRequest(): QueryGetBindedSignerRequest {
  return { ownerAddress: "" };
}

export const QueryGetBindedSignerRequest: MessageFns<QueryGetBindedSignerRequest> = {
  encode(message: QueryGetBindedSignerRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.ownerAddress !== "") {
      writer.uint32(10).string(message.ownerAddress);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetBindedSignerRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetBindedSignerRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.ownerAddress = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetBindedSignerRequest {
    return { ownerAddress: isSet(object.ownerAddress) ? globalThis.String(object.ownerAddress) : "" };
  },

  toJSON(message: QueryGetBindedSignerRequest): unknown {
    const obj: any = {};
    if (message.ownerAddress !== "") {
      obj.ownerAddress = message.ownerAddress;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetBindedSignerRequest>, I>>(base?: I): QueryGetBindedSignerRequest {
    return QueryGetBindedSignerRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetBindedSignerRequest>, I>>(object: I): QueryGetBindedSignerRequest {
    const message = createBaseQueryGetBindedSignerRequest();
    message.ownerAddress = object.ownerAddress ?? "";
    return message;
  },
};

function createBaseQueryGetBindedSignerResponse(): QueryGetBindedSignerResponse {
  return { bindedSigner: undefined };
}

export const QueryGetBindedSignerResponse: MessageFns<QueryGetBindedSignerResponse> = {
  encode(message: QueryGetBindedSignerResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.bindedSigner !== undefined) {
      BindedSigner.encode(message.bindedSigner, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetBindedSignerResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetBindedSignerResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.bindedSigner = BindedSigner.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetBindedSignerResponse {
    return { bindedSigner: isSet(object.bindedSigner) ? BindedSigner.fromJSON(object.bindedSigner) : undefined };
  },

  toJSON(message: QueryGetBindedSignerResponse): unknown {
    const obj: any = {};
    if (message.bindedSigner !== undefined) {
      obj.bindedSigner = BindedSigner.toJSON(message.bindedSigner);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetBindedSignerResponse>, I>>(base?: I): QueryGetBindedSignerResponse {
    return QueryGetBindedSignerResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetBindedSignerResponse>, I>>(object: I): QueryGetBindedSignerResponse {
    const message = createBaseQueryGetBindedSignerResponse();
    message.bindedSigner = (object.bindedSigner !== undefined && object.bindedSigner !== null)
      ? BindedSigner.fromPartial(object.bindedSigner)
      : undefined;
    return message;
  },
};

function createBaseQueryGetActionSignerConfigRequest(): QueryGetActionSignerConfigRequest {
  return { chain: "" };
}

export const QueryGetActionSignerConfigRequest: MessageFns<QueryGetActionSignerConfigRequest> = {
  encode(message: QueryGetActionSignerConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.chain !== "") {
      writer.uint32(10).string(message.chain);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetActionSignerConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetActionSignerConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.chain = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetActionSignerConfigRequest {
    return { chain: isSet(object.chain) ? globalThis.String(object.chain) : "" };
  },

  toJSON(message: QueryGetActionSignerConfigRequest): unknown {
    const obj: any = {};
    if (message.chain !== "") {
      obj.chain = message.chain;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetActionSignerConfigRequest>, I>>(
    base?: I,
  ): QueryGetActionSignerConfigRequest {
    return QueryGetActionSignerConfigRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetActionSignerConfigRequest>, I>>(
    object: I,
  ): QueryGetActionSignerConfigRequest {
    const message = createBaseQueryGetActionSignerConfigRequest();
    message.chain = object.chain ?? "";
    return message;
  },
};

function createBaseQueryGetActionSignerConfigResponse(): QueryGetActionSignerConfigResponse {
  return { actionSignerConfig: undefined };
}

export const QueryGetActionSignerConfigResponse: MessageFns<QueryGetActionSignerConfigResponse> = {
  encode(message: QueryGetActionSignerConfigResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.actionSignerConfig !== undefined) {
      ActionSignerConfig.encode(message.actionSignerConfig, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetActionSignerConfigResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetActionSignerConfigResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.actionSignerConfig = ActionSignerConfig.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetActionSignerConfigResponse {
    return {
      actionSignerConfig: isSet(object.actionSignerConfig)
        ? ActionSignerConfig.fromJSON(object.actionSignerConfig)
        : undefined,
    };
  },

  toJSON(message: QueryGetActionSignerConfigResponse): unknown {
    const obj: any = {};
    if (message.actionSignerConfig !== undefined) {
      obj.actionSignerConfig = ActionSignerConfig.toJSON(message.actionSignerConfig);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetActionSignerConfigResponse>, I>>(
    base?: I,
  ): QueryGetActionSignerConfigResponse {
    return QueryGetActionSignerConfigResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetActionSignerConfigResponse>, I>>(
    object: I,
  ): QueryGetActionSignerConfigResponse {
    const message = createBaseQueryGetActionSignerConfigResponse();
    message.actionSignerConfig = (object.actionSignerConfig !== undefined && object.actionSignerConfig !== null)
      ? ActionSignerConfig.fromPartial(object.actionSignerConfig)
      : undefined;
    return message;
  },
};

function createBaseQueryAllActionSignerConfigRequest(): QueryAllActionSignerConfigRequest {
  return { pagination: undefined };
}

export const QueryAllActionSignerConfigRequest: MessageFns<QueryAllActionSignerConfigRequest> = {
  encode(message: QueryAllActionSignerConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllActionSignerConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllActionSignerConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllActionSignerConfigRequest {
    return { pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined };
  },

  toJSON(message: QueryAllActionSignerConfigRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllActionSignerConfigRequest>, I>>(
    base?: I,
  ): QueryAllActionSignerConfigRequest {
    return QueryAllActionSignerConfigRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllActionSignerConfigRequest>, I>>(
    object: I,
  ): QueryAllActionSignerConfigRequest {
    const message = createBaseQueryAllActionSignerConfigRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryAllActionSignerConfigResponse(): QueryAllActionSignerConfigResponse {
  return { actionSignerConfig: [], pagination: undefined };
}

export const QueryAllActionSignerConfigResponse: MessageFns<QueryAllActionSignerConfigResponse> = {
  encode(message: QueryAllActionSignerConfigResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.actionSignerConfig) {
      ActionSignerConfig.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllActionSignerConfigResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllActionSignerConfigResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.actionSignerConfig.push(ActionSignerConfig.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllActionSignerConfigResponse {
    return {
      actionSignerConfig: globalThis.Array.isArray(object?.actionSignerConfig)
        ? object.actionSignerConfig.map((e: any) => ActionSignerConfig.fromJSON(e))
        : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryAllActionSignerConfigResponse): unknown {
    const obj: any = {};
    if (message.actionSignerConfig?.length) {
      obj.actionSignerConfig = message.actionSignerConfig.map((e) => ActionSignerConfig.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllActionSignerConfigResponse>, I>>(
    base?: I,
  ): QueryAllActionSignerConfigResponse {
    return QueryAllActionSignerConfigResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllActionSignerConfigResponse>, I>>(
    object: I,
  ): QueryAllActionSignerConfigResponse {
    const message = createBaseQueryAllActionSignerConfigResponse();
    message.actionSignerConfig = object.actionSignerConfig?.map((e) => ActionSignerConfig.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryGetSyncActionSignerRequest(): QueryGetSyncActionSignerRequest {
  return { id: 0 };
}

export const QueryGetSyncActionSignerRequest: MessageFns<QueryGetSyncActionSignerRequest> = {
  encode(message: QueryGetSyncActionSignerRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).uint64(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetSyncActionSignerRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetSyncActionSignerRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetSyncActionSignerRequest {
    return { id: isSet(object.id) ? globalThis.Number(object.id) : 0 };
  },

  toJSON(message: QueryGetSyncActionSignerRequest): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetSyncActionSignerRequest>, I>>(base?: I): QueryGetSyncActionSignerRequest {
    return QueryGetSyncActionSignerRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetSyncActionSignerRequest>, I>>(
    object: I,
  ): QueryGetSyncActionSignerRequest {
    const message = createBaseQueryGetSyncActionSignerRequest();
    message.id = object.id ?? 0;
    return message;
  },
};

function createBaseQueryGetSyncActionSignerResponse(): QueryGetSyncActionSignerResponse {
  return { SyncActionSigner: undefined };
}

export const QueryGetSyncActionSignerResponse: MessageFns<QueryGetSyncActionSignerResponse> = {
  encode(message: QueryGetSyncActionSignerResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.SyncActionSigner !== undefined) {
      SyncActionSigner.encode(message.SyncActionSigner, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetSyncActionSignerResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetSyncActionSignerResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.SyncActionSigner = SyncActionSigner.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetSyncActionSignerResponse {
    return {
      SyncActionSigner: isSet(object.SyncActionSigner) ? SyncActionSigner.fromJSON(object.SyncActionSigner) : undefined,
    };
  },

  toJSON(message: QueryGetSyncActionSignerResponse): unknown {
    const obj: any = {};
    if (message.SyncActionSigner !== undefined) {
      obj.SyncActionSigner = SyncActionSigner.toJSON(message.SyncActionSigner);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetSyncActionSignerResponse>, I>>(
    base?: I,
  ): QueryGetSyncActionSignerResponse {
    return QueryGetSyncActionSignerResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetSyncActionSignerResponse>, I>>(
    object: I,
  ): QueryGetSyncActionSignerResponse {
    const message = createBaseQueryGetSyncActionSignerResponse();
    message.SyncActionSigner = (object.SyncActionSigner !== undefined && object.SyncActionSigner !== null)
      ? SyncActionSigner.fromPartial(object.SyncActionSigner)
      : undefined;
    return message;
  },
};

function createBaseQueryAllSyncActionSignerRequest(): QueryAllSyncActionSignerRequest {
  return { pagination: undefined };
}

export const QueryAllSyncActionSignerRequest: MessageFns<QueryAllSyncActionSignerRequest> = {
  encode(message: QueryAllSyncActionSignerRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllSyncActionSignerRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllSyncActionSignerRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllSyncActionSignerRequest {
    return { pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined };
  },

  toJSON(message: QueryAllSyncActionSignerRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllSyncActionSignerRequest>, I>>(base?: I): QueryAllSyncActionSignerRequest {
    return QueryAllSyncActionSignerRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllSyncActionSignerRequest>, I>>(
    object: I,
  ): QueryAllSyncActionSignerRequest {
    const message = createBaseQueryAllSyncActionSignerRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryAllSyncActionSignerResponse(): QueryAllSyncActionSignerResponse {
  return { SyncActionSigner: [], pagination: undefined };
}

export const QueryAllSyncActionSignerResponse: MessageFns<QueryAllSyncActionSignerResponse> = {
  encode(message: QueryAllSyncActionSignerResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.SyncActionSigner) {
      SyncActionSigner.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllSyncActionSignerResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllSyncActionSignerResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.SyncActionSigner.push(SyncActionSigner.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllSyncActionSignerResponse {
    return {
      SyncActionSigner: globalThis.Array.isArray(object?.SyncActionSigner)
        ? object.SyncActionSigner.map((e: any) => SyncActionSigner.fromJSON(e))
        : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryAllSyncActionSignerResponse): unknown {
    const obj: any = {};
    if (message.SyncActionSigner?.length) {
      obj.SyncActionSigner = message.SyncActionSigner.map((e) => SyncActionSigner.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllSyncActionSignerResponse>, I>>(
    base?: I,
  ): QueryAllSyncActionSignerResponse {
    return QueryAllSyncActionSignerResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllSyncActionSignerResponse>, I>>(
    object: I,
  ): QueryAllSyncActionSignerResponse {
    const message = createBaseQueryAllSyncActionSignerResponse();
    message.SyncActionSigner = object.SyncActionSigner?.map((e) => SyncActionSigner.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

/** Query defines the gRPC querier service. */
export interface Query {
  /** Parameters queries the parameters of the module. */
  Params(request: QueryParamsRequest): Promise<QueryParamsResponse>;
  /** Queries a MintRequest by id. */
  MintRequest(request: QueryGetMintRequestRequest): Promise<QueryGetMintRequestResponse>;
  /** Queries a list of MintRequest items. */
  MintRequestAll(request: QueryAllMintRequestRequest): Promise<QueryAllMintRequestResponse>;
  /** Queries a ActionRequest by id. */
  ActionOracleRequest(request: QueryGetActionRequestRequest): Promise<QueryGetActionRequestResponse>;
  /** Queries a list of ActionRequest items. */
  ActionRequestAll(request: QueryAllActionRequestRequest): Promise<QueryAllActionRequestResponse>;
  /** Queries a CollectionOwnerRequest by id. */
  CollectionOwnerRequest(
    request: QueryGetCollectionOwnerRequestRequest,
  ): Promise<QueryGetCollectionOwnerRequestResponse>;
  /** Queries a list of CollectionOwnerRequest items. */
  CollectionOwnerRequestAll(
    request: QueryAllCollectionOwnerRequestRequest,
  ): Promise<QueryAllCollectionOwnerRequestResponse>;
  /** Queries a OracleConfig by index. */
  OracleConfig(request: QueryGetOracleConfigRequest): Promise<QueryGetOracleConfigResponse>;
  /** Queries a ActionSigner by index. */
  ActionSigner(request: QueryGetActionSignerRequest): Promise<QueryGetActionSignerResponse>;
  /** Queries a list of ActionSigner items. */
  ActionSignerAll(request: QueryAllActionSignerRequest): Promise<QueryAllActionSignerResponse>;
  /** Queries a BindedSigner by index. */
  BindedSigner(request: QueryGetBindedSignerRequest): Promise<QueryGetBindedSignerResponse>;
  /** Queries a ActionSignerConfig by index. */
  ActionSignerConfig(request: QueryGetActionSignerConfigRequest): Promise<QueryGetActionSignerConfigResponse>;
  /** Queries a list of ActionSignerConfig items. */
  ActionSignerConfigAll(request: QueryAllActionSignerConfigRequest): Promise<QueryAllActionSignerConfigResponse>;
  /** Queries a SyncActionSigner by id. */
  SyncActionSigner(request: QueryGetSyncActionSignerRequest): Promise<QueryGetSyncActionSignerResponse>;
  /** Queries a list of SyncActionSigner items. */
  SyncActionSignerAll(request: QueryAllSyncActionSignerRequest): Promise<QueryAllSyncActionSignerResponse>;
}

export const QueryServiceName = "sixprotocol.nftoracle.Query";
export class QueryClientImpl implements Query {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || QueryServiceName;
    this.rpc = rpc;
    this.Params = this.Params.bind(this);
    this.MintRequest = this.MintRequest.bind(this);
    this.MintRequestAll = this.MintRequestAll.bind(this);
    this.ActionOracleRequest = this.ActionOracleRequest.bind(this);
    this.ActionRequestAll = this.ActionRequestAll.bind(this);
    this.CollectionOwnerRequest = this.CollectionOwnerRequest.bind(this);
    this.CollectionOwnerRequestAll = this.CollectionOwnerRequestAll.bind(this);
    this.OracleConfig = this.OracleConfig.bind(this);
    this.ActionSigner = this.ActionSigner.bind(this);
    this.ActionSignerAll = this.ActionSignerAll.bind(this);
    this.BindedSigner = this.BindedSigner.bind(this);
    this.ActionSignerConfig = this.ActionSignerConfig.bind(this);
    this.ActionSignerConfigAll = this.ActionSignerConfigAll.bind(this);
    this.SyncActionSigner = this.SyncActionSigner.bind(this);
    this.SyncActionSignerAll = this.SyncActionSignerAll.bind(this);
  }
  Params(request: QueryParamsRequest): Promise<QueryParamsResponse> {
    const data = QueryParamsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Params", data);
    return promise.then((data) => QueryParamsResponse.decode(new BinaryReader(data)));
  }

  MintRequest(request: QueryGetMintRequestRequest): Promise<QueryGetMintRequestResponse> {
    const data = QueryGetMintRequestRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "MintRequest", data);
    return promise.then((data) => QueryGetMintRequestResponse.decode(new BinaryReader(data)));
  }

  MintRequestAll(request: QueryAllMintRequestRequest): Promise<QueryAllMintRequestResponse> {
    const data = QueryAllMintRequestRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "MintRequestAll", data);
    return promise.then((data) => QueryAllMintRequestResponse.decode(new BinaryReader(data)));
  }

  ActionOracleRequest(request: QueryGetActionRequestRequest): Promise<QueryGetActionRequestResponse> {
    const data = QueryGetActionRequestRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ActionOracleRequest", data);
    return promise.then((data) => QueryGetActionRequestResponse.decode(new BinaryReader(data)));
  }

  ActionRequestAll(request: QueryAllActionRequestRequest): Promise<QueryAllActionRequestResponse> {
    const data = QueryAllActionRequestRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ActionRequestAll", data);
    return promise.then((data) => QueryAllActionRequestResponse.decode(new BinaryReader(data)));
  }

  CollectionOwnerRequest(
    request: QueryGetCollectionOwnerRequestRequest,
  ): Promise<QueryGetCollectionOwnerRequestResponse> {
    const data = QueryGetCollectionOwnerRequestRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "CollectionOwnerRequest", data);
    return promise.then((data) => QueryGetCollectionOwnerRequestResponse.decode(new BinaryReader(data)));
  }

  CollectionOwnerRequestAll(
    request: QueryAllCollectionOwnerRequestRequest,
  ): Promise<QueryAllCollectionOwnerRequestResponse> {
    const data = QueryAllCollectionOwnerRequestRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "CollectionOwnerRequestAll", data);
    return promise.then((data) => QueryAllCollectionOwnerRequestResponse.decode(new BinaryReader(data)));
  }

  OracleConfig(request: QueryGetOracleConfigRequest): Promise<QueryGetOracleConfigResponse> {
    const data = QueryGetOracleConfigRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "OracleConfig", data);
    return promise.then((data) => QueryGetOracleConfigResponse.decode(new BinaryReader(data)));
  }

  ActionSigner(request: QueryGetActionSignerRequest): Promise<QueryGetActionSignerResponse> {
    const data = QueryGetActionSignerRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ActionSigner", data);
    return promise.then((data) => QueryGetActionSignerResponse.decode(new BinaryReader(data)));
  }

  ActionSignerAll(request: QueryAllActionSignerRequest): Promise<QueryAllActionSignerResponse> {
    const data = QueryAllActionSignerRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ActionSignerAll", data);
    return promise.then((data) => QueryAllActionSignerResponse.decode(new BinaryReader(data)));
  }

  BindedSigner(request: QueryGetBindedSignerRequest): Promise<QueryGetBindedSignerResponse> {
    const data = QueryGetBindedSignerRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "BindedSigner", data);
    return promise.then((data) => QueryGetBindedSignerResponse.decode(new BinaryReader(data)));
  }

  ActionSignerConfig(request: QueryGetActionSignerConfigRequest): Promise<QueryGetActionSignerConfigResponse> {
    const data = QueryGetActionSignerConfigRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ActionSignerConfig", data);
    return promise.then((data) => QueryGetActionSignerConfigResponse.decode(new BinaryReader(data)));
  }

  ActionSignerConfigAll(request: QueryAllActionSignerConfigRequest): Promise<QueryAllActionSignerConfigResponse> {
    const data = QueryAllActionSignerConfigRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ActionSignerConfigAll", data);
    return promise.then((data) => QueryAllActionSignerConfigResponse.decode(new BinaryReader(data)));
  }

  SyncActionSigner(request: QueryGetSyncActionSignerRequest): Promise<QueryGetSyncActionSignerResponse> {
    const data = QueryGetSyncActionSignerRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "SyncActionSigner", data);
    return promise.then((data) => QueryGetSyncActionSignerResponse.decode(new BinaryReader(data)));
  }

  SyncActionSignerAll(request: QueryAllSyncActionSignerRequest): Promise<QueryAllSyncActionSignerResponse> {
    const data = QueryAllSyncActionSignerRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "SyncActionSignerAll", data);
    return promise.then((data) => QueryAllSyncActionSignerResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
