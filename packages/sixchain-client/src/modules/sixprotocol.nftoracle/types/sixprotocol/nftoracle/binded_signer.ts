// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: sixprotocol/nftoracle/binded_signer.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "../../google/protobuf/timestamp";

export const protobufPackage = "sixprotocol.nftoracle";

export interface BindedSignerParams {
  actorAddress: string;
  expiredAt: Date | undefined;
}

export interface BindedSigner {
  ownerAddress: string;
  signers: BindedSignerParams[];
  actorCount: number;
}

function createBaseBindedSignerParams(): BindedSignerParams {
  return { actorAddress: "", expiredAt: undefined };
}

export const BindedSignerParams: MessageFns<BindedSignerParams> = {
  encode(message: BindedSignerParams, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.actorAddress !== "") {
      writer.uint32(10).string(message.actorAddress);
    }
    if (message.expiredAt !== undefined) {
      Timestamp.encode(toTimestamp(message.expiredAt), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BindedSignerParams {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBindedSignerParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.actorAddress = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.expiredAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BindedSignerParams {
    return {
      actorAddress: isSet(object.actorAddress) ? globalThis.String(object.actorAddress) : "",
      expiredAt: isSet(object.expiredAt) ? fromJsonTimestamp(object.expiredAt) : undefined,
    };
  },

  toJSON(message: BindedSignerParams): unknown {
    const obj: any = {};
    if (message.actorAddress !== "") {
      obj.actorAddress = message.actorAddress;
    }
    if (message.expiredAt !== undefined) {
      obj.expiredAt = message.expiredAt.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BindedSignerParams>, I>>(base?: I): BindedSignerParams {
    return BindedSignerParams.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BindedSignerParams>, I>>(object: I): BindedSignerParams {
    const message = createBaseBindedSignerParams();
    message.actorAddress = object.actorAddress ?? "";
    message.expiredAt = object.expiredAt ?? undefined;
    return message;
  },
};

function createBaseBindedSigner(): BindedSigner {
  return { ownerAddress: "", signers: [], actorCount: 0 };
}

export const BindedSigner: MessageFns<BindedSigner> = {
  encode(message: BindedSigner, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.ownerAddress !== "") {
      writer.uint32(10).string(message.ownerAddress);
    }
    for (const v of message.signers) {
      BindedSignerParams.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.actorCount !== 0) {
      writer.uint32(24).uint64(message.actorCount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BindedSigner {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBindedSigner();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.ownerAddress = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.signers.push(BindedSignerParams.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.actorCount = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BindedSigner {
    return {
      ownerAddress: isSet(object.ownerAddress) ? globalThis.String(object.ownerAddress) : "",
      signers: globalThis.Array.isArray(object?.signers)
        ? object.signers.map((e: any) => BindedSignerParams.fromJSON(e))
        : [],
      actorCount: isSet(object.actorCount) ? globalThis.Number(object.actorCount) : 0,
    };
  },

  toJSON(message: BindedSigner): unknown {
    const obj: any = {};
    if (message.ownerAddress !== "") {
      obj.ownerAddress = message.ownerAddress;
    }
    if (message.signers?.length) {
      obj.signers = message.signers.map((e) => BindedSignerParams.toJSON(e));
    }
    if (message.actorCount !== 0) {
      obj.actorCount = Math.round(message.actorCount);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BindedSigner>, I>>(base?: I): BindedSigner {
    return BindedSigner.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BindedSigner>, I>>(object: I): BindedSigner {
    const message = createBaseBindedSigner();
    message.ownerAddress = object.ownerAddress ?? "";
    message.signers = object.signers?.map((e) => BindedSignerParams.fromPartial(e)) || [];
    message.actorCount = object.actorCount ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
