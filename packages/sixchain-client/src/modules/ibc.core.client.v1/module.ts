// Generated by Ignite ignite.com/cli

import { SigningStargateClient, DeliverTxResponse, StdFee } from "@cosmjs/stargate";
import { EncodeObject, GeneratedType, OfflineSigner, Registry } from "@cosmjs/proto-signing";
import { msgTypes } from './registry';
import { IgniteClient } from "../client"
import { MissingWalletError } from "../helpers"
import { Api } from "./rest";
import { MsgCreateClient } from "./types/ibc/core/client/v1/tx";
import { MsgUpdateClient } from "./types/ibc/core/client/v1/tx";
import { MsgUpgradeClient } from "./types/ibc/core/client/v1/tx";
import { MsgSubmitMisbehaviour } from "./types/ibc/core/client/v1/tx";
import { MsgRecoverClient } from "./types/ibc/core/client/v1/tx";
import { MsgIBCSoftwareUpgrade } from "./types/ibc/core/client/v1/tx";
import { MsgUpdateParams } from "./types/ibc/core/client/v1/tx";

import { IdentifiedClientState as typeIdentifiedClientState} from "./types"
import { ConsensusStateWithHeight as typeConsensusStateWithHeight} from "./types"
import { ClientConsensusStates as typeClientConsensusStates} from "./types"
import { Height as typeHeight} from "./types"
import { Params as typeParams} from "./types"
import { ClientUpdateProposal as typeClientUpdateProposal} from "./types"
import { UpgradeProposal as typeUpgradeProposal} from "./types"
import { GenesisMetadata as typeGenesisMetadata} from "./types"
import { IdentifiedGenesisMetadata as typeIdentifiedGenesisMetadata} from "./types"

export { MsgCreateClient, MsgUpdateClient, MsgUpgradeClient, MsgSubmitMisbehaviour, MsgRecoverClient, MsgIBCSoftwareUpgrade, MsgUpdateParams };

type sendMsgCreateClientParams = {
  value: MsgCreateClient,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdateClientParams = {
  value: MsgUpdateClient,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpgradeClientParams = {
  value: MsgUpgradeClient,
  fee?: StdFee,
  memo?: string
};

type sendMsgSubmitMisbehaviourParams = {
  value: MsgSubmitMisbehaviour,
  fee?: StdFee,
  memo?: string
};

type sendMsgRecoverClientParams = {
  value: MsgRecoverClient,
  fee?: StdFee,
  memo?: string
};

type sendMsgIBCSoftwareUpgradeParams = {
  value: MsgIBCSoftwareUpgrade,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdateParamsParams = {
  value: MsgUpdateParams,
  fee?: StdFee,
  memo?: string
};


type msgCreateClientParams = {
  value: MsgCreateClient,
};

type msgUpdateClientParams = {
  value: MsgUpdateClient,
};

type msgUpgradeClientParams = {
  value: MsgUpgradeClient,
};

type msgSubmitMisbehaviourParams = {
  value: MsgSubmitMisbehaviour,
};

type msgRecoverClientParams = {
  value: MsgRecoverClient,
};

type msgIbcsoftwareUpgradeParams = {
  value: MsgIBCSoftwareUpgrade,
};

type msgUpdateParamsParams = {
  value: MsgUpdateParams,
};


export const registry = new Registry(msgTypes);

type Field = {
	name: string;
	type: unknown;
}
function getStructure(template) {
	const structure: {fields: Field[]} = { fields: [] }
	for (let [key, value] of Object.entries(template)) {
		let field = { name: key, type: typeof value }
		structure.fields.push(field)
	}
	return structure
}
const defaultFee = {
  amount: [],
  gas: "200000",
};

interface TxClientOptions {
  addr: string
	prefix: string
	signer?: OfflineSigner
}

export const txClient = ({ signer, prefix, addr }: TxClientOptions = { addr: "http://localhost:26657", prefix: "cosmos" }) => {

  return {
		
		async sendMsgCreateClient({ value, fee, memo }: sendMsgCreateClientParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCreateClient: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgCreateClient({ value: MsgCreateClient.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreateClient: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdateClient({ value, fee, memo }: sendMsgUpdateClientParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateClient: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgUpdateClient({ value: MsgUpdateClient.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateClient: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpgradeClient({ value, fee, memo }: sendMsgUpgradeClientParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpgradeClient: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgUpgradeClient({ value: MsgUpgradeClient.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpgradeClient: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgSubmitMisbehaviour({ value, fee, memo }: sendMsgSubmitMisbehaviourParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgSubmitMisbehaviour: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgSubmitMisbehaviour({ value: MsgSubmitMisbehaviour.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgSubmitMisbehaviour: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgRecoverClient({ value, fee, memo }: sendMsgRecoverClientParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgRecoverClient: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgRecoverClient({ value: MsgRecoverClient.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgRecoverClient: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgIBCSoftwareUpgrade({ value, fee, memo }: sendMsgIBCSoftwareUpgradeParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgIBCSoftwareUpgrade: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgIbcsoftwareUpgrade({ value: MsgIBCSoftwareUpgrade.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgIBCSoftwareUpgrade: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdateParams({ value, fee, memo }: sendMsgUpdateParamsParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateParams: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgUpdateParams({ value: MsgUpdateParams.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateParams: Could not broadcast Tx: '+ e.message)
			}
		},
		
		
		msgCreateClient({ value }: msgCreateClientParams): EncodeObject {
			try {
				return { typeUrl: "/ibc.core.client.v1.MsgCreateClient", value: MsgCreateClient.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCreateClient: Could not create message: ' + e.message)
			}
		},
		
		msgUpdateClient({ value }: msgUpdateClientParams): EncodeObject {
			try {
				return { typeUrl: "/ibc.core.client.v1.MsgUpdateClient", value: MsgUpdateClient.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateClient: Could not create message: ' + e.message)
			}
		},
		
		msgUpgradeClient({ value }: msgUpgradeClientParams): EncodeObject {
			try {
				return { typeUrl: "/ibc.core.client.v1.MsgUpgradeClient", value: MsgUpgradeClient.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpgradeClient: Could not create message: ' + e.message)
			}
		},
		
		msgSubmitMisbehaviour({ value }: msgSubmitMisbehaviourParams): EncodeObject {
			try {
				return { typeUrl: "/ibc.core.client.v1.MsgSubmitMisbehaviour", value: MsgSubmitMisbehaviour.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgSubmitMisbehaviour: Could not create message: ' + e.message)
			}
		},
		
		msgRecoverClient({ value }: msgRecoverClientParams): EncodeObject {
			try {
				return { typeUrl: "/ibc.core.client.v1.MsgRecoverClient", value: MsgRecoverClient.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgRecoverClient: Could not create message: ' + e.message)
			}
		},
		
		msgIbcsoftwareUpgrade({ value }: msgIbcsoftwareUpgradeParams): EncodeObject {
			try {
				return { typeUrl: "/ibc.core.client.v1.MsgIBCSoftwareUpgrade", value: MsgIBCSoftwareUpgrade.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgIBCSoftwareUpgrade: Could not create message: ' + e.message)
			}
		},
		
		msgUpdateParams({ value }: msgUpdateParamsParams): EncodeObject {
			try {
				return { typeUrl: "/ibc.core.client.v1.MsgUpdateParams", value: MsgUpdateParams.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateParams: Could not create message: ' + e.message)
			}
		},
		
	}
};

interface QueryClientOptions {
  addr: string
}

export const queryClient = ({ addr: addr }: QueryClientOptions = { addr: "http://localhost:1317" }) => {
  return new Api({ baseURL: addr });
};

class SDKModule {
	public query: ReturnType<typeof queryClient>;
	public tx: ReturnType<typeof txClient>;
	public structure: Record<string,unknown>;
	public registry: Array<[string, GeneratedType]> = [];

	constructor(client: IgniteClient) {		
	
		this.query = queryClient({ addr: client.env.apiURL });		
		this.updateTX(client);
		this.structure =  {
						IdentifiedClientState: getStructure(typeIdentifiedClientState.fromPartial({})),
						ConsensusStateWithHeight: getStructure(typeConsensusStateWithHeight.fromPartial({})),
						ClientConsensusStates: getStructure(typeClientConsensusStates.fromPartial({})),
						Height: getStructure(typeHeight.fromPartial({})),
						Params: getStructure(typeParams.fromPartial({})),
						ClientUpdateProposal: getStructure(typeClientUpdateProposal.fromPartial({})),
						UpgradeProposal: getStructure(typeUpgradeProposal.fromPartial({})),
						GenesisMetadata: getStructure(typeGenesisMetadata.fromPartial({})),
						IdentifiedGenesisMetadata: getStructure(typeIdentifiedGenesisMetadata.fromPartial({})),
						
		};
		client.on('signer-changed',(signer) => {			
		 this.updateTX(client);
		})
	}
	updateTX(client: IgniteClient) {
    const methods = txClient({
        signer: client.signer,
        addr: client.env.rpcURL,
        prefix: client.env.prefix ?? "cosmos",
    })
	
    this.tx = methods;
    for (let m in methods) {
        this.tx[m] = methods[m].bind(this.tx);
    }
	}
};

const IgntModule = (test: IgniteClient) => {
	return {
		module: {
			IbcCoreClientV_1: new SDKModule(test)
		},
		registry: msgTypes
  }
}
export default IgntModule;