// Generated by Ignite ignite.com/cli

import { SigningStargateClient, DeliverTxResponse, StdFee } from "@cosmjs/stargate";
import { EncodeObject, GeneratedType, OfflineSigner, Registry } from "@cosmjs/proto-signing";
import { msgTypes } from './registry';
import { IgniteClient } from "../client"
import { MissingWalletError } from "../helpers"
import { Api } from "./rest";
import { MsgUpdateParams } from "./types/sixprotocol/protocoladmin/tx";
import { MsgCreateGroup } from "./types/sixprotocol/protocoladmin/tx";
import { MsgUpdateGroup } from "./types/sixprotocol/protocoladmin/tx";
import { MsgDeleteGroup } from "./types/sixprotocol/protocoladmin/tx";
import { MsgAddAdminToGroup } from "./types/sixprotocol/protocoladmin/tx";
import { MsgRemoveAdminFromGroup } from "./types/sixprotocol/protocoladmin/tx";

import { Admin as typeAdmin} from "./types"
import { Group as typeGroup} from "./types"
import { Params as typeParams} from "./types"

export { MsgUpdateParams, MsgCreateGroup, MsgUpdateGroup, MsgDeleteGroup, MsgAddAdminToGroup, MsgRemoveAdminFromGroup };

type sendMsgUpdateParamsParams = {
  value: MsgUpdateParams,
  fee?: StdFee,
  memo?: string
};

type sendMsgCreateGroupParams = {
  value: MsgCreateGroup,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdateGroupParams = {
  value: MsgUpdateGroup,
  fee?: StdFee,
  memo?: string
};

type sendMsgDeleteGroupParams = {
  value: MsgDeleteGroup,
  fee?: StdFee,
  memo?: string
};

type sendMsgAddAdminToGroupParams = {
  value: MsgAddAdminToGroup,
  fee?: StdFee,
  memo?: string
};

type sendMsgRemoveAdminFromGroupParams = {
  value: MsgRemoveAdminFromGroup,
  fee?: StdFee,
  memo?: string
};


type msgUpdateParamsParams = {
  value: MsgUpdateParams,
};

type msgCreateGroupParams = {
  value: MsgCreateGroup,
};

type msgUpdateGroupParams = {
  value: MsgUpdateGroup,
};

type msgDeleteGroupParams = {
  value: MsgDeleteGroup,
};

type msgAddAdminToGroupParams = {
  value: MsgAddAdminToGroup,
};

type msgRemoveAdminFromGroupParams = {
  value: MsgRemoveAdminFromGroup,
};


export const registry = new Registry(msgTypes);

type Field = {
	name: string;
	type: unknown;
}
function getStructure(template) {
	const structure: {fields: Field[]} = { fields: [] }
	for (let [key, value] of Object.entries(template)) {
		let field = { name: key, type: typeof value }
		structure.fields.push(field)
	}
	return structure
}
const defaultFee = {
  amount: [],
  gas: "200000",
};

interface TxClientOptions {
  addr: string
	prefix: string
	signer?: OfflineSigner
}

export const txClient = ({ signer, prefix, addr }: TxClientOptions = { addr: "http://localhost:26657", prefix: "cosmos" }) => {

  return {
		
		async sendMsgUpdateParams({ value, fee, memo }: sendMsgUpdateParamsParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateParams: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgUpdateParams({ value: MsgUpdateParams.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateParams: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCreateGroup({ value, fee, memo }: sendMsgCreateGroupParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCreateGroup: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgCreateGroup({ value: MsgCreateGroup.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreateGroup: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdateGroup({ value, fee, memo }: sendMsgUpdateGroupParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateGroup: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgUpdateGroup({ value: MsgUpdateGroup.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateGroup: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgDeleteGroup({ value, fee, memo }: sendMsgDeleteGroupParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgDeleteGroup: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgDeleteGroup({ value: MsgDeleteGroup.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgDeleteGroup: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgAddAdminToGroup({ value, fee, memo }: sendMsgAddAdminToGroupParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgAddAdminToGroup: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgAddAdminToGroup({ value: MsgAddAdminToGroup.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgAddAdminToGroup: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgRemoveAdminFromGroup({ value, fee, memo }: sendMsgRemoveAdminFromGroupParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgRemoveAdminFromGroup: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgRemoveAdminFromGroup({ value: MsgRemoveAdminFromGroup.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgRemoveAdminFromGroup: Could not broadcast Tx: '+ e.message)
			}
		},
		
		
		msgUpdateParams({ value }: msgUpdateParamsParams): EncodeObject {
			try {
				return { typeUrl: "/sixprotocol.protocoladmin.MsgUpdateParams", value: MsgUpdateParams.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateParams: Could not create message: ' + e.message)
			}
		},
		
		msgCreateGroup({ value }: msgCreateGroupParams): EncodeObject {
			try {
				return { typeUrl: "/sixprotocol.protocoladmin.MsgCreateGroup", value: MsgCreateGroup.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCreateGroup: Could not create message: ' + e.message)
			}
		},
		
		msgUpdateGroup({ value }: msgUpdateGroupParams): EncodeObject {
			try {
				return { typeUrl: "/sixprotocol.protocoladmin.MsgUpdateGroup", value: MsgUpdateGroup.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateGroup: Could not create message: ' + e.message)
			}
		},
		
		msgDeleteGroup({ value }: msgDeleteGroupParams): EncodeObject {
			try {
				return { typeUrl: "/sixprotocol.protocoladmin.MsgDeleteGroup", value: MsgDeleteGroup.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgDeleteGroup: Could not create message: ' + e.message)
			}
		},
		
		msgAddAdminToGroup({ value }: msgAddAdminToGroupParams): EncodeObject {
			try {
				return { typeUrl: "/sixprotocol.protocoladmin.MsgAddAdminToGroup", value: MsgAddAdminToGroup.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgAddAdminToGroup: Could not create message: ' + e.message)
			}
		},
		
		msgRemoveAdminFromGroup({ value }: msgRemoveAdminFromGroupParams): EncodeObject {
			try {
				return { typeUrl: "/sixprotocol.protocoladmin.MsgRemoveAdminFromGroup", value: MsgRemoveAdminFromGroup.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgRemoveAdminFromGroup: Could not create message: ' + e.message)
			}
		},
		
	}
};

interface QueryClientOptions {
  addr: string
}

export const queryClient = ({ addr: addr }: QueryClientOptions = { addr: "http://localhost:1317" }) => {
  return new Api({ baseURL: addr });
};

class SDKModule {
	public query: ReturnType<typeof queryClient>;
	public tx: ReturnType<typeof txClient>;
	public structure: Record<string,unknown>;
	public registry: Array<[string, GeneratedType]> = [];

	constructor(client: IgniteClient) {		
	
		this.query = queryClient({ addr: client.env.apiURL });		
		this.updateTX(client);
		this.structure =  {
						Admin: getStructure(typeAdmin.fromPartial({})),
						Group: getStructure(typeGroup.fromPartial({})),
						Params: getStructure(typeParams.fromPartial({})),
						
		};
		client.on('signer-changed',(signer) => {			
		 this.updateTX(client);
		})
	}
	updateTX(client: IgniteClient) {
    const methods = txClient({
        signer: client.signer,
        addr: client.env.rpcURL,
        prefix: client.env.prefix ?? "cosmos",
    })
	
    this.tx = methods;
    for (let m in methods) {
        this.tx[m] = methods[m].bind(this.tx);
    }
	}
};

const IgntModule = (test: IgniteClient) => {
	return {
		module: {
			SixprotocolProtocoladmin: new SDKModule(test)
		},
		registry: msgTypes
  }
}
export default IgntModule;