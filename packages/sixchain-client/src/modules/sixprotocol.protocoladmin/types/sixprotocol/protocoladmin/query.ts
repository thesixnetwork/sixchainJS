// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: sixprotocol/protocoladmin/query.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { PageRequest, PageResponse } from "../../cosmos/base/query/v1beta1/pagination";
import { Admin } from "./admin";
import { Group } from "./group";
import { Params } from "./params";

export const protobufPackage = "sixprotocol.protocoladmin";

/** QueryParamsRequest is request type for the Query/Params RPC method. */
export interface QueryParamsRequest {
}

/** QueryParamsResponse is response type for the Query/Params RPC method. */
export interface QueryParamsResponse {
  /** params holds all the parameters of this module. */
  params: Params | undefined;
}

export interface QueryGetAdminRequest {
  group: string;
  admin: string;
}

export interface QueryGetAdminResponse {
  admin: Admin | undefined;
}

export interface QueryAllAdminRequest {
  pagination: PageRequest | undefined;
}

export interface QueryAllAdminResponse {
  admin: Admin[];
  pagination: PageResponse | undefined;
}

export interface QueryGetGroupRequest {
  name: string;
}

export interface QueryGetGroupResponse {
  group: Group | undefined;
}

export interface QueryAllGroupRequest {
  pagination: PageRequest | undefined;
}

export interface QueryAllGroupResponse {
  group: Group[];
  pagination: PageResponse | undefined;
}

export interface QueryListAdminOfGroupRequest {
  group: string;
  pagination: PageRequest | undefined;
}

export interface QueryListAdminOfGroupResponse {
  admin: string[];
  pagination: PageResponse | undefined;
}

function createBaseQueryParamsRequest(): QueryParamsRequest {
  return {};
}

export const QueryParamsRequest: MessageFns<QueryParamsRequest> = {
  encode(_: QueryParamsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParamsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryParamsRequest {
    return {};
  },

  toJSON(_: QueryParamsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryParamsRequest>, I>>(base?: I): QueryParamsRequest {
    return QueryParamsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryParamsRequest>, I>>(_: I): QueryParamsRequest {
    const message = createBaseQueryParamsRequest();
    return message;
  },
};

function createBaseQueryParamsResponse(): QueryParamsResponse {
  return { params: undefined };
}

export const QueryParamsResponse: MessageFns<QueryParamsResponse> = {
  encode(message: QueryParamsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParamsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryParamsResponse {
    return { params: isSet(object.params) ? Params.fromJSON(object.params) : undefined };
  },

  toJSON(message: QueryParamsResponse): unknown {
    const obj: any = {};
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryParamsResponse>, I>>(base?: I): QueryParamsResponse {
    return QueryParamsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryParamsResponse>, I>>(object: I): QueryParamsResponse {
    const message = createBaseQueryParamsResponse();
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseQueryGetAdminRequest(): QueryGetAdminRequest {
  return { group: "", admin: "" };
}

export const QueryGetAdminRequest: MessageFns<QueryGetAdminRequest> = {
  encode(message: QueryGetAdminRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.group !== "") {
      writer.uint32(10).string(message.group);
    }
    if (message.admin !== "") {
      writer.uint32(18).string(message.admin);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetAdminRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetAdminRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.group = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.admin = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetAdminRequest {
    return {
      group: isSet(object.group) ? globalThis.String(object.group) : "",
      admin: isSet(object.admin) ? globalThis.String(object.admin) : "",
    };
  },

  toJSON(message: QueryGetAdminRequest): unknown {
    const obj: any = {};
    if (message.group !== "") {
      obj.group = message.group;
    }
    if (message.admin !== "") {
      obj.admin = message.admin;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetAdminRequest>, I>>(base?: I): QueryGetAdminRequest {
    return QueryGetAdminRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetAdminRequest>, I>>(object: I): QueryGetAdminRequest {
    const message = createBaseQueryGetAdminRequest();
    message.group = object.group ?? "";
    message.admin = object.admin ?? "";
    return message;
  },
};

function createBaseQueryGetAdminResponse(): QueryGetAdminResponse {
  return { admin: undefined };
}

export const QueryGetAdminResponse: MessageFns<QueryGetAdminResponse> = {
  encode(message: QueryGetAdminResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.admin !== undefined) {
      Admin.encode(message.admin, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetAdminResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetAdminResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.admin = Admin.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetAdminResponse {
    return { admin: isSet(object.admin) ? Admin.fromJSON(object.admin) : undefined };
  },

  toJSON(message: QueryGetAdminResponse): unknown {
    const obj: any = {};
    if (message.admin !== undefined) {
      obj.admin = Admin.toJSON(message.admin);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetAdminResponse>, I>>(base?: I): QueryGetAdminResponse {
    return QueryGetAdminResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetAdminResponse>, I>>(object: I): QueryGetAdminResponse {
    const message = createBaseQueryGetAdminResponse();
    message.admin = (object.admin !== undefined && object.admin !== null) ? Admin.fromPartial(object.admin) : undefined;
    return message;
  },
};

function createBaseQueryAllAdminRequest(): QueryAllAdminRequest {
  return { pagination: undefined };
}

export const QueryAllAdminRequest: MessageFns<QueryAllAdminRequest> = {
  encode(message: QueryAllAdminRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllAdminRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllAdminRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllAdminRequest {
    return { pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined };
  },

  toJSON(message: QueryAllAdminRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllAdminRequest>, I>>(base?: I): QueryAllAdminRequest {
    return QueryAllAdminRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllAdminRequest>, I>>(object: I): QueryAllAdminRequest {
    const message = createBaseQueryAllAdminRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryAllAdminResponse(): QueryAllAdminResponse {
  return { admin: [], pagination: undefined };
}

export const QueryAllAdminResponse: MessageFns<QueryAllAdminResponse> = {
  encode(message: QueryAllAdminResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.admin) {
      Admin.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllAdminResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllAdminResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.admin.push(Admin.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllAdminResponse {
    return {
      admin: globalThis.Array.isArray(object?.admin) ? object.admin.map((e: any) => Admin.fromJSON(e)) : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryAllAdminResponse): unknown {
    const obj: any = {};
    if (message.admin?.length) {
      obj.admin = message.admin.map((e) => Admin.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllAdminResponse>, I>>(base?: I): QueryAllAdminResponse {
    return QueryAllAdminResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllAdminResponse>, I>>(object: I): QueryAllAdminResponse {
    const message = createBaseQueryAllAdminResponse();
    message.admin = object.admin?.map((e) => Admin.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryGetGroupRequest(): QueryGetGroupRequest {
  return { name: "" };
}

export const QueryGetGroupRequest: MessageFns<QueryGetGroupRequest> = {
  encode(message: QueryGetGroupRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetGroupRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetGroupRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetGroupRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: QueryGetGroupRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetGroupRequest>, I>>(base?: I): QueryGetGroupRequest {
    return QueryGetGroupRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetGroupRequest>, I>>(object: I): QueryGetGroupRequest {
    const message = createBaseQueryGetGroupRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseQueryGetGroupResponse(): QueryGetGroupResponse {
  return { group: undefined };
}

export const QueryGetGroupResponse: MessageFns<QueryGetGroupResponse> = {
  encode(message: QueryGetGroupResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.group !== undefined) {
      Group.encode(message.group, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetGroupResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetGroupResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.group = Group.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetGroupResponse {
    return { group: isSet(object.group) ? Group.fromJSON(object.group) : undefined };
  },

  toJSON(message: QueryGetGroupResponse): unknown {
    const obj: any = {};
    if (message.group !== undefined) {
      obj.group = Group.toJSON(message.group);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetGroupResponse>, I>>(base?: I): QueryGetGroupResponse {
    return QueryGetGroupResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetGroupResponse>, I>>(object: I): QueryGetGroupResponse {
    const message = createBaseQueryGetGroupResponse();
    message.group = (object.group !== undefined && object.group !== null) ? Group.fromPartial(object.group) : undefined;
    return message;
  },
};

function createBaseQueryAllGroupRequest(): QueryAllGroupRequest {
  return { pagination: undefined };
}

export const QueryAllGroupRequest: MessageFns<QueryAllGroupRequest> = {
  encode(message: QueryAllGroupRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllGroupRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllGroupRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllGroupRequest {
    return { pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined };
  },

  toJSON(message: QueryAllGroupRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllGroupRequest>, I>>(base?: I): QueryAllGroupRequest {
    return QueryAllGroupRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllGroupRequest>, I>>(object: I): QueryAllGroupRequest {
    const message = createBaseQueryAllGroupRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryAllGroupResponse(): QueryAllGroupResponse {
  return { group: [], pagination: undefined };
}

export const QueryAllGroupResponse: MessageFns<QueryAllGroupResponse> = {
  encode(message: QueryAllGroupResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.group) {
      Group.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllGroupResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllGroupResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.group.push(Group.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllGroupResponse {
    return {
      group: globalThis.Array.isArray(object?.group) ? object.group.map((e: any) => Group.fromJSON(e)) : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryAllGroupResponse): unknown {
    const obj: any = {};
    if (message.group?.length) {
      obj.group = message.group.map((e) => Group.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllGroupResponse>, I>>(base?: I): QueryAllGroupResponse {
    return QueryAllGroupResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllGroupResponse>, I>>(object: I): QueryAllGroupResponse {
    const message = createBaseQueryAllGroupResponse();
    message.group = object.group?.map((e) => Group.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryListAdminOfGroupRequest(): QueryListAdminOfGroupRequest {
  return { group: "", pagination: undefined };
}

export const QueryListAdminOfGroupRequest: MessageFns<QueryListAdminOfGroupRequest> = {
  encode(message: QueryListAdminOfGroupRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.group !== "") {
      writer.uint32(10).string(message.group);
    }
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryListAdminOfGroupRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryListAdminOfGroupRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.group = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryListAdminOfGroupRequest {
    return {
      group: isSet(object.group) ? globalThis.String(object.group) : "",
      pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryListAdminOfGroupRequest): unknown {
    const obj: any = {};
    if (message.group !== "") {
      obj.group = message.group;
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryListAdminOfGroupRequest>, I>>(base?: I): QueryListAdminOfGroupRequest {
    return QueryListAdminOfGroupRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryListAdminOfGroupRequest>, I>>(object: I): QueryListAdminOfGroupRequest {
    const message = createBaseQueryListAdminOfGroupRequest();
    message.group = object.group ?? "";
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryListAdminOfGroupResponse(): QueryListAdminOfGroupResponse {
  return { admin: [], pagination: undefined };
}

export const QueryListAdminOfGroupResponse: MessageFns<QueryListAdminOfGroupResponse> = {
  encode(message: QueryListAdminOfGroupResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.admin) {
      writer.uint32(10).string(v!);
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryListAdminOfGroupResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryListAdminOfGroupResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.admin.push(reader.string());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryListAdminOfGroupResponse {
    return {
      admin: globalThis.Array.isArray(object?.admin) ? object.admin.map((e: any) => globalThis.String(e)) : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryListAdminOfGroupResponse): unknown {
    const obj: any = {};
    if (message.admin?.length) {
      obj.admin = message.admin;
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryListAdminOfGroupResponse>, I>>(base?: I): QueryListAdminOfGroupResponse {
    return QueryListAdminOfGroupResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryListAdminOfGroupResponse>, I>>(
    object: I,
  ): QueryListAdminOfGroupResponse {
    const message = createBaseQueryListAdminOfGroupResponse();
    message.admin = object.admin?.map((e) => e) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

/** Query defines the gRPC querier service. */
export interface Query {
  /** Parameters queries the parameters of the module. */
  Params(request: QueryParamsRequest): Promise<QueryParamsResponse>;
  /** Queries a list of Admin items. */
  Admin(request: QueryGetAdminRequest): Promise<QueryGetAdminResponse>;
  AdminAll(request: QueryAllAdminRequest): Promise<QueryAllAdminResponse>;
  /** Queries a list of Group items. */
  Group(request: QueryGetGroupRequest): Promise<QueryGetGroupResponse>;
  GroupAll(request: QueryAllGroupRequest): Promise<QueryAllGroupResponse>;
  /** Queries a list of ListAdminOfGroup items. */
  ListAdminOfGroup(request: QueryListAdminOfGroupRequest): Promise<QueryListAdminOfGroupResponse>;
}

export const QueryServiceName = "sixprotocol.protocoladmin.Query";
export class QueryClientImpl implements Query {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || QueryServiceName;
    this.rpc = rpc;
    this.Params = this.Params.bind(this);
    this.Admin = this.Admin.bind(this);
    this.AdminAll = this.AdminAll.bind(this);
    this.Group = this.Group.bind(this);
    this.GroupAll = this.GroupAll.bind(this);
    this.ListAdminOfGroup = this.ListAdminOfGroup.bind(this);
  }
  Params(request: QueryParamsRequest): Promise<QueryParamsResponse> {
    const data = QueryParamsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Params", data);
    return promise.then((data) => QueryParamsResponse.decode(new BinaryReader(data)));
  }

  Admin(request: QueryGetAdminRequest): Promise<QueryGetAdminResponse> {
    const data = QueryGetAdminRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Admin", data);
    return promise.then((data) => QueryGetAdminResponse.decode(new BinaryReader(data)));
  }

  AdminAll(request: QueryAllAdminRequest): Promise<QueryAllAdminResponse> {
    const data = QueryAllAdminRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "AdminAll", data);
    return promise.then((data) => QueryAllAdminResponse.decode(new BinaryReader(data)));
  }

  Group(request: QueryGetGroupRequest): Promise<QueryGetGroupResponse> {
    const data = QueryGetGroupRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Group", data);
    return promise.then((data) => QueryGetGroupResponse.decode(new BinaryReader(data)));
  }

  GroupAll(request: QueryAllGroupRequest): Promise<QueryAllGroupResponse> {
    const data = QueryAllGroupRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GroupAll", data);
    return promise.then((data) => QueryAllGroupResponse.decode(new BinaryReader(data)));
  }

  ListAdminOfGroup(request: QueryListAdminOfGroupRequest): Promise<QueryListAdminOfGroupResponse> {
    const data = QueryListAdminOfGroupRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ListAdminOfGroup", data);
    return promise.then((data) => QueryListAdminOfGroupResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
